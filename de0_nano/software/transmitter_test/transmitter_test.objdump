
transmitter_test.elf:     file format elf32-littlenios2
transmitter_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00010720 memsz 0x00010720 flags r-x
    LOAD off    0x00011740 vaddr 0x02010740 paddr 0x0201231c align 2**12
         filesz 0x00001bdc memsz 0x00001bdc flags rw-
    LOAD off    0x00013ef8 vaddr 0x02013ef8 paddr 0x02013ef8 align 2**12
         filesz 0x00000000 memsz 0x00005578 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010298  020001bc  020001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002ec  02010454  02010454  00011454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bdc  02010740  0201231c  00011740  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00005578  02013ef8  02013ef8  00013ef8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001331c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000bb8  00000000  00000000  00013348  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000233a  00000000  00000000  00013f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b9fb  00000000  00000000  0001623a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007eaa  00000000  00000000  00041c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000167ea  00000000  00000000  00049adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000238c  00000000  00000000  000602cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002492  00000000  00000000  00062658  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005ed9  00000000  00000000  00064aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006a9c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000328  00000000  00000000  0006a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0006fbdf  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006fbe5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006fbe8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006fbe9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006fbea  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006fbee  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006fbf2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006fbf6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006fbff  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006fc08  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0006fc11  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  0006fc17  2**0
                  CONTENTS, READONLY
 29 .jdi          000044d2  00000000  00000000  0006fc4b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000492b5  00000000  00000000  0007411d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001bc l    d  .text	00000000 .text
02010454 l    d  .rodata	00000000 .rodata
02010740 l    d  .rwdata	00000000 .rwdata
02013ef8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
02000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 transmitterInterface.cpp
00000000 l    df *ABS*	00000000 transmitter_test.cpp
02000810 l     F .text	00000030 _GLOBAL__I_task1_stk
020007e0 l     F .text	00000030 _GLOBAL__D_task1_stk
02000764 l     F .text	0000007c _Z41__static_initialization_and_destruction_0ii
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
02010b48 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02002b54 l     F .text	00000058 std
02002c60 l     F .text	00000008 __fp_lock
02002c68 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
020037e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02003848 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02003948 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02003a68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02003b48 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02003ca4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
02003eec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02012288 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02004188 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0201228c l     O .rwdata	00000004 lockid
02013f18 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
02012290 l     O .rwdata	00000004 lockid
02013f20 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02005bc0 l     F .text	00000044 OS_InitMisc
02005c04 l     F .text	0000006c OS_InitRdyList
02005d68 l     F .text	000000e0 OS_InitTCBList
02005ae4 l     F .text	000000dc OS_InitEventList
02005c70 l     F .text	0000007c OS_InitTaskIdle
02005cec l     F .text	0000007c OS_InitTaskStat
02005fdc l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
02007efc l     F .text	00000110 OS_FlagTaskRdy
02007c54 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
020110f0 l     O .rwdata	000000c8 epcs_flash_controller
020111b8 l     O .rwdata	0000106c jtag_uart
02012224 l     O .rwdata	0000002c de0_nano_adc_0
0200c83c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0200c900 l     F .text	00000288 alt_epcs_flash_query
0200c8c8 l     F .text	00000038 alt_flash_device_register
0200cb88 l     F .text	00000108 alt_epcs_flash_memcmp
0200d010 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200d4d8 l     F .text	000002c4 altera_avalon_jtag_uart_irq
0200d79c l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0200dfb4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
0200e20c l     F .text	00000038 epcs_await_wip_released
0200e244 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200e9d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0200eec8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0200f004 l     F .text	000000dc alt_file_locked
0200f268 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
020100dc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
02010290 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
020103dc l     F .text	00000040 alt_sim_halt
02000d64 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
020122de g     O .rwdata	00000002 OSTaskNameSize
0200cf10 g     F .text	00000090 alt_epcs_flash_get_info
0200358c g     F .text	00000070 _isatty_r
02003d04 g     F .text	000000c8 alt_main
0200151c g     F .text	000000a0 _puts_r
020191e0 g     O .bss	00000100 alt_irq
020035fc g     F .text	00000078 _lseek_r
020087f0 g     F .text	000000d0 OS_MemInit
0201231c g       *ABS*	00000000 __flash_rwdata_start
0200c730 g     F .text	00000064 OSTimeSet
0200473c g     F .text	000006b4 OSEventPendMulti
02019470 g       *ABS*	00000000 __alt_heap_start
0200f870 g     F .text	00000020 OSTaskCreateHook
02013f84 g     O .bss	00002000 task1_stk
020122b6 g     O .rwdata	00000002 OSMboxEn
02004e44 g     F .text	0000007c OSIntEnter
02000c60 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
020031c8 g     F .text	00000068 __sseek
02002bbc g     F .text	000000a4 __sinit
020122c6 g     O .rwdata	00000002 OSQEn
02000c50 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
02010554  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
02002cbc g     F .text	00000068 __sfmoreglue
020043f8 g     F .text	000000d0 __malloc_unlock
0200f8cc g     F .text	0000001c OSTaskStatHook
02013f28 g     O .bss	00000001 OSLockNesting
02012304 g     O .rwdata	00000002 OSDataSize
02013f29 g     O .bss	00000001 OSRunning
02002114 g     F .text	000000e0 memmove
0200f904 g     F .text	0000001c OSInitHookBegin
020122fc g     O .rwdata	00000002 OSTmrSize
02002cac g     F .text	00000010 _cleanup
02013f2c g     O .bss	00000004 OSIdleCtr
0200f53c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
02006310 g     F .text	000002e0 OS_TCBInit
0200e114 g     F .text	000000f8 epcs_sector_erase
02000000 g     F .entry	0000001c __reset
02012302 g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
020122a2 g     O .rwdata	00000002 OSEventSize
02013f30 g     O .bss	00000001 OSPrioHighRdy
02003518 g     F .text	00000074 _fstat_r
0200f890 g     F .text	00000020 OSTaskDelHook
02013f04 g     O .bss	00000004 errno
0200f51c g       .text	00000000 OSStartHighRdy
0200af04 g     F .text	00000200 OSTaskCreateExt
02007770 g     F .text	00000068 OSFlagPendGetFlagsRdy
020122e2 g     O .rwdata	00000002 OSTaskStatStkSize
0200677c g     F .text	00000334 OSFlagAccept
02008f28 g     F .text	000000c8 OSQFlush
020088c0 g     F .text	00000154 OSQAccept
02013f10 g     O .bss	00000004 alt_argv
0201a250 g       *ABS*	00000000 _gp
0200ad30 g     F .text	000001d4 OSTaskCreate
0200a7bc g     F .text	00000574 OSTaskChangePrio
02013f24 g     O .bss	00000004 alt_heapsem
020065f0 g     F .text	0000018c OSDebugInit
0200b104 g     F .text	0000040c OSTaskDel
02010f70 g     O .rwdata	00000180 alt_fd_list
02015fbc g     O .bss	00000370 OSFlagTbl
020058c0 g     F .text	000000b8 OS_EventTaskRemove
0200e418 g     F .text	00000064 epcs_write_status_register
0200fbb0 g     F .text	00000094 alt_find_dev
02002074 g     F .text	000000a0 memcpy
020122cc g     O .rwdata	00000002 OSRdyTblSize
02002ca0 g     F .text	0000000c _cleanup_r
0200ef8c g     F .text	00000078 alt_io_redirect
02010454 g       *ABS*	00000000 __DTOR_END__
02000a8c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
020015bc g     F .text	00000014 puts
020044c8 g     F .text	00000130 OSEventNameGet
020122b0 g     O .rwdata	00000002 OSFlagMax
0200d0a4 g     F .text	0000011c alt_epcs_flash_write_block
02004ec0 g     F .text	00000100 OSIntExit
020122ea g     O .rwdata	00000002 OSTCBSize
02013f31 g     O .bss	00000001 OSPrioCur
0200da18 g     F .text	000002c0 altera_avalon_jtag_uart_read
02000dc8 g     F .text	00000014 malloc
020103cc g     F .text	00000008 __udivsi3
020039a8 g     F .text	000000c0 isatty
020122d0 g     O .rwdata	00000002 OSStkWidth
0200039c g     F .text	00000088 _ZN20TransmitterInterface7turnOffEv
020122c4 g     O .rwdata	00000002 OSPtrSize
020122a4 g     O .rwdata	00000002 OSEventTblSize
0200f490 g       .text	00000000 OSCtxSw
0200fe58 g     F .text	00000090 alt_icache_flush
02013ef8 g     O .bss	00000004 __malloc_top_pad
02013f34 g     O .bss	00000004 OSTCBList
02000208 g     F .text	00000048 _ZN20TransmitterInterface12validateTurnEaa
02013f08 g     O .bss	00000004 alt_fd_list_lock
02001af4 g     F .text	0000049c __sfvwrite_r
02000aac g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0201632c g     O .bss	00000c30 OSMemTbl
02013f38 g     O .bss	00000001 OSTickStepState
020015d0 g     F .text	00000070 _sbrk_r
02010588  w    O .rodata	00000020 _ZTVSt9type_info
020122c8 g     O .rwdata	00000002 OSQMax
02016f5c g     O .bss	00000800 OSTaskStatStk
020083d8 g     F .text	0000010c OSMemNameGet
020122a8 g     O .rwdata	00000002 OSFlagEn
02003674 g     F .text	00000078 _read_r
020122ee g     O .rwdata	00000002 OSTimeTickHookEn
0200948c g     F .text	00000180 OSQPost
0200800c g     F .text	000000ac OS_FlagUnlink
020005bc g     F .text	00000050 _ZN20TransmitterInterfaceD0Ev
02012280 g     O .rwdata	00000004 alt_max_fd
02005e9c g     F .text	0000006c OS_MemCopy
02005f08 g     F .text	000000d4 OS_Sched
020033f4 g     F .text	00000110 _fclose_r
020082d4 g     F .text	00000104 OSMemGet
0200b838 g     F .text	000001c4 OSTaskNameSet
02002b20 g     F .text	00000034 fflush
02013efc g     O .bss	00000004 __malloc_max_sbrked_mem
02013f3c g     O .bss	00000004 OSCtxSwCtr
0200f8e8 g     F .text	0000001c OSTimeTickHook
020122b2 g     O .rwdata	00000002 OSFlagNameSize
02005978 g     F .text	00000104 OS_EventTaskRemoveMulti
02010528  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0200576c g     F .text	00000154 OS_EventTaskWaitMulti
0200cfa0 g     F .text	00000070 alt_epcs_flash_erase_block
020122ca g     O .rwdata	00000002 OSQSize
02003bb4 g     F .text	000000f0 lseek
0200a068 g     F .text	0000027c OSSemPend
02000b0c g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
02000b88 g     F .text	0000000c _ZdlPv
0201226c g     O .rwdata	00000004 _global_impure_ptr
0200e730 g     F .text	00000058 epcs_exit_4_bytes_mode
020021f4 g     F .text	000005f4 _realloc_r
020122b4 g     O .rwdata	00000002 OSLowestPrio
02019470 g       *ABS*	00000000 __bss_end
0200edd0 g     F .text	000000f8 alt_iic_isr_register
0200f958 g     F .text	00000020 OSTCBInitHook
020122fa g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0200f360 g     F .text	00000110 alt_tick
0201229c g     O .rwdata	00000002 OSEventEn
020122f6 g     O .rwdata	00000002 OSTmrCfgNameSize
02002c88 g     F .text	00000018 __fp_lock_all
0200ed88 g     F .text	00000048 alt_ic_irq_enabled
02007e18 g     F .text	000000e4 OS_FlagInit
0200f2c8 g     F .text	00000098 alt_alarm_stop
020122d8 g     O .rwdata	00000002 OSTaskIdleStkSize
02013f78 g     O .bss	00000004 alt_irq_active
02009bf4 g     F .text	000000c0 OSSemAccept
02008604 g     F .text	000000f0 OSMemPut
020080b8 g     F .text	0000021c OSMemCreate
02013f40 g     O .bss	00000004 OSIdleCtrMax
020000ec g     F .exceptions	000000d0 alt_irq_handler
02010f48 g     O .rwdata	00000028 alt_dev_null
020122ec g     O .rwdata	00000002 OSTicksPerSec
0200f490 g       .text	00000000 OSIntCtxSw
020104f8  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
0200e8dc g     F .text	00000044 alt_dcache_flush_all
02013f44 g     O .bss	00000004 OSTCBFreeList
0201231c g       *ABS*	00000000 __ram_rwdata_end
0200a2e4 g     F .text	0000017c OSSemPendAbort
02000d94 g     F .text	00000010 _ZNSt9type_infoD1Ev
02012278 g     O .rwdata	00000008 alt_dev_list
02004068 g     F .text	00000120 write
02000534 g     F .text	00000088 _ZN20TransmitterInterface8turnLeftEv
020122f0 g     O .rwdata	00000002 OSVersionNbr
02000d84 g     F .text	00000010 _ZNSt9type_infoD0Ev
02010740 g       *ABS*	00000000 __ram_rodata_end
02003874 g     F .text	000000d4 fstat
02012298 g     O .rwdata	00000004 OSEndiannessTest
020103d4 g     F .text	00000008 __umodsi3
02000d7c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0200e5ec g     F .text	0000006c epcs_read_electronic_signature
020122aa g     O .rwdata	00000002 OSFlagGrpSize
02019470 g       *ABS*	00000000 end
02000250 g     F .text	00000048 _ZN20TransmitterInterface12validateMoveEaa
0200d3a0 g     F .text	00000138 altera_avalon_jtag_uart_init
02006180 g     F .text	000000c8 OS_TaskStat
02010448 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0200e024 g     F .text	00000090 alt_avalon_timer_sc_init
020009cc g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0200dcd8 g     F .text	000002dc altera_avalon_jtag_uart_write
02002bac g     F .text	00000004 __sfp_lock_acquire
02001f90 g     F .text	000000e4 memchr
02005e48 g     F .text	00000054 OS_MemClr
0200f560 g     F .text	00000310 OSTaskStkInit
020017e0 g     F .text	00000314 _free_r
020054c8 g     F .text	00000194 OS_EventTaskRdy
020100e0 g     F .text	000001b0 __call_exitprocs
02013f48 g     O .bss	00000001 OSCPUUsage
02012264 g     O .rwdata	00000004 __malloc_sbrk_base
020001bc g     F .text	0000004c _start
02013f7c g     O .bss	00000004 _alt_tick_rate
02008ff0 g     F .text	00000320 OSQPend
020105a8  w    O .rodata	0000000d _ZTSSt9type_info
0200c1fc g     F .text	0000014c OSTimeDly
0200f978 g     F .text	00000238 alt_avalon_spi_command
02013f80 g     O .bss	00000004 _alt_nticks
02003dcc g     F .text	00000120 read
0200c7c8 g     F .text	00000074 alt_sys_init
02010464  w    O .rodata	00000017 _ZTS20TransmitterInterface
0200ffa8 g     F .text	00000134 __register_exitproc
02013f49 g     O .bss	00000001 OSTaskCtr
0200c348 g     F .text	00000174 OSTimeDlyHMSM
0200065c g     F .text	00000050 _ZN20TransmitterInterfaceD2Ev
0200d8b0 g     F .text	00000074 altera_avalon_jtag_uart_close
02010740 g       *ABS*	00000000 __ram_rwdata_start
02010454 g       *ABS*	00000000 __ram_rodata_start
02015f94 g     O .bss	00000028 __malloc_current_mallinfo
0201229e g     O .rwdata	00000002 OSEventMax
0200a460 g     F .text	00000128 OSSemPost
02000da4 g     F .text	00000010 _ZNSt9type_infoD2Ev
02000708 g     F .text	0000005c _ZN20TransmitterInterfaceC2EPv
0200e0b4 g     F .text	00000060 epcs_read_status_register
0200504c g     F .text	000000e4 OSSchedUnlock
02000b94 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0200d258 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0200fd64 g     F .text	000000f4 alt_get_fd
02013f4c g     O .bss	00000004 OSMemFreeList
020051a0 g     F .text	000000ac OSStatInit
02007b80 g     F .text	000000d4 OSFlagQuery
020122d4 g     O .rwdata	00000002 OSTaskCreateExtEn
02003384 g     F .text	00000070 _close_r
0200e658 g     F .text	00000080 epcs_read_device_id
0200ff34 g     F .text	00000074 memcmp
020054ac g     F .text	0000001c OS_Dummy
0200d308 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02019470 g       *ABS*	00000000 __alt_stack_base
0200d350 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02000c40 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
020027e8 g     F .text	0000013c __swsetup_r
0201775c g     O .bss	000001e0 OSQTbl
02002d24 g     F .text	000000f0 __sfp
02000d5c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
02010740 g     O .rwdata	00000408 __malloc_av_
02002bb8 g     F .text	00000004 __sinit_lock_release
02013f50 g     O .bss	00000004 OSTCBHighRdy
04000800 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
020032ac g     F .text	00000060 __sread
02013f54 g     O .bss	00000004 OSQFreeList
0200fc44 g     F .text	00000120 alt_find_file
02000a38 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
0200e920 g     F .text	000000b4 alt_dev_llist_insert
020042f0 g     F .text	00000108 __malloc_lock
02003fac g     F .text	000000bc sbrk
020006ac g     F .text	0000005c _ZN20TransmitterInterfaceC1EPv
020104cc  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
020045f8 g     F .text	00000144 OSEventNameSet
02002924 g     F .text	000001fc _fflush_r
02013f58 g     O .bss	00000001 OSRdyGrp
02012308 g     O .rwdata	00000008 alt_flash_dev_list
02013ef8 g       *ABS*	00000000 __bss_start
02003128 g     F .text	00000098 memset
02000840 g     F .text	0000006c main
02013f14 g     O .bss	00000004 alt_envp
02013f00 g     O .bss	00000004 __malloc_max_total_mem
0200d2b0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
020105dc g     O .rodata	00000100 OSUnMapTbl
020122ce g     O .rwdata	00000002 OSSemEn
020077d8 g     F .text	000003a8 OSFlagPost
020031c0 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02003504 g     F .text	00000014 fclose
0200565c g     F .text	00000110 OS_EventTaskWait
02006248 g     F .text	000000c8 OS_TaskStatStkChk
020192e0 g     O .bss	00000190 _atexit0
0200b510 g     F .text	00000170 OSTaskDelReq
02000ddc g     F .text	00000740 _malloc_r
02012284 g     O .rwdata	00000004 alt_errno
02005130 g     F .text	00000070 OSStart
02004294 g     F .text	0000005c __env_unlock
0201051c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
02002edc g     F .text	000000b8 _fwalk
0200b9fc g     F .text	00000218 OSTaskResume
020086f4 g     F .text	000000fc OSMemQuery
020122e0 g     O .rwdata	00000002 OSTaskStatEn
020122ba g     O .rwdata	00000002 OSMemMax
0200960c g     F .text	00000188 OSQPostFront
0201030c g     F .text	00000060 __divsi3
02013f59 g     O .bss	00000003 OSRdyTbl
02012294 g     O .rwdata	00000002 OSDebugEn
020016b4 g     F .text	0000012c _malloc_trim_r
02010450 g       *ABS*	00000000 __CTOR_END__
020122ac g     O .rwdata	00000002 OSFlagNodeSize
02000424 g     F .text	00000088 _ZN20TransmitterInterface11moveReverseEv
020122f4 g     O .rwdata	00000002 OSTmrCfgMax
0200cc90 g     F .text	00000280 alt_epcs_flash_write
02008a14 g     F .text	00000214 OSQCreate
02015f84 g     O .bss	00000010 transmit
0200b680 g     F .text	000001b8 OSTaskNameGet
02010454 g       *ABS*	00000000 __flash_rodata_start
02009794 g     F .text	00000234 OSQPostOpt
0200524c g     F .text	00000240 OSTimeTick
020122dc g     O .rwdata	00000002 OSTaskMax
02010450 g       *ABS*	00000000 __DTOR_LIST__
02009cb4 g     F .text	00000114 OSSemCreate
02012300 g     O .rwdata	00000002 OSTmrWheelSize
020122d6 g     O .rwdata	00000002 OSTaskDelEn
0200a588 g     F .text	00000130 OSSemQuery
02008c28 g     F .text	00000300 OSQDel
02009310 g     F .text	0000017c OSQPendAbort
0200c794 g     F .text	00000034 alt_irq_init
02003f4c g     F .text	00000060 alt_release_fd
02000c0c g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0200fee8 g     F .text	00000014 atexit
0200330c g     F .text	00000078 _write_r
02004fc0 g     F .text	0000008c OSSchedLock
02006ab0 g     F .text	0000013c OSFlagCreate
02012268 g     O .rwdata	00000004 _impure_ptr
02013f0c g     O .bss	00000004 alt_argc
0200ea98 g     F .text	00000064 _do_dtors
020122a6 g     O .rwdata	00000002 OSEventMultiEn
02012250  w    O .rwdata	00000008 _ZTI20TransmitterInterface
02006bec g     F .text	000002a8 OSFlagDel
02013f5c g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
0200712c g     F .text	00000644 OSFlagPend
020122f2 g     O .rwdata	00000002 OSTmrEn
02002c70 g     F .text	00000018 __fp_unlock_all
02012270 g     O .rwdata	00000008 alt_fs_list
0200604c g     F .text	00000080 OS_StrCopy
020122bc g     O .rwdata	00000002 OSMemNameSize
02000a9c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0200f920 g     F .text	0000001c OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
020122e8 g     O .rwdata	00000002 OSTCBPrioTblMax
0200e27c g     F .text	0000014c epcs_read_buffer
020122e4 g     O .rwdata	00000002 OSTaskStatStkChkEn
0200c874 g     F .text	00000054 alt_epcs_flash_init
0200ebfc g     F .text	00000050 alt_ic_isr_register
020122b8 g     O .rwdata	00000002 OSMemEn
020122c2 g     O .rwdata	00000002 OSMutexEn
0201057c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0201231c g       *ABS*	00000000 _edata
02019470 g       *ABS*	00000000 _end
0200eafc g     F .text	0000007c alt_flash_open_dev
02013f60 g     O .bss	00000001 OSIntNesting
020001bc g       *ABS*	00000000 __ram_exceptions_end
0200d924 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0200c4bc g     F .text	00000210 OSTimeDlyResume
02006fd8 g     F .text	00000154 OSFlagNameSet
02000314 g     F .text	00000088 _ZN20TransmitterInterface7moveOffEv
02000b3c g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0200bc14 g     F .text	000001fc OSTaskStkChk
0200ece8 g     F .text	000000a0 alt_ic_irq_disable
0200e6d8 g     F .text	00000058 epcs_enter_4_bytes_mode
020122be g     O .rwdata	00000002 OSMemSize
02003230 g     F .text	0000007c __swrite
02012260 g     O .rwdata	00000004 __malloc_trim_threshold
0200f470 g     F .text	00000020 altera_nios2_qsys_irq_init
02013f64 g     O .bss	00000004 OSTCBCur
0200fefc g     F .text	00000038 exit
020122c0 g     O .rwdata	00000002 OSMemTblSize
02002e14 g     F .text	000000c8 _fwalk_reent
0200eb78 g     F .text	00000054 alt_flash_close_dev
0201036c g     F .text	00000060 __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02002bb0 g     F .text	00000004 __sfp_lock_release
02000c94 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
02004df0 g     F .text	00000054 OSInit
02000000 g       *ABS*	00000000 __alt_mem_sdram
0200c03c g     F .text	00000144 OSTaskQuery
02009b48 g     F .text	000000ac OS_QInit
020060cc g     F .text	00000058 OS_StrLen
020084e4 g     F .text	00000120 OSMemNameSet
02010454  w    O .rodata	00000010 _ZTV20TransmitterInterface
0200060c g     F .text	00000050 _ZN20TransmitterInterfaceD1Ev
020122da g     O .rwdata	00000002 OSTaskProfileEn
02013f68 g     O .bss	00000004 OSTime
0201793c g     O .bss	00000800 OSTaskIdleStk
0201041c g     F .text	0000002c _exit
0200e788 g     F .text	00000154 alt_alarm_start
02006e94 g     F .text	00000144 OSFlagNameGet
0200c6cc g     F .text	00000064 OSTimeGet
02002f94 g     F .text	00000194 __smakebuf_r
020004ac g     F .text	00000088 _ZN20TransmitterInterface11moveForwardEv
02001640 g     F .text	00000074 strlen
0200e3c8 g     F .text	00000050 epcs_write_enable
02012258  w    O .rwdata	00000008 _ZTISt9type_info
0200f8b0 g     F .text	0000001c OSTaskSwHook
0200f0e0 g     F .text	00000188 open
0201813c g     O .bss	00000b40 OSEventTbl
02018c7c g     O .bss	00000510 OSTCBTbl
0200a6b8 g     F .text	00000104 OSSemSet
0200ebcc g     F .text	00000030 alt_icache_flush_all
02012310 g     O .rwdata	00000004 alt_priority_mask
02009dc8 g     F .text	000002a0 OSSemDel
02013f6c g     O .bss	00000004 OSFlagFreeList
0200ec4c g     F .text	0000009c alt_ic_irq_enable
020122a0 g     O .rwdata	00000002 OSEventNameSize
02013f70 g     O .bss	00000001 OSStatRdy
0201918c g     O .bss	00000054 OSTCBPrioTbl
020041e8 g     F .text	000000ac __env_lock
020122e6 g     O .rwdata	00000002 OSTaskSwHookEn
02000298 g     F .text	0000007c _ZN20TransmitterInterface9turnRightEv
0200d1c0 g     F .text	00000098 alt_epcs_flash_read
02012314 g     O .rwdata	00000008 alt_alarm_list
020122ae g     O .rwdata	00000002 OSFlagWidth
0200ea34 g     F .text	00000064 _do_ctors
020036ec g     F .text	000000fc close
02013f1c g     O .bss	00000004 alt_envsem
02013f74 g     O .bss	00000004 OSIdleCtrRun
0200548c g     F .text	00000020 OSVersion
020122f8 g     O .rwdata	00000002 OSTmrCfgWheelSize
02003ac8 g     F .text	00000080 alt_load
0200c180 g     F .text	0000007c OS_TaskStkClr
020008ac g     F .text	00000120 _Z5task1Pv
020122d2 g     O .rwdata	00000002 OSTaskCreateEn
02000d6c g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
02005a7c g     F .text	00000068 OS_EventWaitListInit
0200f93c g     F .text	0000001c OSTaskIdleHook
02000db4 g     F .text	00000014 free
02002bb4 g     F .text	00000004 __sinit_lock_acquire
0200e47c g     F .text	00000170 epcs_write_buffer
02000a58 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
0200be10 g     F .text	0000022c OSTaskSuspend
02006124 g     F .text	0000005c OS_TaskIdle
020122fe g     O .rwdata	00000002 OSTmrTblSize
020099c8 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00880014 	movui	r2,8192
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08406f14 	ori	at,at,444
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20000fc:	2004e440 	call	2004e44 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000100:	0005313a 	rdctl	r2,ipending
 2000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 2000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000114:	00800044 	movi	r2,1
 2000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200011c:	e0ffff17 	ldw	r3,-4(fp)
 2000120:	e0bffe17 	ldw	r2,-8(fp)
 2000124:	1884703a 	and	r2,r3,r2
 2000128:	1005003a 	cmpeq	r2,r2,zero
 200012c:	1000161e 	bne	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 2000130:	e0bffd17 	ldw	r2,-12(fp)
 2000134:	00c080b4 	movhi	r3,514
 2000138:	18e47804 	addi	r3,r3,-28192
 200013c:	100490fa 	slli	r2,r2,3
 2000140:	10c5883a 	add	r2,r2,r3
 2000144:	11400017 	ldw	r5,0(r2)
 2000148:	e0bffd17 	ldw	r2,-12(fp)
 200014c:	00c080b4 	movhi	r3,514
 2000150:	18e47804 	addi	r3,r3,-28192
 2000154:	100490fa 	slli	r2,r2,3
 2000158:	10c5883a 	add	r2,r2,r3
 200015c:	10800104 	addi	r2,r2,4
 2000160:	11000017 	ldw	r4,0(r2)
 2000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000168:	0005313a 	rdctl	r2,ipending
 200016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 2000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000178:	e0bfff17 	ldw	r2,-4(fp)
 200017c:	1004c03a 	cmpne	r2,r2,zero
 2000180:	103fe31e 	bne	r2,zero,2000110 <alt_irq_handler+0x24>
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffe17 	ldw	r2,-8(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fde06 	br	200011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001a4:	2004ec00 	call	2004ec0 <OSIntExit>
}
 20001a8:	e037883a 	mov	sp,fp
 20001ac:	dfc00117 	ldw	ra,4(sp)
 20001b0:	df000017 	ldw	fp,0(sp)
 20001b4:	dec00204 	addi	sp,sp,8
 20001b8:	f800283a 	ret

Disassembly of section .text:

020001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001bc:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
 20001c0:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001c4:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 20001c8:	00bffd16 	blt	zero,r2,20001c0 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001cc:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001d0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001d4:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 20001d8:	d6a89414 	ori	gp,gp,41552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001dc:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001e0:	108fbe14 	ori	r2,r2,16120

    movhi r3, %hi(__bss_end)
 20001e4:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 20001e8:	18e51c14 	ori	r3,r3,38000

    beq r2, r3, 1f
 20001ec:	10c00326 	beq	r2,r3,20001fc <_start+0x40>

0:
    stw zero, (r2)
 20001f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f8:	10fffd36 	bltu	r2,r3,20001f0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001fc:	2003ac80 	call	2003ac8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000200:	2003d040 	call	2003d04 <alt_main>

02000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000204:	003fff06 	br	2000204 <alt_after_alt_main>

02000208 <_ZN20TransmitterInterface12validateTurnEaa>:
/*
 *Check the register to see what the previous command is and compare to the 
 *new command to ensure no illogical commands get sent to the transmitter.
 *i.e turn left and right
 */
int8_t TransmitterInterface::validateTurn( int8_t currentReg, int8_t command) {
 2000208:	defffb04 	addi	sp,sp,-20
 200020c:	df000415 	stw	fp,16(sp)
 2000210:	df000404 	addi	fp,sp,16
 2000214:	e13ffd15 	stw	r4,-12(fp)
 2000218:	e17ffe05 	stb	r5,-8(fp)
 200021c:	e1bfff05 	stb	r6,-4(fp)
	  
	//Clear previous turn commands.
	int8_t newReg = currentReg & CLEAR_TURN;
 2000220:	e0bffe03 	ldbu	r2,-8(fp)
 2000224:	1080030c 	andi	r2,r2,12
 2000228:	e0bffc05 	stb	r2,-16(fp)
	
	//Set the new turn command.
	newReg = newReg | command;
 200022c:	e0fffc03 	ldbu	r3,-16(fp)
 2000230:	e0bfff03 	ldbu	r2,-4(fp)
 2000234:	1884b03a 	or	r2,r3,r2
 2000238:	e0bffc05 	stb	r2,-16(fp)
	
	return newReg;
 200023c:	e0bffc07 	ldb	r2,-16(fp)
}
 2000240:	e037883a 	mov	sp,fp
 2000244:	df000017 	ldw	fp,0(sp)
 2000248:	dec00104 	addi	sp,sp,4
 200024c:	f800283a 	ret

02000250 <_ZN20TransmitterInterface12validateMoveEaa>:
/*
 *Check the register to see what the previous command is and compare to the 
 *new command to ensure no illogical commands get sent to the transmitter.
 *i.e move forward and reverse
 */
int8_t TransmitterInterface::validateMove( int8_t currentReg, int8_t command) {
 2000250:	defffb04 	addi	sp,sp,-20
 2000254:	df000415 	stw	fp,16(sp)
 2000258:	df000404 	addi	fp,sp,16
 200025c:	e13ffd15 	stw	r4,-12(fp)
 2000260:	e17ffe05 	stb	r5,-8(fp)
 2000264:	e1bfff05 	stb	r6,-4(fp)
	
	//Clear previous movement commands.
	int8_t newReg = currentReg & CLEAR_MOVE;
 2000268:	e0bffe03 	ldbu	r2,-8(fp)
 200026c:	108000cc 	andi	r2,r2,3
 2000270:	e0bffc05 	stb	r2,-16(fp)
	
	//Set the new movement command.
	newReg = newReg | command;
 2000274:	e0fffc03 	ldbu	r3,-16(fp)
 2000278:	e0bfff03 	ldbu	r2,-4(fp)
 200027c:	1884b03a 	or	r2,r3,r2
 2000280:	e0bffc05 	stb	r2,-16(fp)
	
	return newReg;
 2000284:	e0bffc07 	ldb	r2,-16(fp)
}
 2000288:	e037883a 	mov	sp,fp
 200028c:	df000017 	ldw	fp,0(sp)
 2000290:	dec00104 	addi	sp,sp,4
 2000294:	f800283a 	ret

02000298 <_ZN20TransmitterInterface9turnRightEv>:
}

/**
 *  Send turn right signal to transmitter.
 */
void TransmitterInterface::turnRight() {
 2000298:	defffc04 	addi	sp,sp,-16
 200029c:	dfc00315 	stw	ra,12(sp)
 20002a0:	df000215 	stw	fp,8(sp)
 20002a4:	df000204 	addi	fp,sp,8
 20002a8:	e13fff15 	stw	r4,-4(fp)
	int8_t oldReg = 0;
 20002ac:	e03ffe45 	stb	zero,-7(fp)
	int8_t newReg = 0;
 20002b0:	e03ffe05 	stb	zero,-8(fp)
	
	 OSSemPend(transmitter_lock,0,&err);
 20002b4:	e0bfff17 	ldw	r2,-4(fp)
 20002b8:	11000217 	ldw	r4,8(r2)
 20002bc:	e0bfff17 	ldw	r2,-4(fp)
 20002c0:	11800304 	addi	r6,r2,12
 20002c4:	000b883a 	mov	r5,zero
 20002c8:	200a0680 	call	200a068 <OSSemPend>
	//Read current status of the register
	oldReg = IORD_ALTERA_AVALON_PIO_DATA(baseAddress);
 20002cc:	e0bfff17 	ldw	r2,-4(fp)
 20002d0:	10800117 	ldw	r2,4(r2)
 20002d4:	10800037 	ldwio	r2,0(r2)
 20002d8:	e0bffe45 	stb	r2,-7(fp)
	
	//Create new valid turn command with out changing the other movement
	newReg = validateTurn(oldReg,RIGHT_CMD);
 20002dc:	e17ffe47 	ldb	r5,-7(fp)
 20002e0:	e13fff17 	ldw	r4,-4(fp)
 20002e4:	01800044 	movi	r6,1
 20002e8:	20002080 	call	2000208 <_ZN20TransmitterInterface12validateTurnEaa>
 20002ec:	e0bffe05 	stb	r2,-8(fp)
	
	//Write the new command to the register
	IOWR_ALTERA_AVALON_PIO_DATA(baseAddress, newReg);
 20002f0:	e0bfff17 	ldw	r2,-4(fp)
 20002f4:	10800117 	ldw	r2,4(r2)
 20002f8:	e0fffe07 	ldb	r3,-8(fp)
 20002fc:	10c00035 	stwio	r3,0(r2)

}
 2000300:	e037883a 	mov	sp,fp
 2000304:	dfc00117 	ldw	ra,4(sp)
 2000308:	df000017 	ldw	fp,0(sp)
 200030c:	dec00204 	addi	sp,sp,8
 2000310:	f800283a 	ret

02000314 <_ZN20TransmitterInterface7moveOffEv>:


/**
 * Send stop moving forwards signal to transmitter.
 */
void TransmitterInterface::moveOff() {
 2000314:	defffc04 	addi	sp,sp,-16
 2000318:	dfc00315 	stw	ra,12(sp)
 200031c:	df000215 	stw	fp,8(sp)
 2000320:	df000204 	addi	fp,sp,8
 2000324:	e13fff15 	stw	r4,-4(fp)
	int8_t oldReg = 0;
 2000328:	e03ffe45 	stb	zero,-7(fp)
	int8_t newReg = 0;
 200032c:	e03ffe05 	stb	zero,-8(fp)
	
	OSSemPend(transmitter_lock,0,&err);
 2000330:	e0bfff17 	ldw	r2,-4(fp)
 2000334:	11000217 	ldw	r4,8(r2)
 2000338:	e0bfff17 	ldw	r2,-4(fp)
 200033c:	11800304 	addi	r6,r2,12
 2000340:	000b883a 	mov	r5,zero
 2000344:	200a0680 	call	200a068 <OSSemPend>
	//Read current status of the register
	oldReg = IORD_ALTERA_AVALON_PIO_DATA(baseAddress);
 2000348:	e0bfff17 	ldw	r2,-4(fp)
 200034c:	10800117 	ldw	r2,4(r2)
 2000350:	10800037 	ldwio	r2,0(r2)
 2000354:	e0bffe45 	stb	r2,-7(fp)
	
	//Create new valid movement command with out changing the turning property
	newReg = validateMove(oldReg,OFF_CMD);
 2000358:	e17ffe47 	ldb	r5,-7(fp)
 200035c:	e13fff17 	ldw	r4,-4(fp)
 2000360:	000d883a 	mov	r6,zero
 2000364:	20002500 	call	2000250 <_ZN20TransmitterInterface12validateMoveEaa>
 2000368:	e0bffe05 	stb	r2,-8(fp)
	
	//Write the new command to the register
	IOWR_ALTERA_AVALON_PIO_DATA(baseAddress, newReg);
 200036c:	e0bfff17 	ldw	r2,-4(fp)
 2000370:	10800117 	ldw	r2,4(r2)
 2000374:	e0fffe07 	ldb	r3,-8(fp)
 2000378:	10c00035 	stwio	r3,0(r2)
    OSSemPost(transmitter_lock);
 200037c:	e0bfff17 	ldw	r2,-4(fp)
 2000380:	11000217 	ldw	r4,8(r2)
 2000384:	200a4600 	call	200a460 <OSSemPost>
}
 2000388:	e037883a 	mov	sp,fp
 200038c:	dfc00117 	ldw	ra,4(sp)
 2000390:	df000017 	ldw	fp,0(sp)
 2000394:	dec00204 	addi	sp,sp,8
 2000398:	f800283a 	ret

0200039c <_ZN20TransmitterInterface7turnOffEv>:
}

/**
 * Send stop turning signal to transmitter.
 */
void TransmitterInterface::turnOff() {
 200039c:	defffc04 	addi	sp,sp,-16
 20003a0:	dfc00315 	stw	ra,12(sp)
 20003a4:	df000215 	stw	fp,8(sp)
 20003a8:	df000204 	addi	fp,sp,8
 20003ac:	e13fff15 	stw	r4,-4(fp)
	int8_t oldReg = 0;
 20003b0:	e03ffe45 	stb	zero,-7(fp)
	int8_t newReg = 0;
 20003b4:	e03ffe05 	stb	zero,-8(fp)
	
	 OSSemPend(transmitter_lock,0,&err);
 20003b8:	e0bfff17 	ldw	r2,-4(fp)
 20003bc:	11000217 	ldw	r4,8(r2)
 20003c0:	e0bfff17 	ldw	r2,-4(fp)
 20003c4:	11800304 	addi	r6,r2,12
 20003c8:	000b883a 	mov	r5,zero
 20003cc:	200a0680 	call	200a068 <OSSemPend>
	//Read current status of the register
	oldReg = IORD_ALTERA_AVALON_PIO_DATA(baseAddress);
 20003d0:	e0bfff17 	ldw	r2,-4(fp)
 20003d4:	10800117 	ldw	r2,4(r2)
 20003d8:	10800037 	ldwio	r2,0(r2)
 20003dc:	e0bffe45 	stb	r2,-7(fp)
	
	//Create new valid turn command with out changing the other movement
	newReg = validateTurn(oldReg,OFF_CMD);
 20003e0:	e17ffe47 	ldb	r5,-7(fp)
 20003e4:	e13fff17 	ldw	r4,-4(fp)
 20003e8:	000d883a 	mov	r6,zero
 20003ec:	20002080 	call	2000208 <_ZN20TransmitterInterface12validateTurnEaa>
 20003f0:	e0bffe05 	stb	r2,-8(fp)
	
	//Write the new command to the register
	IOWR_ALTERA_AVALON_PIO_DATA(baseAddress, newReg);
 20003f4:	e0bfff17 	ldw	r2,-4(fp)
 20003f8:	10800117 	ldw	r2,4(r2)
 20003fc:	e0fffe07 	ldb	r3,-8(fp)
 2000400:	10c00035 	stwio	r3,0(r2)
    OSSemPost(transmitter_lock);
 2000404:	e0bfff17 	ldw	r2,-4(fp)
 2000408:	11000217 	ldw	r4,8(r2)
 200040c:	200a4600 	call	200a460 <OSSemPost>
}
 2000410:	e037883a 	mov	sp,fp
 2000414:	dfc00117 	ldw	ra,4(sp)
 2000418:	df000017 	ldw	fp,0(sp)
 200041c:	dec00204 	addi	sp,sp,8
 2000420:	f800283a 	ret

02000424 <_ZN20TransmitterInterface11moveReverseEv>:
}

/**
 * Send reverse signal to transmitter.
 */
void TransmitterInterface::moveReverse() {
 2000424:	defffc04 	addi	sp,sp,-16
 2000428:	dfc00315 	stw	ra,12(sp)
 200042c:	df000215 	stw	fp,8(sp)
 2000430:	df000204 	addi	fp,sp,8
 2000434:	e13fff15 	stw	r4,-4(fp)
	int8_t oldReg = 0;
 2000438:	e03ffe45 	stb	zero,-7(fp)
	int8_t newReg = 0;
 200043c:	e03ffe05 	stb	zero,-8(fp)
	
	OSSemPend(transmitter_lock,0,&err);
 2000440:	e0bfff17 	ldw	r2,-4(fp)
 2000444:	11000217 	ldw	r4,8(r2)
 2000448:	e0bfff17 	ldw	r2,-4(fp)
 200044c:	11800304 	addi	r6,r2,12
 2000450:	000b883a 	mov	r5,zero
 2000454:	200a0680 	call	200a068 <OSSemPend>
	//Read current status of the register
	oldReg = IORD_ALTERA_AVALON_PIO_DATA(baseAddress);
 2000458:	e0bfff17 	ldw	r2,-4(fp)
 200045c:	10800117 	ldw	r2,4(r2)
 2000460:	10800037 	ldwio	r2,0(r2)
 2000464:	e0bffe45 	stb	r2,-7(fp)
	
	//Create new valid movement command with out changing the turning property
	newReg = validateMove(oldReg,REVERSE_CMD);
 2000468:	e17ffe47 	ldb	r5,-7(fp)
 200046c:	e13fff17 	ldw	r4,-4(fp)
 2000470:	01800104 	movi	r6,4
 2000474:	20002500 	call	2000250 <_ZN20TransmitterInterface12validateMoveEaa>
 2000478:	e0bffe05 	stb	r2,-8(fp)
	
	//Write the new command to the register
	IOWR_ALTERA_AVALON_PIO_DATA(baseAddress, newReg);
 200047c:	e0bfff17 	ldw	r2,-4(fp)
 2000480:	10800117 	ldw	r2,4(r2)
 2000484:	e0fffe07 	ldb	r3,-8(fp)
 2000488:	10c00035 	stwio	r3,0(r2)
    OSSemPost(transmitter_lock);
 200048c:	e0bfff17 	ldw	r2,-4(fp)
 2000490:	11000217 	ldw	r4,8(r2)
 2000494:	200a4600 	call	200a460 <OSSemPost>
}
 2000498:	e037883a 	mov	sp,fp
 200049c:	dfc00117 	ldw	ra,4(sp)
 20004a0:	df000017 	ldw	fp,0(sp)
 20004a4:	dec00204 	addi	sp,sp,8
 20004a8:	f800283a 	ret

020004ac <_ZN20TransmitterInterface11moveForwardEv>:
}

/**
 * Send forward signal to transmitter.
 */
void TransmitterInterface::moveForward() {
 20004ac:	defffc04 	addi	sp,sp,-16
 20004b0:	dfc00315 	stw	ra,12(sp)
 20004b4:	df000215 	stw	fp,8(sp)
 20004b8:	df000204 	addi	fp,sp,8
 20004bc:	e13fff15 	stw	r4,-4(fp)
	int8_t oldReg = 0;
 20004c0:	e03ffe45 	stb	zero,-7(fp)
	int8_t newReg = 0;
 20004c4:	e03ffe05 	stb	zero,-8(fp)
	
	 OSSemPend(transmitter_lock,0,&err);
 20004c8:	e0bfff17 	ldw	r2,-4(fp)
 20004cc:	11000217 	ldw	r4,8(r2)
 20004d0:	e0bfff17 	ldw	r2,-4(fp)
 20004d4:	11800304 	addi	r6,r2,12
 20004d8:	000b883a 	mov	r5,zero
 20004dc:	200a0680 	call	200a068 <OSSemPend>
	//Read current status of the register
	oldReg = IORD_ALTERA_AVALON_PIO_DATA(baseAddress);
 20004e0:	e0bfff17 	ldw	r2,-4(fp)
 20004e4:	10800117 	ldw	r2,4(r2)
 20004e8:	10800037 	ldwio	r2,0(r2)
 20004ec:	e0bffe45 	stb	r2,-7(fp)
	
	//Create new valid movement command with out changing the turning property
	newReg = validateMove(oldReg,FORWARD_CMD);
 20004f0:	e17ffe47 	ldb	r5,-7(fp)
 20004f4:	e13fff17 	ldw	r4,-4(fp)
 20004f8:	01800204 	movi	r6,8
 20004fc:	20002500 	call	2000250 <_ZN20TransmitterInterface12validateMoveEaa>
 2000500:	e0bffe05 	stb	r2,-8(fp)
	
	//Write the new command to the register
	IOWR_ALTERA_AVALON_PIO_DATA(baseAddress, newReg);
 2000504:	e0bfff17 	ldw	r2,-4(fp)
 2000508:	10800117 	ldw	r2,4(r2)
 200050c:	e0fffe07 	ldb	r3,-8(fp)
 2000510:	10c00035 	stwio	r3,0(r2)
    OSSemPost(transmitter_lock);
 2000514:	e0bfff17 	ldw	r2,-4(fp)
 2000518:	11000217 	ldw	r4,8(r2)
 200051c:	200a4600 	call	200a460 <OSSemPost>
}
 2000520:	e037883a 	mov	sp,fp
 2000524:	dfc00117 	ldw	ra,4(sp)
 2000528:	df000017 	ldw	fp,0(sp)
 200052c:	dec00204 	addi	sp,sp,8
 2000530:	f800283a 	ret

02000534 <_ZN20TransmitterInterface8turnLeftEv>:
}

/*
 * Send turn left signal to transmitter.
 */
void TransmitterInterface::turnLeft() {
 2000534:	defffc04 	addi	sp,sp,-16
 2000538:	dfc00315 	stw	ra,12(sp)
 200053c:	df000215 	stw	fp,8(sp)
 2000540:	df000204 	addi	fp,sp,8
 2000544:	e13fff15 	stw	r4,-4(fp)
	int8_t oldReg = 0;
 2000548:	e03ffe45 	stb	zero,-7(fp)
	int8_t newReg = 0;
 200054c:	e03ffe05 	stb	zero,-8(fp)
	
    OSSemPend(transmitter_lock,0,&err);
 2000550:	e0bfff17 	ldw	r2,-4(fp)
 2000554:	11000217 	ldw	r4,8(r2)
 2000558:	e0bfff17 	ldw	r2,-4(fp)
 200055c:	11800304 	addi	r6,r2,12
 2000560:	000b883a 	mov	r5,zero
 2000564:	200a0680 	call	200a068 <OSSemPend>
	//Read current status of the register
	oldReg = IORD_ALTERA_AVALON_PIO_DATA(baseAddress);
 2000568:	e0bfff17 	ldw	r2,-4(fp)
 200056c:	10800117 	ldw	r2,4(r2)
 2000570:	10800037 	ldwio	r2,0(r2)
 2000574:	e0bffe45 	stb	r2,-7(fp)
	
	//Create new valid turn command with out changing the other movement
	newReg = validateTurn(oldReg,LEFT_CMD);
 2000578:	e17ffe47 	ldb	r5,-7(fp)
 200057c:	e13fff17 	ldw	r4,-4(fp)
 2000580:	01800084 	movi	r6,2
 2000584:	20002080 	call	2000208 <_ZN20TransmitterInterface12validateTurnEaa>
 2000588:	e0bffe05 	stb	r2,-8(fp)
	
	//Write the new command to the register
	IOWR_ALTERA_AVALON_PIO_DATA(baseAddress, newReg);
 200058c:	e0bfff17 	ldw	r2,-4(fp)
 2000590:	10800117 	ldw	r2,4(r2)
 2000594:	e0fffe07 	ldb	r3,-8(fp)
 2000598:	10c00035 	stwio	r3,0(r2)
    OSSemPost(transmitter_lock);
 200059c:	e0bfff17 	ldw	r2,-4(fp)
 20005a0:	11000217 	ldw	r4,8(r2)
 20005a4:	200a4600 	call	200a460 <OSSemPost>
}
 20005a8:	e037883a 	mov	sp,fp
 20005ac:	dfc00117 	ldw	ra,4(sp)
 20005b0:	df000017 	ldw	fp,0(sp)
 20005b4:	dec00204 	addi	sp,sp,8
 20005b8:	f800283a 	ret

020005bc <_ZN20TransmitterInterfaceD0Ev>:
}

/*
 * Destructor for the transmitterInterface object.
 */
TransmitterInterface::~TransmitterInterface() {
 20005bc:	defffd04 	addi	sp,sp,-12
 20005c0:	dfc00215 	stw	ra,8(sp)
 20005c4:	df000115 	stw	fp,4(sp)
 20005c8:	df000104 	addi	fp,sp,4
 20005cc:	e13fff15 	stw	r4,-4(fp)
 20005d0:	00c08074 	movhi	r3,513
 20005d4:	18c11704 	addi	r3,r3,1116
 20005d8:	e0bfff17 	ldw	r2,-4(fp)
 20005dc:	10c00015 	stw	r3,0(r2)
	// TODO Auto-generated destructor stub
}
 20005e0:	00800044 	movi	r2,1
 20005e4:	10803fcc 	andi	r2,r2,255
 20005e8:	1005003a 	cmpeq	r2,r2,zero
 20005ec:	1000021e 	bne	r2,zero,20005f8 <_ZN20TransmitterInterfaceD0Ev+0x3c>
 20005f0:	e13fff17 	ldw	r4,-4(fp)
 20005f4:	2000b880 	call	2000b88 <_ZdlPv>
 20005f8:	e037883a 	mov	sp,fp
 20005fc:	dfc00117 	ldw	ra,4(sp)
 2000600:	df000017 	ldw	fp,0(sp)
 2000604:	dec00204 	addi	sp,sp,8
 2000608:	f800283a 	ret

0200060c <_ZN20TransmitterInterfaceD1Ev>:
}

/*
 * Destructor for the transmitterInterface object.
 */
TransmitterInterface::~TransmitterInterface() {
 200060c:	defffd04 	addi	sp,sp,-12
 2000610:	dfc00215 	stw	ra,8(sp)
 2000614:	df000115 	stw	fp,4(sp)
 2000618:	df000104 	addi	fp,sp,4
 200061c:	e13fff15 	stw	r4,-4(fp)
 2000620:	00c08074 	movhi	r3,513
 2000624:	18c11704 	addi	r3,r3,1116
 2000628:	e0bfff17 	ldw	r2,-4(fp)
 200062c:	10c00015 	stw	r3,0(r2)
	// TODO Auto-generated destructor stub
}
 2000630:	0005883a 	mov	r2,zero
 2000634:	10803fcc 	andi	r2,r2,255
 2000638:	1005003a 	cmpeq	r2,r2,zero
 200063c:	1000021e 	bne	r2,zero,2000648 <_ZN20TransmitterInterfaceD1Ev+0x3c>
 2000640:	e13fff17 	ldw	r4,-4(fp)
 2000644:	2000b880 	call	2000b88 <_ZdlPv>
 2000648:	e037883a 	mov	sp,fp
 200064c:	dfc00117 	ldw	ra,4(sp)
 2000650:	df000017 	ldw	fp,0(sp)
 2000654:	dec00204 	addi	sp,sp,8
 2000658:	f800283a 	ret

0200065c <_ZN20TransmitterInterfaceD2Ev>:
}

/*
 * Destructor for the transmitterInterface object.
 */
TransmitterInterface::~TransmitterInterface() {
 200065c:	defffd04 	addi	sp,sp,-12
 2000660:	dfc00215 	stw	ra,8(sp)
 2000664:	df000115 	stw	fp,4(sp)
 2000668:	df000104 	addi	fp,sp,4
 200066c:	e13fff15 	stw	r4,-4(fp)
 2000670:	00c08074 	movhi	r3,513
 2000674:	18c11704 	addi	r3,r3,1116
 2000678:	e0bfff17 	ldw	r2,-4(fp)
 200067c:	10c00015 	stw	r3,0(r2)
	// TODO Auto-generated destructor stub
}
 2000680:	0005883a 	mov	r2,zero
 2000684:	10803fcc 	andi	r2,r2,255
 2000688:	1005003a 	cmpeq	r2,r2,zero
 200068c:	1000021e 	bne	r2,zero,2000698 <_ZN20TransmitterInterfaceD2Ev+0x3c>
 2000690:	e13fff17 	ldw	r4,-4(fp)
 2000694:	2000b880 	call	2000b88 <_ZdlPv>
 2000698:	e037883a 	mov	sp,fp
 200069c:	dfc00117 	ldw	ra,4(sp)
 20006a0:	df000017 	ldw	fp,0(sp)
 20006a4:	dec00204 	addi	sp,sp,8
 20006a8:	f800283a 	ret

020006ac <_ZN20TransmitterInterfaceC1EPv>:
/*
 * Transmitter interface object constructor. Takes four base address
 * for GPIO pins that are connected to a transmitter.
 * TODO correct the Base address names and types
 */
TransmitterInterface::TransmitterInterface(Addr baseAddr) {
 20006ac:	defffc04 	addi	sp,sp,-16
 20006b0:	dfc00315 	stw	ra,12(sp)
 20006b4:	df000215 	stw	fp,8(sp)
 20006b8:	df000204 	addi	fp,sp,8
 20006bc:	e13ffe15 	stw	r4,-8(fp)
 20006c0:	e17fff15 	stw	r5,-4(fp)
 20006c4:	00c08074 	movhi	r3,513
 20006c8:	18c11704 	addi	r3,r3,1116
 20006cc:	e0bffe17 	ldw	r2,-8(fp)
 20006d0:	10c00015 	stw	r3,0(r2)
	
	baseAddress = baseAddr;
 20006d4:	e0fffe17 	ldw	r3,-8(fp)
 20006d8:	e0bfff17 	ldw	r2,-4(fp)
 20006dc:	18800115 	stw	r2,4(r3)
    transmitter_lock =  OSSemCreate(1);
 20006e0:	01000044 	movi	r4,1
 20006e4:	2009cb40 	call	2009cb4 <OSSemCreate>
 20006e8:	1007883a 	mov	r3,r2
 20006ec:	e0bffe17 	ldw	r2,-8(fp)
 20006f0:	10c00215 	stw	r3,8(r2)
}
 20006f4:	e037883a 	mov	sp,fp
 20006f8:	dfc00117 	ldw	ra,4(sp)
 20006fc:	df000017 	ldw	fp,0(sp)
 2000700:	dec00204 	addi	sp,sp,8
 2000704:	f800283a 	ret

02000708 <_ZN20TransmitterInterfaceC2EPv>:
/*
 * Transmitter interface object constructor. Takes four base address
 * for GPIO pins that are connected to a transmitter.
 * TODO correct the Base address names and types
 */
TransmitterInterface::TransmitterInterface(Addr baseAddr) {
 2000708:	defffc04 	addi	sp,sp,-16
 200070c:	dfc00315 	stw	ra,12(sp)
 2000710:	df000215 	stw	fp,8(sp)
 2000714:	df000204 	addi	fp,sp,8
 2000718:	e13ffe15 	stw	r4,-8(fp)
 200071c:	e17fff15 	stw	r5,-4(fp)
 2000720:	00c08074 	movhi	r3,513
 2000724:	18c11704 	addi	r3,r3,1116
 2000728:	e0bffe17 	ldw	r2,-8(fp)
 200072c:	10c00015 	stw	r3,0(r2)
	
	baseAddress = baseAddr;
 2000730:	e0fffe17 	ldw	r3,-8(fp)
 2000734:	e0bfff17 	ldw	r2,-4(fp)
 2000738:	18800115 	stw	r2,4(r3)
    transmitter_lock =  OSSemCreate(1);
 200073c:	01000044 	movi	r4,1
 2000740:	2009cb40 	call	2009cb4 <OSSemCreate>
 2000744:	1007883a 	mov	r3,r2
 2000748:	e0bffe17 	ldw	r2,-8(fp)
 200074c:	10c00215 	stw	r3,8(r2)
}
 2000750:	e037883a 	mov	sp,fp
 2000754:	dfc00117 	ldw	ra,4(sp)
 2000758:	df000017 	ldw	fp,0(sp)
 200075c:	dec00204 	addi	sp,sp,8
 2000760:	f800283a 	ret

02000764 <_Z41__static_initialization_and_destruction_0ii>:
              
               

  OSStart();
  return 0;
}
 2000764:	defffc04 	addi	sp,sp,-16
 2000768:	dfc00315 	stw	ra,12(sp)
 200076c:	df000215 	stw	fp,8(sp)
 2000770:	df000204 	addi	fp,sp,8
 2000774:	e13ffe15 	stw	r4,-8(fp)
 2000778:	e17fff15 	stw	r5,-4(fp)
 200077c:	e0bffe17 	ldw	r2,-8(fp)
 2000780:	10800058 	cmpnei	r2,r2,1
 2000784:	1000081e 	bne	r2,zero,20007a8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 2000788:	e0ffff17 	ldw	r3,-4(fp)
 200078c:	00bfffd4 	movui	r2,65535
 2000790:	1880051e 	bne	r3,r2,20007a8 <_Z41__static_initialization_and_destruction_0ii+0x44>

/* Definition of Task Priorities */

#define TASK1_PRIORITY      1

TransmitterInterface transmit((void*)TRANSMITTER_BASE);
 2000794:	01008074 	movhi	r4,513
 2000798:	2117e104 	addi	r4,r4,24452
 200079c:	01410034 	movhi	r5,1024
 20007a0:	29461004 	addi	r5,r5,6208
 20007a4:	20006ac0 	call	20006ac <_ZN20TransmitterInterfaceC1EPv>
 20007a8:	e0bffe17 	ldw	r2,-8(fp)
 20007ac:	1004c03a 	cmpne	r2,r2,zero
 20007b0:	1000061e 	bne	r2,zero,20007cc <_Z41__static_initialization_and_destruction_0ii+0x68>
 20007b4:	e0ffff17 	ldw	r3,-4(fp)
 20007b8:	00bfffd4 	movui	r2,65535
 20007bc:	1880031e 	bne	r3,r2,20007cc <_Z41__static_initialization_and_destruction_0ii+0x68>
 20007c0:	01008074 	movhi	r4,513
 20007c4:	2117e104 	addi	r4,r4,24452
 20007c8:	200060c0 	call	200060c <_ZN20TransmitterInterfaceD1Ev>
              
               

  OSStart();
  return 0;
}
 20007cc:	e037883a 	mov	sp,fp
 20007d0:	dfc00117 	ldw	ra,4(sp)
 20007d4:	df000017 	ldw	fp,0(sp)
 20007d8:	dec00204 	addi	sp,sp,8
 20007dc:	f800283a 	ret

020007e0 <_GLOBAL__D_task1_stk>:

//The MIT License (MIT)
 20007e0:	defffe04 	addi	sp,sp,-8
 20007e4:	dfc00115 	stw	ra,4(sp)
 20007e8:	df000015 	stw	fp,0(sp)
 20007ec:	d839883a 	mov	fp,sp
 20007f0:	0009883a 	mov	r4,zero
 20007f4:	017fffd4 	movui	r5,65535
 20007f8:	20007640 	call	2000764 <_Z41__static_initialization_and_destruction_0ii>
 20007fc:	e037883a 	mov	sp,fp
 2000800:	dfc00117 	ldw	ra,4(sp)
 2000804:	df000017 	ldw	fp,0(sp)
 2000808:	dec00204 	addi	sp,sp,8
 200080c:	f800283a 	ret

02000810 <_GLOBAL__I_task1_stk>:
               

  OSStart();
  return 0;
}

 2000810:	defffe04 	addi	sp,sp,-8
 2000814:	dfc00115 	stw	ra,4(sp)
 2000818:	df000015 	stw	fp,0(sp)
 200081c:	d839883a 	mov	fp,sp
 2000820:	01000044 	movi	r4,1
 2000824:	017fffd4 	movui	r5,65535
 2000828:	20007640 	call	2000764 <_Z41__static_initialization_and_destruction_0ii>
 200082c:	e037883a 	mov	sp,fp
 2000830:	dfc00117 	ldw	ra,4(sp)
 2000834:	df000017 	ldw	fp,0(sp)
 2000838:	dec00204 	addi	sp,sp,8
 200083c:	f800283a 	ret

02000840 <main>:

  }
}

/* The main function creates two task and starts multi-tasking */
int main(void)
 2000840:	defff904 	addi	sp,sp,-28
 2000844:	dfc00615 	stw	ra,24(sp)
 2000848:	df000515 	stw	fp,20(sp)
 200084c:	df000504 	addi	fp,sp,20
                  TASK1_PRIORITY,
                  TASK1_PRIORITY,
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
 2000850:	00800044 	movi	r2,1
 2000854:	d8800015 	stw	r2,0(sp)
 2000858:	00808074 	movhi	r2,513
 200085c:	108fe104 	addi	r2,r2,16260
 2000860:	d8800115 	stw	r2,4(sp)
 2000864:	00820004 	movi	r2,2048
 2000868:	d8800215 	stw	r2,8(sp)
 200086c:	d8000315 	stw	zero,12(sp)
 2000870:	d8000415 	stw	zero,16(sp)
 2000874:	01008034 	movhi	r4,512
 2000878:	21022b04 	addi	r4,r4,2220
 200087c:	000b883a 	mov	r5,zero
 2000880:	01808074 	movhi	r6,513
 2000884:	3197e004 	addi	r6,r6,24448
 2000888:	01c00044 	movi	r7,1
 200088c:	200af040 	call	200af04 <OSTaskCreateExt>
              
               

  OSStart();
 2000890:	20051300 	call	2005130 <OSStart>
  return 0;
 2000894:	0005883a 	mov	r2,zero
}
 2000898:	e037883a 	mov	sp,fp
 200089c:	dfc00117 	ldw	ra,4(sp)
 20008a0:	df000017 	ldw	fp,0(sp)
 20008a4:	dec00204 	addi	sp,sp,8
 20008a8:	f800283a 	ret

020008ac <_Z5task1Pv>:
#define TASK1_PRIORITY      1

TransmitterInterface transmit((void*)TRANSMITTER_BASE);

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
 20008ac:	defffd04 	addi	sp,sp,-12
 20008b0:	dfc00215 	stw	ra,8(sp)
 20008b4:	df000115 	stw	fp,4(sp)
 20008b8:	df000104 	addi	fp,sp,4
 20008bc:	e13fff15 	stw	r4,-4(fp)
{
  while (1)
  { 
	  printf("Move Forward\n");
 20008c0:	01008074 	movhi	r4,513
 20008c4:	21011f04 	addi	r4,r4,1148
 20008c8:	20015bc0 	call	20015bc <puts>
	  transmit.moveForward();
 20008cc:	01008074 	movhi	r4,513
 20008d0:	2117e104 	addi	r4,r4,24452
 20008d4:	20004ac0 	call	20004ac <_ZN20TransmitterInterface11moveForwardEv>
	  OSTimeDlyHMSM(0, 0, 3, 0);
 20008d8:	0009883a 	mov	r4,zero
 20008dc:	000b883a 	mov	r5,zero
 20008e0:	018000c4 	movi	r6,3
 20008e4:	000f883a 	mov	r7,zero
 20008e8:	200c3480 	call	200c348 <OSTimeDlyHMSM>

	  printf("Move Backward\n");
 20008ec:	01008074 	movhi	r4,513
 20008f0:	21012304 	addi	r4,r4,1164
 20008f4:	20015bc0 	call	20015bc <puts>
	  transmit.moveReverse();
 20008f8:	01008074 	movhi	r4,513
 20008fc:	2117e104 	addi	r4,r4,24452
 2000900:	20004240 	call	2000424 <_ZN20TransmitterInterface11moveReverseEv>
	  OSTimeDlyHMSM(0, 0, 3, 0);
 2000904:	0009883a 	mov	r4,zero
 2000908:	000b883a 	mov	r5,zero
 200090c:	018000c4 	movi	r6,3
 2000910:	000f883a 	mov	r7,zero
 2000914:	200c3480 	call	200c348 <OSTimeDlyHMSM>

	  printf("Stop move\n");
 2000918:	01008074 	movhi	r4,513
 200091c:	21012704 	addi	r4,r4,1180
 2000920:	20015bc0 	call	20015bc <puts>
	  transmit.moveOff();
 2000924:	01008074 	movhi	r4,513
 2000928:	2117e104 	addi	r4,r4,24452
 200092c:	20003140 	call	2000314 <_ZN20TransmitterInterface7moveOffEv>
	  OSTimeDlyHMSM(0, 0, 3, 0);
 2000930:	0009883a 	mov	r4,zero
 2000934:	000b883a 	mov	r5,zero
 2000938:	018000c4 	movi	r6,3
 200093c:	000f883a 	mov	r7,zero
 2000940:	200c3480 	call	200c348 <OSTimeDlyHMSM>

	  printf("Turn Left\n");
 2000944:	01008074 	movhi	r4,513
 2000948:	21012a04 	addi	r4,r4,1192
 200094c:	20015bc0 	call	20015bc <puts>
	  transmit.turnLeft();
 2000950:	01008074 	movhi	r4,513
 2000954:	2117e104 	addi	r4,r4,24452
 2000958:	20005340 	call	2000534 <_ZN20TransmitterInterface8turnLeftEv>
	  OSTimeDlyHMSM(0, 0, 3, 0);
 200095c:	0009883a 	mov	r4,zero
 2000960:	000b883a 	mov	r5,zero
 2000964:	018000c4 	movi	r6,3
 2000968:	000f883a 	mov	r7,zero
 200096c:	200c3480 	call	200c348 <OSTimeDlyHMSM>

	  printf("Turn Right\n");
 2000970:	01008074 	movhi	r4,513
 2000974:	21012d04 	addi	r4,r4,1204
 2000978:	20015bc0 	call	20015bc <puts>
	  transmit.turnRight();
 200097c:	01008074 	movhi	r4,513
 2000980:	2117e104 	addi	r4,r4,24452
 2000984:	20002980 	call	2000298 <_ZN20TransmitterInterface9turnRightEv>
	  OSTimeDlyHMSM(0, 0, 3, 0);
 2000988:	0009883a 	mov	r4,zero
 200098c:	000b883a 	mov	r5,zero
 2000990:	018000c4 	movi	r6,3
 2000994:	000f883a 	mov	r7,zero
 2000998:	200c3480 	call	200c348 <OSTimeDlyHMSM>

	  printf("Stop Turn\n");
 200099c:	01008074 	movhi	r4,513
 20009a0:	21013004 	addi	r4,r4,1216
 20009a4:	20015bc0 	call	20015bc <puts>
	  transmit.turnOff();
 20009a8:	01008074 	movhi	r4,513
 20009ac:	2117e104 	addi	r4,r4,24452
 20009b0:	200039c0 	call	200039c <_ZN20TransmitterInterface7turnOffEv>
	  OSTimeDlyHMSM(0, 0, 3, 0);
 20009b4:	0009883a 	mov	r4,zero
 20009b8:	000b883a 	mov	r5,zero
 20009bc:	018000c4 	movi	r6,3
 20009c0:	000f883a 	mov	r7,zero
 20009c4:	200c3480 	call	200c348 <OSTimeDlyHMSM>
TransmitterInterface transmit((void*)TRANSMITTER_BASE);

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
  while (1)
 20009c8:	003fbd06 	br	20008c0 <_Z5task1Pv+0x14>

020009cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 20009cc:	20c00017 	ldw	r3,0(r4)
 20009d0:	defffa04 	addi	sp,sp,-24
 20009d4:	dc000415 	stw	r16,16(sp)
 20009d8:	1a000617 	ldw	r8,24(r3)
 20009dc:	3021883a 	mov	r16,r6
 20009e0:	31800017 	ldw	r6,0(r6)
 20009e4:	00800404 	movi	r2,16
 20009e8:	dfc00515 	stw	ra,20(sp)
 20009ec:	d8800215 	stw	r2,8(sp)
 20009f0:	d8000015 	stw	zero,0(sp)
 20009f4:	d8000115 	stw	zero,4(sp)
 20009f8:	d8000315 	stw	zero,12(sp)
 20009fc:	d80f883a 	mov	r7,sp
 2000a00:	403ee83a 	callr	r8
 2000a04:	d8800117 	ldw	r2,4(sp)
 2000a08:	00c00184 	movi	r3,6
 2000a0c:	0009883a 	mov	r4,zero
 2000a10:	1080018c 	andi	r2,r2,6
 2000a14:	10c0031e 	bne	r2,r3,2000a24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
 2000a18:	d8800017 	ldw	r2,0(sp)
 2000a1c:	01000044 	movi	r4,1
 2000a20:	80800015 	stw	r2,0(r16)
 2000a24:	2005883a 	mov	r2,r4
 2000a28:	dfc00517 	ldw	ra,20(sp)
 2000a2c:	dc000417 	ldw	r16,16(sp)
 2000a30:	dec00604 	addi	sp,sp,24
 2000a34:	f800283a 	ret

02000a38 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
 2000a38:	d8800017 	ldw	r2,0(sp)
 2000a3c:	00c00184 	movi	r3,6
 2000a40:	1180021e 	bne	r2,r6,2000a4c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
 2000a44:	1805883a 	mov	r2,r3
 2000a48:	f800283a 	ret
 2000a4c:	00c00044 	movi	r3,1
 2000a50:	1805883a 	mov	r2,r3
 2000a54:	f800283a 	ret

02000a58 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 2000a58:	defffe04 	addi	sp,sp,-8
 2000a5c:	00808074 	movhi	r2,513
 2000a60:	10813504 	addi	r2,r2,1236
 2000a64:	dc400015 	stw	r17,0(sp)
 2000a68:	20800015 	stw	r2,0(r4)
 2000a6c:	2023883a 	mov	r17,r4
 2000a70:	dfc00115 	stw	ra,4(sp)
 2000a74:	2000da40 	call	2000da4 <_ZNSt9type_infoD2Ev>
 2000a78:	8809883a 	mov	r4,r17
 2000a7c:	dfc00117 	ldw	ra,4(sp)
 2000a80:	dc400017 	ldw	r17,0(sp)
 2000a84:	dec00204 	addi	sp,sp,8
 2000a88:	2000b881 	jmpi	2000b88 <_ZdlPv>

02000a8c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 2000a8c:	00808074 	movhi	r2,513
 2000a90:	10813504 	addi	r2,r2,1236
 2000a94:	20800015 	stw	r2,0(r4)
 2000a98:	2000da41 	jmpi	2000da4 <_ZNSt9type_infoD2Ev>

02000a9c <_ZN10__cxxabiv117__class_type_infoD2Ev>:
 2000a9c:	00808074 	movhi	r2,513
 2000aa0:	10813504 	addi	r2,r2,1236
 2000aa4:	20800015 	stw	r2,0(r4)
 2000aa8:	2000da41 	jmpi	2000da4 <_ZNSt9type_infoD2Ev>

02000aac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 2000aac:	2811883a 	mov	r8,r5
 2000ab0:	20c00117 	ldw	r3,4(r4)
 2000ab4:	40800117 	ldw	r2,4(r8)
 2000ab8:	deffff04 	addi	sp,sp,-4
 2000abc:	dfc00015 	stw	ra,0(sp)
 2000ac0:	200b883a 	mov	r5,r4
 2000ac4:	02400044 	movi	r9,1
 2000ac8:	18800426 	beq	r3,r2,2000adc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
 2000acc:	008000c4 	movi	r2,3
 2000ad0:	4009883a 	mov	r4,r8
 2000ad4:	0013883a 	mov	r9,zero
 2000ad8:	11c0042e 	bgeu	r2,r7,2000aec <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
 2000adc:	4805883a 	mov	r2,r9
 2000ae0:	dfc00017 	ldw	ra,0(sp)
 2000ae4:	dec00104 	addi	sp,sp,4
 2000ae8:	f800283a 	ret
 2000aec:	40800017 	ldw	r2,0(r8)
 2000af0:	10c00517 	ldw	r3,20(r2)
 2000af4:	183ee83a 	callr	r3
 2000af8:	12403fcc 	andi	r9,r2,255
 2000afc:	4805883a 	mov	r2,r9
 2000b00:	dfc00017 	ldw	ra,0(sp)
 2000b04:	dec00104 	addi	sp,sp,4
 2000b08:	f800283a 	ret

02000b0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 2000b0c:	20c00117 	ldw	r3,4(r4)
 2000b10:	28800117 	ldw	r2,4(r5)
 2000b14:	0009883a 	mov	r4,zero
 2000b18:	1880061e 	bne	r3,r2,2000b34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
 2000b1c:	00800184 	movi	r2,6
 2000b20:	38800115 	stw	r2,4(r7)
 2000b24:	00800204 	movi	r2,8
 2000b28:	39800015 	stw	r6,0(r7)
 2000b2c:	38800315 	stw	r2,12(r7)
 2000b30:	01000044 	movi	r4,1
 2000b34:	2005883a 	mov	r2,r4
 2000b38:	f800283a 	ret

02000b3c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 2000b3c:	da000017 	ldw	r8,0(sp)
 2000b40:	d8800217 	ldw	r2,8(sp)
 2000b44:	d9400317 	ldw	r5,12(sp)
 2000b48:	40800926 	beq	r8,r2,2000b70 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 2000b4c:	21000117 	ldw	r4,4(r4)
 2000b50:	38800117 	ldw	r2,4(r7)
 2000b54:	2080041e 	bne	r4,r2,2000b68 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
 2000b58:	00800044 	movi	r2,1
 2000b5c:	28800315 	stw	r2,12(r5)
 2000b60:	2a000015 	stw	r8,0(r5)
 2000b64:	29800115 	stw	r6,4(r5)
 2000b68:	0005883a 	mov	r2,zero
 2000b6c:	f800283a 	ret
 2000b70:	d8800117 	ldw	r2,4(sp)
 2000b74:	21000117 	ldw	r4,4(r4)
 2000b78:	10c00117 	ldw	r3,4(r2)
 2000b7c:	20fff41e 	bne	r4,r3,2000b50 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 2000b80:	29800215 	stw	r6,8(r5)
 2000b84:	003ff806 	br	2000b68 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

02000b88 <_ZdlPv>:
 2000b88:	20000126 	beq	r4,zero,2000b90 <_ZdlPv+0x8>
 2000b8c:	2000db41 	jmpi	2000db4 <free>
 2000b90:	f800283a 	ret

02000b94 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 2000b94:	defffb04 	addi	sp,sp,-20
 2000b98:	dd400315 	stw	r21,12(sp)
 2000b9c:	dcc00215 	stw	r19,8(sp)
 2000ba0:	dc400115 	stw	r17,4(sp)
 2000ba4:	dc000015 	stw	r16,0(sp)
 2000ba8:	2823883a 	mov	r17,r5
 2000bac:	3027883a 	mov	r19,r6
 2000bb0:	382b883a 	mov	r21,r7
 2000bb4:	dfc00415 	stw	ra,16(sp)
 2000bb8:	2021883a 	mov	r16,r4
 2000bbc:	2000b0c0 	call	2000b0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 2000bc0:	10803fcc 	andi	r2,r2,255
 2000bc4:	880b883a 	mov	r5,r17
 2000bc8:	980d883a 	mov	r6,r19
 2000bcc:	a80f883a 	mov	r7,r21
 2000bd0:	00c00044 	movi	r3,1
 2000bd4:	1000051e 	bne	r2,zero,2000bec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 2000bd8:	81000217 	ldw	r4,8(r16)
 2000bdc:	20800017 	ldw	r2,0(r4)
 2000be0:	10c00617 	ldw	r3,24(r2)
 2000be4:	183ee83a 	callr	r3
 2000be8:	10c03fcc 	andi	r3,r2,255
 2000bec:	1805883a 	mov	r2,r3
 2000bf0:	dfc00417 	ldw	ra,16(sp)
 2000bf4:	dd400317 	ldw	r21,12(sp)
 2000bf8:	dcc00217 	ldw	r19,8(sp)
 2000bfc:	dc400117 	ldw	r17,4(sp)
 2000c00:	dc000017 	ldw	r16,0(sp)
 2000c04:	dec00504 	addi	sp,sp,20
 2000c08:	f800283a 	ret

02000c0c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 2000c0c:	defffe04 	addi	sp,sp,-8
 2000c10:	00808074 	movhi	r2,513
 2000c14:	10814c04 	addi	r2,r2,1328
 2000c18:	dc400015 	stw	r17,0(sp)
 2000c1c:	20800015 	stw	r2,0(r4)
 2000c20:	2023883a 	mov	r17,r4
 2000c24:	dfc00115 	stw	ra,4(sp)
 2000c28:	2000a9c0 	call	2000a9c <_ZN10__cxxabiv117__class_type_infoD2Ev>
 2000c2c:	8809883a 	mov	r4,r17
 2000c30:	dfc00117 	ldw	ra,4(sp)
 2000c34:	dc400017 	ldw	r17,0(sp)
 2000c38:	dec00204 	addi	sp,sp,8
 2000c3c:	2000b881 	jmpi	2000b88 <_ZdlPv>

02000c40 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 2000c40:	00808074 	movhi	r2,513
 2000c44:	10814c04 	addi	r2,r2,1328
 2000c48:	20800015 	stw	r2,0(r4)
 2000c4c:	2000a9c1 	jmpi	2000a9c <_ZN10__cxxabiv117__class_type_infoD2Ev>

02000c50 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
 2000c50:	00808074 	movhi	r2,513
 2000c54:	10814c04 	addi	r2,r2,1328
 2000c58:	20800015 	stw	r2,0(r4)
 2000c5c:	2000a9c1 	jmpi	2000a9c <_ZN10__cxxabiv117__class_type_infoD2Ev>

02000c60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
 2000c60:	da400017 	ldw	r9,0(sp)
 2000c64:	2011883a 	mov	r8,r4
 2000c68:	49800526 	beq	r9,r6,2000c80 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
 2000c6c:	41000217 	ldw	r4,8(r8)
 2000c70:	20800017 	ldw	r2,0(r4)
 2000c74:	da400015 	stw	r9,0(sp)
 2000c78:	10c00817 	ldw	r3,32(r2)
 2000c7c:	1800683a 	jmp	r3
 2000c80:	39000117 	ldw	r4,4(r7)
 2000c84:	40c00117 	ldw	r3,4(r8)
 2000c88:	00800184 	movi	r2,6
 2000c8c:	193ff71e 	bne	r3,r4,2000c6c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
 2000c90:	f800283a 	ret

02000c94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 2000c94:	20c00117 	ldw	r3,4(r4)
 2000c98:	38800117 	ldw	r2,4(r7)
 2000c9c:	defffb04 	addi	sp,sp,-20
 2000ca0:	dfc00415 	stw	ra,16(sp)
 2000ca4:	da000517 	ldw	r8,20(sp)
 2000ca8:	dac00617 	ldw	r11,24(sp)
 2000cac:	da400717 	ldw	r9,28(sp)
 2000cb0:	da800817 	ldw	r10,32(sp)
 2000cb4:	18800c1e 	bne	r3,r2,2000ce8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 2000cb8:	51800115 	stw	r6,4(r10)
 2000cbc:	52000015 	stw	r8,0(r10)
 2000cc0:	28001c16 	blt	r5,zero,2000d34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
 2000cc4:	4145883a 	add	r2,r8,r5
 2000cc8:	48801e26 	beq	r9,r2,2000d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 2000ccc:	00800044 	movi	r2,1
 2000cd0:	0007883a 	mov	r3,zero
 2000cd4:	50800315 	stw	r2,12(r10)
 2000cd8:	1805883a 	mov	r2,r3
 2000cdc:	dfc00417 	ldw	ra,16(sp)
 2000ce0:	dec00504 	addi	sp,sp,20
 2000ce4:	f800283a 	ret
 2000ce8:	42400d26 	beq	r8,r9,2000d20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 2000cec:	21000217 	ldw	r4,8(r4)
 2000cf0:	20800017 	ldw	r2,0(r4)
 2000cf4:	da000015 	stw	r8,0(sp)
 2000cf8:	dac00115 	stw	r11,4(sp)
 2000cfc:	da400215 	stw	r9,8(sp)
 2000d00:	da800315 	stw	r10,12(sp)
 2000d04:	10c00717 	ldw	r3,28(r2)
 2000d08:	183ee83a 	callr	r3
 2000d0c:	10c03fcc 	andi	r3,r2,255
 2000d10:	1805883a 	mov	r2,r3
 2000d14:	dfc00417 	ldw	ra,16(sp)
 2000d18:	dec00504 	addi	sp,sp,20
 2000d1c:	f800283a 	ret
 2000d20:	58800117 	ldw	r2,4(r11)
 2000d24:	18bff11e 	bne	r3,r2,2000cec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 2000d28:	0007883a 	mov	r3,zero
 2000d2c:	51800215 	stw	r6,8(r10)
 2000d30:	003fe906 	br	2000cd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 2000d34:	00bfff84 	movi	r2,-2
 2000d38:	28800426 	beq	r5,r2,2000d4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 2000d3c:	0007883a 	mov	r3,zero
 2000d40:	003fe506 	br	2000cd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 2000d44:	00800184 	movi	r2,6
 2000d48:	003fe106 	br	2000cd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 2000d4c:	00800044 	movi	r2,1
 2000d50:	0007883a 	mov	r3,zero
 2000d54:	50800315 	stw	r2,12(r10)
 2000d58:	003fdf06 	br	2000cd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

02000d5c <_ZNKSt9type_info14__is_pointer_pEv>:
 2000d5c:	0005883a 	mov	r2,zero
 2000d60:	f800283a 	ret

02000d64 <_ZNKSt9type_info15__is_function_pEv>:
 2000d64:	0005883a 	mov	r2,zero
 2000d68:	f800283a 	ret

02000d6c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 2000d6c:	20c00117 	ldw	r3,4(r4)
 2000d70:	28800117 	ldw	r2,4(r5)
 2000d74:	1885003a 	cmpeq	r2,r3,r2
 2000d78:	f800283a 	ret

02000d7c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 2000d7c:	0005883a 	mov	r2,zero
 2000d80:	f800283a 	ret

02000d84 <_ZNSt9type_infoD0Ev>:
 2000d84:	00808074 	movhi	r2,513
 2000d88:	10816404 	addi	r2,r2,1424
 2000d8c:	20800015 	stw	r2,0(r4)
 2000d90:	2000b881 	jmpi	2000b88 <_ZdlPv>

02000d94 <_ZNSt9type_infoD1Ev>:
 2000d94:	00808074 	movhi	r2,513
 2000d98:	10816404 	addi	r2,r2,1424
 2000d9c:	20800015 	stw	r2,0(r4)
 2000da0:	f800283a 	ret

02000da4 <_ZNSt9type_infoD2Ev>:
 2000da4:	00808074 	movhi	r2,513
 2000da8:	10816404 	addi	r2,r2,1424
 2000dac:	20800015 	stw	r2,0(r4)
 2000db0:	f800283a 	ret

02000db4 <free>:
 2000db4:	00808074 	movhi	r2,513
 2000db8:	10889a04 	addi	r2,r2,8808
 2000dbc:	200b883a 	mov	r5,r4
 2000dc0:	11000017 	ldw	r4,0(r2)
 2000dc4:	20017e01 	jmpi	20017e0 <_free_r>

02000dc8 <malloc>:
 2000dc8:	00808074 	movhi	r2,513
 2000dcc:	10889a04 	addi	r2,r2,8808
 2000dd0:	200b883a 	mov	r5,r4
 2000dd4:	11000017 	ldw	r4,0(r2)
 2000dd8:	2000ddc1 	jmpi	2000ddc <_malloc_r>

02000ddc <_malloc_r>:
 2000ddc:	defff604 	addi	sp,sp,-40
 2000de0:	28c002c4 	addi	r3,r5,11
 2000de4:	00800584 	movi	r2,22
 2000de8:	dc800215 	stw	r18,8(sp)
 2000dec:	dfc00915 	stw	ra,36(sp)
 2000df0:	df000815 	stw	fp,32(sp)
 2000df4:	ddc00715 	stw	r23,28(sp)
 2000df8:	dd800615 	stw	r22,24(sp)
 2000dfc:	dd400515 	stw	r21,20(sp)
 2000e00:	dd000415 	stw	r20,16(sp)
 2000e04:	dcc00315 	stw	r19,12(sp)
 2000e08:	dc400115 	stw	r17,4(sp)
 2000e0c:	dc000015 	stw	r16,0(sp)
 2000e10:	2025883a 	mov	r18,r4
 2000e14:	10c01236 	bltu	r2,r3,2000e60 <_malloc_r+0x84>
 2000e18:	04400404 	movi	r17,16
 2000e1c:	8940142e 	bgeu	r17,r5,2000e70 <_malloc_r+0x94>
 2000e20:	00800304 	movi	r2,12
 2000e24:	0007883a 	mov	r3,zero
 2000e28:	90800015 	stw	r2,0(r18)
 2000e2c:	1805883a 	mov	r2,r3
 2000e30:	dfc00917 	ldw	ra,36(sp)
 2000e34:	df000817 	ldw	fp,32(sp)
 2000e38:	ddc00717 	ldw	r23,28(sp)
 2000e3c:	dd800617 	ldw	r22,24(sp)
 2000e40:	dd400517 	ldw	r21,20(sp)
 2000e44:	dd000417 	ldw	r20,16(sp)
 2000e48:	dcc00317 	ldw	r19,12(sp)
 2000e4c:	dc800217 	ldw	r18,8(sp)
 2000e50:	dc400117 	ldw	r17,4(sp)
 2000e54:	dc000017 	ldw	r16,0(sp)
 2000e58:	dec00a04 	addi	sp,sp,40
 2000e5c:	f800283a 	ret
 2000e60:	00bffe04 	movi	r2,-8
 2000e64:	18a2703a 	and	r17,r3,r2
 2000e68:	883fed16 	blt	r17,zero,2000e20 <_malloc_r+0x44>
 2000e6c:	897fec36 	bltu	r17,r5,2000e20 <_malloc_r+0x44>
 2000e70:	9009883a 	mov	r4,r18
 2000e74:	20042f00 	call	20042f0 <__malloc_lock>
 2000e78:	00807dc4 	movi	r2,503
 2000e7c:	14402b2e 	bgeu	r2,r17,2000f2c <_malloc_r+0x150>
 2000e80:	8806d27a 	srli	r3,r17,9
 2000e84:	18003f1e 	bne	r3,zero,2000f84 <_malloc_r+0x1a8>
 2000e88:	880cd0fa 	srli	r6,r17,3
 2000e8c:	300490fa 	slli	r2,r6,3
 2000e90:	02c08074 	movhi	r11,513
 2000e94:	5ac1d004 	addi	r11,r11,1856
 2000e98:	12cb883a 	add	r5,r2,r11
 2000e9c:	2c000317 	ldw	r16,12(r5)
 2000ea0:	580f883a 	mov	r7,r11
 2000ea4:	2c00041e 	bne	r5,r16,2000eb8 <_malloc_r+0xdc>
 2000ea8:	00000a06 	br	2000ed4 <_malloc_r+0xf8>
 2000eac:	1800860e 	bge	r3,zero,20010c8 <_malloc_r+0x2ec>
 2000eb0:	84000317 	ldw	r16,12(r16)
 2000eb4:	2c000726 	beq	r5,r16,2000ed4 <_malloc_r+0xf8>
 2000eb8:	80800117 	ldw	r2,4(r16)
 2000ebc:	00ffff04 	movi	r3,-4
 2000ec0:	10c8703a 	and	r4,r2,r3
 2000ec4:	2447c83a 	sub	r3,r4,r17
 2000ec8:	008003c4 	movi	r2,15
 2000ecc:	10fff70e 	bge	r2,r3,2000eac <_malloc_r+0xd0>
 2000ed0:	31bfffc4 	addi	r6,r6,-1
 2000ed4:	32400044 	addi	r9,r6,1
 2000ed8:	02808074 	movhi	r10,513
 2000edc:	5281d204 	addi	r10,r10,1864
 2000ee0:	54000217 	ldw	r16,8(r10)
 2000ee4:	8280a026 	beq	r16,r10,2001168 <_malloc_r+0x38c>
 2000ee8:	80800117 	ldw	r2,4(r16)
 2000eec:	00ffff04 	movi	r3,-4
 2000ef0:	10ca703a 	and	r5,r2,r3
 2000ef4:	2c4dc83a 	sub	r6,r5,r17
 2000ef8:	008003c4 	movi	r2,15
 2000efc:	11808316 	blt	r2,r6,200110c <_malloc_r+0x330>
 2000f00:	52800315 	stw	r10,12(r10)
 2000f04:	52800215 	stw	r10,8(r10)
 2000f08:	30002916 	blt	r6,zero,2000fb0 <_malloc_r+0x1d4>
 2000f0c:	8147883a 	add	r3,r16,r5
 2000f10:	18800117 	ldw	r2,4(r3)
 2000f14:	9009883a 	mov	r4,r18
 2000f18:	10800054 	ori	r2,r2,1
 2000f1c:	18800115 	stw	r2,4(r3)
 2000f20:	20043f80 	call	20043f8 <__malloc_unlock>
 2000f24:	80c00204 	addi	r3,r16,8
 2000f28:	003fc006 	br	2000e2c <_malloc_r+0x50>
 2000f2c:	02c08074 	movhi	r11,513
 2000f30:	5ac1d004 	addi	r11,r11,1856
 2000f34:	8ac5883a 	add	r2,r17,r11
 2000f38:	14000317 	ldw	r16,12(r2)
 2000f3c:	580f883a 	mov	r7,r11
 2000f40:	8806d0fa 	srli	r3,r17,3
 2000f44:	14006c26 	beq	r2,r16,20010f8 <_malloc_r+0x31c>
 2000f48:	80c00117 	ldw	r3,4(r16)
 2000f4c:	00bfff04 	movi	r2,-4
 2000f50:	81800317 	ldw	r6,12(r16)
 2000f54:	1886703a 	and	r3,r3,r2
 2000f58:	80c7883a 	add	r3,r16,r3
 2000f5c:	18800117 	ldw	r2,4(r3)
 2000f60:	81400217 	ldw	r5,8(r16)
 2000f64:	9009883a 	mov	r4,r18
 2000f68:	10800054 	ori	r2,r2,1
 2000f6c:	18800115 	stw	r2,4(r3)
 2000f70:	31400215 	stw	r5,8(r6)
 2000f74:	29800315 	stw	r6,12(r5)
 2000f78:	20043f80 	call	20043f8 <__malloc_unlock>
 2000f7c:	80c00204 	addi	r3,r16,8
 2000f80:	003faa06 	br	2000e2c <_malloc_r+0x50>
 2000f84:	00800104 	movi	r2,4
 2000f88:	10c0052e 	bgeu	r2,r3,2000fa0 <_malloc_r+0x1c4>
 2000f8c:	00800504 	movi	r2,20
 2000f90:	10c07836 	bltu	r2,r3,2001174 <_malloc_r+0x398>
 2000f94:	198016c4 	addi	r6,r3,91
 2000f98:	300490fa 	slli	r2,r6,3
 2000f9c:	003fbc06 	br	2000e90 <_malloc_r+0xb4>
 2000fa0:	8804d1ba 	srli	r2,r17,6
 2000fa4:	11800e04 	addi	r6,r2,56
 2000fa8:	300490fa 	slli	r2,r6,3
 2000fac:	003fb806 	br	2000e90 <_malloc_r+0xb4>
 2000fb0:	00807fc4 	movi	r2,511
 2000fb4:	1140bb36 	bltu	r2,r5,20012a4 <_malloc_r+0x4c8>
 2000fb8:	2806d0fa 	srli	r3,r5,3
 2000fbc:	573ffe04 	addi	fp,r10,-8
 2000fc0:	00800044 	movi	r2,1
 2000fc4:	180890fa 	slli	r4,r3,3
 2000fc8:	1807d0ba 	srai	r3,r3,2
 2000fcc:	e1c00117 	ldw	r7,4(fp)
 2000fd0:	5909883a 	add	r4,r11,r4
 2000fd4:	21400217 	ldw	r5,8(r4)
 2000fd8:	10c4983a 	sll	r2,r2,r3
 2000fdc:	81000315 	stw	r4,12(r16)
 2000fe0:	81400215 	stw	r5,8(r16)
 2000fe4:	388eb03a 	or	r7,r7,r2
 2000fe8:	2c000315 	stw	r16,12(r5)
 2000fec:	24000215 	stw	r16,8(r4)
 2000ff0:	e1c00115 	stw	r7,4(fp)
 2000ff4:	4807883a 	mov	r3,r9
 2000ff8:	4800cd16 	blt	r9,zero,2001330 <_malloc_r+0x554>
 2000ffc:	1807d0ba 	srai	r3,r3,2
 2001000:	00800044 	movi	r2,1
 2001004:	10c8983a 	sll	r4,r2,r3
 2001008:	39004436 	bltu	r7,r4,200111c <_malloc_r+0x340>
 200100c:	21c4703a 	and	r2,r4,r7
 2001010:	10000a1e 	bne	r2,zero,200103c <_malloc_r+0x260>
 2001014:	2109883a 	add	r4,r4,r4
 2001018:	00bfff04 	movi	r2,-4
 200101c:	4884703a 	and	r2,r9,r2
 2001020:	3906703a 	and	r3,r7,r4
 2001024:	12400104 	addi	r9,r2,4
 2001028:	1800041e 	bne	r3,zero,200103c <_malloc_r+0x260>
 200102c:	2109883a 	add	r4,r4,r4
 2001030:	3904703a 	and	r2,r7,r4
 2001034:	4a400104 	addi	r9,r9,4
 2001038:	103ffc26 	beq	r2,zero,200102c <_malloc_r+0x250>
 200103c:	480490fa 	slli	r2,r9,3
 2001040:	4819883a 	mov	r12,r9
 2001044:	023fff04 	movi	r8,-4
 2001048:	589b883a 	add	r13,r11,r2
 200104c:	6807883a 	mov	r3,r13
 2001050:	014003c4 	movi	r5,15
 2001054:	1c000317 	ldw	r16,12(r3)
 2001058:	1c00041e 	bne	r3,r16,200106c <_malloc_r+0x290>
 200105c:	0000a706 	br	20012fc <_malloc_r+0x520>
 2001060:	3000ab0e 	bge	r6,zero,2001310 <_malloc_r+0x534>
 2001064:	84000317 	ldw	r16,12(r16)
 2001068:	1c00a426 	beq	r3,r16,20012fc <_malloc_r+0x520>
 200106c:	80800117 	ldw	r2,4(r16)
 2001070:	1204703a 	and	r2,r2,r8
 2001074:	144dc83a 	sub	r6,r2,r17
 2001078:	29bff90e 	bge	r5,r6,2001060 <_malloc_r+0x284>
 200107c:	81000317 	ldw	r4,12(r16)
 2001080:	80c00217 	ldw	r3,8(r16)
 2001084:	89400054 	ori	r5,r17,1
 2001088:	8445883a 	add	r2,r16,r17
 200108c:	20c00215 	stw	r3,8(r4)
 2001090:	19000315 	stw	r4,12(r3)
 2001094:	81400115 	stw	r5,4(r16)
 2001098:	1187883a 	add	r3,r2,r6
 200109c:	31000054 	ori	r4,r6,1
 20010a0:	50800315 	stw	r2,12(r10)
 20010a4:	50800215 	stw	r2,8(r10)
 20010a8:	19800015 	stw	r6,0(r3)
 20010ac:	11000115 	stw	r4,4(r2)
 20010b0:	12800215 	stw	r10,8(r2)
 20010b4:	12800315 	stw	r10,12(r2)
 20010b8:	9009883a 	mov	r4,r18
 20010bc:	20043f80 	call	20043f8 <__malloc_unlock>
 20010c0:	80c00204 	addi	r3,r16,8
 20010c4:	003f5906 	br	2000e2c <_malloc_r+0x50>
 20010c8:	8109883a 	add	r4,r16,r4
 20010cc:	20800117 	ldw	r2,4(r4)
 20010d0:	80c00217 	ldw	r3,8(r16)
 20010d4:	81400317 	ldw	r5,12(r16)
 20010d8:	10800054 	ori	r2,r2,1
 20010dc:	20800115 	stw	r2,4(r4)
 20010e0:	28c00215 	stw	r3,8(r5)
 20010e4:	19400315 	stw	r5,12(r3)
 20010e8:	9009883a 	mov	r4,r18
 20010ec:	20043f80 	call	20043f8 <__malloc_unlock>
 20010f0:	80c00204 	addi	r3,r16,8
 20010f4:	003f4d06 	br	2000e2c <_malloc_r+0x50>
 20010f8:	80800204 	addi	r2,r16,8
 20010fc:	14000317 	ldw	r16,12(r2)
 2001100:	143f911e 	bne	r2,r16,2000f48 <_malloc_r+0x16c>
 2001104:	1a400084 	addi	r9,r3,2
 2001108:	003f7306 	br	2000ed8 <_malloc_r+0xfc>
 200110c:	88c00054 	ori	r3,r17,1
 2001110:	8445883a 	add	r2,r16,r17
 2001114:	80c00115 	stw	r3,4(r16)
 2001118:	003fdf06 	br	2001098 <_malloc_r+0x2bc>
 200111c:	e4000217 	ldw	r16,8(fp)
 2001120:	00bfff04 	movi	r2,-4
 2001124:	80c00117 	ldw	r3,4(r16)
 2001128:	802d883a 	mov	r22,r16
 200112c:	18aa703a 	and	r21,r3,r2
 2001130:	ac401636 	bltu	r21,r17,200118c <_malloc_r+0x3b0>
 2001134:	ac49c83a 	sub	r4,r21,r17
 2001138:	008003c4 	movi	r2,15
 200113c:	1100130e 	bge	r2,r4,200118c <_malloc_r+0x3b0>
 2001140:	88800054 	ori	r2,r17,1
 2001144:	8447883a 	add	r3,r16,r17
 2001148:	80800115 	stw	r2,4(r16)
 200114c:	20800054 	ori	r2,r4,1
 2001150:	18800115 	stw	r2,4(r3)
 2001154:	e0c00215 	stw	r3,8(fp)
 2001158:	9009883a 	mov	r4,r18
 200115c:	20043f80 	call	20043f8 <__malloc_unlock>
 2001160:	80c00204 	addi	r3,r16,8
 2001164:	003f3106 	br	2000e2c <_malloc_r+0x50>
 2001168:	39c00117 	ldw	r7,4(r7)
 200116c:	573ffe04 	addi	fp,r10,-8
 2001170:	003fa006 	br	2000ff4 <_malloc_r+0x218>
 2001174:	00801504 	movi	r2,84
 2001178:	10c06736 	bltu	r2,r3,2001318 <_malloc_r+0x53c>
 200117c:	8804d33a 	srli	r2,r17,12
 2001180:	11801b84 	addi	r6,r2,110
 2001184:	300490fa 	slli	r2,r6,3
 2001188:	003f4106 	br	2000e90 <_malloc_r+0xb4>
 200118c:	d0a72a17 	ldw	r2,-25432(gp)
 2001190:	d0e00517 	ldw	r3,-32748(gp)
 2001194:	053fffc4 	movi	r20,-1
 2001198:	10800404 	addi	r2,r2,16
 200119c:	88a7883a 	add	r19,r17,r2
 20011a0:	1d000326 	beq	r3,r20,20011b0 <_malloc_r+0x3d4>
 20011a4:	98c3ffc4 	addi	r3,r19,4095
 20011a8:	00bc0004 	movi	r2,-4096
 20011ac:	18a6703a 	and	r19,r3,r2
 20011b0:	9009883a 	mov	r4,r18
 20011b4:	980b883a 	mov	r5,r19
 20011b8:	20015d00 	call	20015d0 <_sbrk_r>
 20011bc:	1009883a 	mov	r4,r2
 20011c0:	15000426 	beq	r2,r20,20011d4 <_malloc_r+0x3f8>
 20011c4:	854b883a 	add	r5,r16,r21
 20011c8:	1029883a 	mov	r20,r2
 20011cc:	11405a2e 	bgeu	r2,r5,2001338 <_malloc_r+0x55c>
 20011d0:	87000c26 	beq	r16,fp,2001204 <_malloc_r+0x428>
 20011d4:	e4000217 	ldw	r16,8(fp)
 20011d8:	80c00117 	ldw	r3,4(r16)
 20011dc:	00bfff04 	movi	r2,-4
 20011e0:	1884703a 	and	r2,r3,r2
 20011e4:	14400336 	bltu	r2,r17,20011f4 <_malloc_r+0x418>
 20011e8:	1449c83a 	sub	r4,r2,r17
 20011ec:	008003c4 	movi	r2,15
 20011f0:	113fd316 	blt	r2,r4,2001140 <_malloc_r+0x364>
 20011f4:	9009883a 	mov	r4,r18
 20011f8:	20043f80 	call	20043f8 <__malloc_unlock>
 20011fc:	0007883a 	mov	r3,zero
 2001200:	003f0a06 	br	2000e2c <_malloc_r+0x50>
 2001204:	05c08074 	movhi	r23,513
 2001208:	bdd7e504 	addi	r23,r23,24468
 200120c:	b8800017 	ldw	r2,0(r23)
 2001210:	988d883a 	add	r6,r19,r2
 2001214:	b9800015 	stw	r6,0(r23)
 2001218:	d0e00517 	ldw	r3,-32748(gp)
 200121c:	00bfffc4 	movi	r2,-1
 2001220:	18808e26 	beq	r3,r2,200145c <_malloc_r+0x680>
 2001224:	2145c83a 	sub	r2,r4,r5
 2001228:	3085883a 	add	r2,r6,r2
 200122c:	b8800015 	stw	r2,0(r23)
 2001230:	20c001cc 	andi	r3,r4,7
 2001234:	18005f1e 	bne	r3,zero,20013b4 <_malloc_r+0x5d8>
 2001238:	000b883a 	mov	r5,zero
 200123c:	a4c5883a 	add	r2,r20,r19
 2001240:	1083ffcc 	andi	r2,r2,4095
 2001244:	00c40004 	movi	r3,4096
 2001248:	1887c83a 	sub	r3,r3,r2
 200124c:	28e7883a 	add	r19,r5,r3
 2001250:	9009883a 	mov	r4,r18
 2001254:	980b883a 	mov	r5,r19
 2001258:	20015d00 	call	20015d0 <_sbrk_r>
 200125c:	1007883a 	mov	r3,r2
 2001260:	00bfffc4 	movi	r2,-1
 2001264:	18807a26 	beq	r3,r2,2001450 <_malloc_r+0x674>
 2001268:	1d05c83a 	sub	r2,r3,r20
 200126c:	9885883a 	add	r2,r19,r2
 2001270:	10c00054 	ori	r3,r2,1
 2001274:	b8800017 	ldw	r2,0(r23)
 2001278:	a021883a 	mov	r16,r20
 200127c:	a0c00115 	stw	r3,4(r20)
 2001280:	9885883a 	add	r2,r19,r2
 2001284:	b8800015 	stw	r2,0(r23)
 2001288:	e5000215 	stw	r20,8(fp)
 200128c:	b7003626 	beq	r22,fp,2001368 <_malloc_r+0x58c>
 2001290:	018003c4 	movi	r6,15
 2001294:	35404b36 	bltu	r6,r21,20013c4 <_malloc_r+0x5e8>
 2001298:	00800044 	movi	r2,1
 200129c:	a0800115 	stw	r2,4(r20)
 20012a0:	003fcd06 	br	20011d8 <_malloc_r+0x3fc>
 20012a4:	2808d27a 	srli	r4,r5,9
 20012a8:	2000371e 	bne	r4,zero,2001388 <_malloc_r+0x5ac>
 20012ac:	2808d0fa 	srli	r4,r5,3
 20012b0:	200690fa 	slli	r3,r4,3
 20012b4:	1ad1883a 	add	r8,r3,r11
 20012b8:	41800217 	ldw	r6,8(r8)
 20012bc:	41805b26 	beq	r8,r6,200142c <_malloc_r+0x650>
 20012c0:	30800117 	ldw	r2,4(r6)
 20012c4:	00ffff04 	movi	r3,-4
 20012c8:	10c4703a 	and	r2,r2,r3
 20012cc:	2880022e 	bgeu	r5,r2,20012d8 <_malloc_r+0x4fc>
 20012d0:	31800217 	ldw	r6,8(r6)
 20012d4:	41bffa1e 	bne	r8,r6,20012c0 <_malloc_r+0x4e4>
 20012d8:	32000317 	ldw	r8,12(r6)
 20012dc:	39c00117 	ldw	r7,4(r7)
 20012e0:	82000315 	stw	r8,12(r16)
 20012e4:	81800215 	stw	r6,8(r16)
 20012e8:	07008074 	movhi	fp,513
 20012ec:	e701d004 	addi	fp,fp,1856
 20012f0:	34000315 	stw	r16,12(r6)
 20012f4:	44000215 	stw	r16,8(r8)
 20012f8:	003f3e06 	br	2000ff4 <_malloc_r+0x218>
 20012fc:	63000044 	addi	r12,r12,1
 2001300:	608000cc 	andi	r2,r12,3
 2001304:	10005d26 	beq	r2,zero,200147c <_malloc_r+0x6a0>
 2001308:	18c00204 	addi	r3,r3,8
 200130c:	003f5106 	br	2001054 <_malloc_r+0x278>
 2001310:	8089883a 	add	r4,r16,r2
 2001314:	003f6d06 	br	20010cc <_malloc_r+0x2f0>
 2001318:	00805504 	movi	r2,340
 200131c:	10c02036 	bltu	r2,r3,20013a0 <_malloc_r+0x5c4>
 2001320:	8804d3fa 	srli	r2,r17,15
 2001324:	11801dc4 	addi	r6,r2,119
 2001328:	300490fa 	slli	r2,r6,3
 200132c:	003ed806 	br	2000e90 <_malloc_r+0xb4>
 2001330:	48c000c4 	addi	r3,r9,3
 2001334:	003f3106 	br	2000ffc <_malloc_r+0x220>
 2001338:	05c08074 	movhi	r23,513
 200133c:	bdd7e504 	addi	r23,r23,24468
 2001340:	b8800017 	ldw	r2,0(r23)
 2001344:	988d883a 	add	r6,r19,r2
 2001348:	b9800015 	stw	r6,0(r23)
 200134c:	293fb21e 	bne	r5,r4,2001218 <_malloc_r+0x43c>
 2001350:	2083ffcc 	andi	r2,r4,4095
 2001354:	103fb01e 	bne	r2,zero,2001218 <_malloc_r+0x43c>
 2001358:	e4000217 	ldw	r16,8(fp)
 200135c:	9d45883a 	add	r2,r19,r21
 2001360:	10800054 	ori	r2,r2,1
 2001364:	80800115 	stw	r2,4(r16)
 2001368:	b8c00017 	ldw	r3,0(r23)
 200136c:	d0a72b17 	ldw	r2,-25428(gp)
 2001370:	10c0012e 	bgeu	r2,r3,2001378 <_malloc_r+0x59c>
 2001374:	d0e72b15 	stw	r3,-25428(gp)
 2001378:	d0a72c17 	ldw	r2,-25424(gp)
 200137c:	10ff962e 	bgeu	r2,r3,20011d8 <_malloc_r+0x3fc>
 2001380:	d0e72c15 	stw	r3,-25424(gp)
 2001384:	003f9406 	br	20011d8 <_malloc_r+0x3fc>
 2001388:	00800104 	movi	r2,4
 200138c:	11001e36 	bltu	r2,r4,2001408 <_malloc_r+0x62c>
 2001390:	2804d1ba 	srli	r2,r5,6
 2001394:	11000e04 	addi	r4,r2,56
 2001398:	200690fa 	slli	r3,r4,3
 200139c:	003fc506 	br	20012b4 <_malloc_r+0x4d8>
 20013a0:	00815504 	movi	r2,1364
 20013a4:	10c01d2e 	bgeu	r2,r3,200141c <_malloc_r+0x640>
 20013a8:	01801f84 	movi	r6,126
 20013ac:	0080fc04 	movi	r2,1008
 20013b0:	003eb706 	br	2000e90 <_malloc_r+0xb4>
 20013b4:	00800204 	movi	r2,8
 20013b8:	10cbc83a 	sub	r5,r2,r3
 20013bc:	2169883a 	add	r20,r4,r5
 20013c0:	003f9e06 	br	200123c <_malloc_r+0x460>
 20013c4:	00bffe04 	movi	r2,-8
 20013c8:	a93ffd04 	addi	r4,r21,-12
 20013cc:	2088703a 	and	r4,r4,r2
 20013d0:	b10b883a 	add	r5,r22,r4
 20013d4:	00c00144 	movi	r3,5
 20013d8:	28c00215 	stw	r3,8(r5)
 20013dc:	28c00115 	stw	r3,4(r5)
 20013e0:	b0800117 	ldw	r2,4(r22)
 20013e4:	1080004c 	andi	r2,r2,1
 20013e8:	2084b03a 	or	r2,r4,r2
 20013ec:	b0800115 	stw	r2,4(r22)
 20013f0:	313fdd2e 	bgeu	r6,r4,2001368 <_malloc_r+0x58c>
 20013f4:	b1400204 	addi	r5,r22,8
 20013f8:	9009883a 	mov	r4,r18
 20013fc:	20017e00 	call	20017e0 <_free_r>
 2001400:	e4000217 	ldw	r16,8(fp)
 2001404:	003fd806 	br	2001368 <_malloc_r+0x58c>
 2001408:	00800504 	movi	r2,20
 200140c:	11001536 	bltu	r2,r4,2001464 <_malloc_r+0x688>
 2001410:	210016c4 	addi	r4,r4,91
 2001414:	200690fa 	slli	r3,r4,3
 2001418:	003fa606 	br	20012b4 <_malloc_r+0x4d8>
 200141c:	8804d4ba 	srli	r2,r17,18
 2001420:	11801f04 	addi	r6,r2,124
 2001424:	300490fa 	slli	r2,r6,3
 2001428:	003e9906 	br	2000e90 <_malloc_r+0xb4>
 200142c:	2009d0ba 	srai	r4,r4,2
 2001430:	01408074 	movhi	r5,513
 2001434:	2941d004 	addi	r5,r5,1856
 2001438:	00c00044 	movi	r3,1
 200143c:	28800117 	ldw	r2,4(r5)
 2001440:	1906983a 	sll	r3,r3,r4
 2001444:	10c4b03a 	or	r2,r2,r3
 2001448:	28800115 	stw	r2,4(r5)
 200144c:	003fa306 	br	20012dc <_malloc_r+0x500>
 2001450:	0027883a 	mov	r19,zero
 2001454:	00c00044 	movi	r3,1
 2001458:	003f8606 	br	2001274 <_malloc_r+0x498>
 200145c:	d1200515 	stw	r4,-32748(gp)
 2001460:	003f7306 	br	2001230 <_malloc_r+0x454>
 2001464:	00801504 	movi	r2,84
 2001468:	11001936 	bltu	r2,r4,20014d0 <_malloc_r+0x6f4>
 200146c:	2804d33a 	srli	r2,r5,12
 2001470:	11001b84 	addi	r4,r2,110
 2001474:	200690fa 	slli	r3,r4,3
 2001478:	003f8e06 	br	20012b4 <_malloc_r+0x4d8>
 200147c:	480b883a 	mov	r5,r9
 2001480:	6807883a 	mov	r3,r13
 2001484:	288000cc 	andi	r2,r5,3
 2001488:	18fffe04 	addi	r3,r3,-8
 200148c:	297fffc4 	addi	r5,r5,-1
 2001490:	10001526 	beq	r2,zero,20014e8 <_malloc_r+0x70c>
 2001494:	18800217 	ldw	r2,8(r3)
 2001498:	10fffa26 	beq	r2,r3,2001484 <_malloc_r+0x6a8>
 200149c:	2109883a 	add	r4,r4,r4
 20014a0:	393f1e36 	bltu	r7,r4,200111c <_malloc_r+0x340>
 20014a4:	203f1d26 	beq	r4,zero,200111c <_malloc_r+0x340>
 20014a8:	21c4703a 	and	r2,r4,r7
 20014ac:	10000226 	beq	r2,zero,20014b8 <_malloc_r+0x6dc>
 20014b0:	6013883a 	mov	r9,r12
 20014b4:	003ee106 	br	200103c <_malloc_r+0x260>
 20014b8:	2109883a 	add	r4,r4,r4
 20014bc:	3904703a 	and	r2,r7,r4
 20014c0:	63000104 	addi	r12,r12,4
 20014c4:	103ffc26 	beq	r2,zero,20014b8 <_malloc_r+0x6dc>
 20014c8:	6013883a 	mov	r9,r12
 20014cc:	003edb06 	br	200103c <_malloc_r+0x260>
 20014d0:	00805504 	movi	r2,340
 20014d4:	11000836 	bltu	r2,r4,20014f8 <_malloc_r+0x71c>
 20014d8:	2804d3fa 	srli	r2,r5,15
 20014dc:	11001dc4 	addi	r4,r2,119
 20014e0:	200690fa 	slli	r3,r4,3
 20014e4:	003f7306 	br	20012b4 <_malloc_r+0x4d8>
 20014e8:	0104303a 	nor	r2,zero,r4
 20014ec:	388e703a 	and	r7,r7,r2
 20014f0:	e1c00115 	stw	r7,4(fp)
 20014f4:	003fe906 	br	200149c <_malloc_r+0x6c0>
 20014f8:	00815504 	movi	r2,1364
 20014fc:	1100032e 	bgeu	r2,r4,200150c <_malloc_r+0x730>
 2001500:	01001f84 	movi	r4,126
 2001504:	00c0fc04 	movi	r3,1008
 2001508:	003f6a06 	br	20012b4 <_malloc_r+0x4d8>
 200150c:	2804d4ba 	srli	r2,r5,18
 2001510:	11001f04 	addi	r4,r2,124
 2001514:	200690fa 	slli	r3,r4,3
 2001518:	003f6606 	br	20012b4 <_malloc_r+0x4d8>

0200151c <_puts_r>:
 200151c:	defff604 	addi	sp,sp,-40
 2001520:	dc400715 	stw	r17,28(sp)
 2001524:	2023883a 	mov	r17,r4
 2001528:	2809883a 	mov	r4,r5
 200152c:	dfc00915 	stw	ra,36(sp)
 2001530:	dcc00815 	stw	r19,32(sp)
 2001534:	2827883a 	mov	r19,r5
 2001538:	20016400 	call	2001640 <strlen>
 200153c:	89400217 	ldw	r5,8(r17)
 2001540:	00c08074 	movhi	r3,513
 2001544:	18c16e04 	addi	r3,r3,1464
 2001548:	01c00044 	movi	r7,1
 200154c:	12000044 	addi	r8,r2,1
 2001550:	d8c00515 	stw	r3,20(sp)
 2001554:	d9c00615 	stw	r7,24(sp)
 2001558:	d8c00304 	addi	r3,sp,12
 200155c:	01c00084 	movi	r7,2
 2001560:	8809883a 	mov	r4,r17
 2001564:	d80d883a 	mov	r6,sp
 2001568:	d8c00015 	stw	r3,0(sp)
 200156c:	dcc00315 	stw	r19,12(sp)
 2001570:	da000215 	stw	r8,8(sp)
 2001574:	d9c00115 	stw	r7,4(sp)
 2001578:	d8800415 	stw	r2,16(sp)
 200157c:	2001af40 	call	2001af4 <__sfvwrite_r>
 2001580:	00ffffc4 	movi	r3,-1
 2001584:	10000626 	beq	r2,zero,20015a0 <_puts_r+0x84>
 2001588:	1805883a 	mov	r2,r3
 200158c:	dfc00917 	ldw	ra,36(sp)
 2001590:	dcc00817 	ldw	r19,32(sp)
 2001594:	dc400717 	ldw	r17,28(sp)
 2001598:	dec00a04 	addi	sp,sp,40
 200159c:	f800283a 	ret
 20015a0:	00c00284 	movi	r3,10
 20015a4:	1805883a 	mov	r2,r3
 20015a8:	dfc00917 	ldw	ra,36(sp)
 20015ac:	dcc00817 	ldw	r19,32(sp)
 20015b0:	dc400717 	ldw	r17,28(sp)
 20015b4:	dec00a04 	addi	sp,sp,40
 20015b8:	f800283a 	ret

020015bc <puts>:
 20015bc:	00808074 	movhi	r2,513
 20015c0:	10889a04 	addi	r2,r2,8808
 20015c4:	200b883a 	mov	r5,r4
 20015c8:	11000017 	ldw	r4,0(r2)
 20015cc:	200151c1 	jmpi	200151c <_puts_r>

020015d0 <_sbrk_r>:
 20015d0:	defffd04 	addi	sp,sp,-12
 20015d4:	dc000015 	stw	r16,0(sp)
 20015d8:	04008074 	movhi	r16,513
 20015dc:	840fc104 	addi	r16,r16,16132
 20015e0:	dc400115 	stw	r17,4(sp)
 20015e4:	80000015 	stw	zero,0(r16)
 20015e8:	2023883a 	mov	r17,r4
 20015ec:	2809883a 	mov	r4,r5
 20015f0:	dfc00215 	stw	ra,8(sp)
 20015f4:	2003fac0 	call	2003fac <sbrk>
 20015f8:	1007883a 	mov	r3,r2
 20015fc:	00bfffc4 	movi	r2,-1
 2001600:	18800626 	beq	r3,r2,200161c <_sbrk_r+0x4c>
 2001604:	1805883a 	mov	r2,r3
 2001608:	dfc00217 	ldw	ra,8(sp)
 200160c:	dc400117 	ldw	r17,4(sp)
 2001610:	dc000017 	ldw	r16,0(sp)
 2001614:	dec00304 	addi	sp,sp,12
 2001618:	f800283a 	ret
 200161c:	80800017 	ldw	r2,0(r16)
 2001620:	103ff826 	beq	r2,zero,2001604 <_sbrk_r+0x34>
 2001624:	88800015 	stw	r2,0(r17)
 2001628:	1805883a 	mov	r2,r3
 200162c:	dfc00217 	ldw	ra,8(sp)
 2001630:	dc400117 	ldw	r17,4(sp)
 2001634:	dc000017 	ldw	r16,0(sp)
 2001638:	dec00304 	addi	sp,sp,12
 200163c:	f800283a 	ret

02001640 <strlen>:
 2001640:	208000cc 	andi	r2,r4,3
 2001644:	2011883a 	mov	r8,r4
 2001648:	1000161e 	bne	r2,zero,20016a4 <strlen+0x64>
 200164c:	20c00017 	ldw	r3,0(r4)
 2001650:	017fbff4 	movhi	r5,65279
 2001654:	297fbfc4 	addi	r5,r5,-257
 2001658:	01e02074 	movhi	r7,32897
 200165c:	39e02004 	addi	r7,r7,-32640
 2001660:	1945883a 	add	r2,r3,r5
 2001664:	11c4703a 	and	r2,r2,r7
 2001668:	00c6303a 	nor	r3,zero,r3
 200166c:	1886703a 	and	r3,r3,r2
 2001670:	18000c1e 	bne	r3,zero,20016a4 <strlen+0x64>
 2001674:	280d883a 	mov	r6,r5
 2001678:	380b883a 	mov	r5,r7
 200167c:	21000104 	addi	r4,r4,4
 2001680:	20800017 	ldw	r2,0(r4)
 2001684:	1187883a 	add	r3,r2,r6
 2001688:	1946703a 	and	r3,r3,r5
 200168c:	0084303a 	nor	r2,zero,r2
 2001690:	10c4703a 	and	r2,r2,r3
 2001694:	103ff926 	beq	r2,zero,200167c <strlen+0x3c>
 2001698:	20800007 	ldb	r2,0(r4)
 200169c:	10000326 	beq	r2,zero,20016ac <strlen+0x6c>
 20016a0:	21000044 	addi	r4,r4,1
 20016a4:	20800007 	ldb	r2,0(r4)
 20016a8:	103ffd1e 	bne	r2,zero,20016a0 <strlen+0x60>
 20016ac:	2205c83a 	sub	r2,r4,r8
 20016b0:	f800283a 	ret

020016b4 <_malloc_trim_r>:
 20016b4:	defffb04 	addi	sp,sp,-20
 20016b8:	dcc00315 	stw	r19,12(sp)
 20016bc:	04c08074 	movhi	r19,513
 20016c0:	9cc1d004 	addi	r19,r19,1856
 20016c4:	dc800215 	stw	r18,8(sp)
 20016c8:	dc400115 	stw	r17,4(sp)
 20016cc:	dc000015 	stw	r16,0(sp)
 20016d0:	2823883a 	mov	r17,r5
 20016d4:	2025883a 	mov	r18,r4
 20016d8:	dfc00415 	stw	ra,16(sp)
 20016dc:	20042f00 	call	20042f0 <__malloc_lock>
 20016e0:	98800217 	ldw	r2,8(r19)
 20016e4:	9009883a 	mov	r4,r18
 20016e8:	000b883a 	mov	r5,zero
 20016ec:	10c00117 	ldw	r3,4(r2)
 20016f0:	00bfff04 	movi	r2,-4
 20016f4:	18a0703a 	and	r16,r3,r2
 20016f8:	8463c83a 	sub	r17,r16,r17
 20016fc:	8c43fbc4 	addi	r17,r17,4079
 2001700:	8822d33a 	srli	r17,r17,12
 2001704:	0083ffc4 	movi	r2,4095
 2001708:	8c7fffc4 	addi	r17,r17,-1
 200170c:	8822933a 	slli	r17,r17,12
 2001710:	1440060e 	bge	r2,r17,200172c <_malloc_trim_r+0x78>
 2001714:	20015d00 	call	20015d0 <_sbrk_r>
 2001718:	98c00217 	ldw	r3,8(r19)
 200171c:	9009883a 	mov	r4,r18
 2001720:	044bc83a 	sub	r5,zero,r17
 2001724:	80c7883a 	add	r3,r16,r3
 2001728:	10c00926 	beq	r2,r3,2001750 <_malloc_trim_r+0x9c>
 200172c:	20043f80 	call	20043f8 <__malloc_unlock>
 2001730:	0005883a 	mov	r2,zero
 2001734:	dfc00417 	ldw	ra,16(sp)
 2001738:	dcc00317 	ldw	r19,12(sp)
 200173c:	dc800217 	ldw	r18,8(sp)
 2001740:	dc400117 	ldw	r17,4(sp)
 2001744:	dc000017 	ldw	r16,0(sp)
 2001748:	dec00504 	addi	sp,sp,20
 200174c:	f800283a 	ret
 2001750:	9009883a 	mov	r4,r18
 2001754:	20015d00 	call	20015d0 <_sbrk_r>
 2001758:	844dc83a 	sub	r6,r16,r17
 200175c:	00ffffc4 	movi	r3,-1
 2001760:	9009883a 	mov	r4,r18
 2001764:	000b883a 	mov	r5,zero
 2001768:	01c08074 	movhi	r7,513
 200176c:	39d7e504 	addi	r7,r7,24468
 2001770:	31800054 	ori	r6,r6,1
 2001774:	10c00926 	beq	r2,r3,200179c <_malloc_trim_r+0xe8>
 2001778:	38800017 	ldw	r2,0(r7)
 200177c:	98c00217 	ldw	r3,8(r19)
 2001780:	9009883a 	mov	r4,r18
 2001784:	1445c83a 	sub	r2,r2,r17
 2001788:	38800015 	stw	r2,0(r7)
 200178c:	19800115 	stw	r6,4(r3)
 2001790:	20043f80 	call	20043f8 <__malloc_unlock>
 2001794:	00800044 	movi	r2,1
 2001798:	003fe606 	br	2001734 <_malloc_trim_r+0x80>
 200179c:	20015d00 	call	20015d0 <_sbrk_r>
 20017a0:	99800217 	ldw	r6,8(r19)
 20017a4:	100f883a 	mov	r7,r2
 20017a8:	9009883a 	mov	r4,r18
 20017ac:	1187c83a 	sub	r3,r2,r6
 20017b0:	008003c4 	movi	r2,15
 20017b4:	19400054 	ori	r5,r3,1
 20017b8:	10ffdc0e 	bge	r2,r3,200172c <_malloc_trim_r+0x78>
 20017bc:	00808074 	movhi	r2,513
 20017c0:	10889904 	addi	r2,r2,8804
 20017c4:	10c00017 	ldw	r3,0(r2)
 20017c8:	00808074 	movhi	r2,513
 20017cc:	1097e504 	addi	r2,r2,24468
 20017d0:	31400115 	stw	r5,4(r6)
 20017d4:	38c7c83a 	sub	r3,r7,r3
 20017d8:	10c00015 	stw	r3,0(r2)
 20017dc:	003fd306 	br	200172c <_malloc_trim_r+0x78>

020017e0 <_free_r>:
 20017e0:	defffd04 	addi	sp,sp,-12
 20017e4:	dc400115 	stw	r17,4(sp)
 20017e8:	dc000015 	stw	r16,0(sp)
 20017ec:	dfc00215 	stw	ra,8(sp)
 20017f0:	2821883a 	mov	r16,r5
 20017f4:	2023883a 	mov	r17,r4
 20017f8:	28005a26 	beq	r5,zero,2001964 <_free_r+0x184>
 20017fc:	20042f00 	call	20042f0 <__malloc_lock>
 2001800:	823ffe04 	addi	r8,r16,-8
 2001804:	41400117 	ldw	r5,4(r8)
 2001808:	00bfff84 	movi	r2,-2
 200180c:	02808074 	movhi	r10,513
 2001810:	5281d004 	addi	r10,r10,1856
 2001814:	288e703a 	and	r7,r5,r2
 2001818:	41cd883a 	add	r6,r8,r7
 200181c:	30c00117 	ldw	r3,4(r6)
 2001820:	51000217 	ldw	r4,8(r10)
 2001824:	00bfff04 	movi	r2,-4
 2001828:	1892703a 	and	r9,r3,r2
 200182c:	5017883a 	mov	r11,r10
 2001830:	31006726 	beq	r6,r4,20019d0 <_free_r+0x1f0>
 2001834:	2880004c 	andi	r2,r5,1
 2001838:	1005003a 	cmpeq	r2,r2,zero
 200183c:	32400115 	stw	r9,4(r6)
 2001840:	10001a1e 	bne	r2,zero,20018ac <_free_r+0xcc>
 2001844:	000b883a 	mov	r5,zero
 2001848:	3247883a 	add	r3,r6,r9
 200184c:	18800117 	ldw	r2,4(r3)
 2001850:	1080004c 	andi	r2,r2,1
 2001854:	1000231e 	bne	r2,zero,20018e4 <_free_r+0x104>
 2001858:	280ac03a 	cmpne	r5,r5,zero
 200185c:	3a4f883a 	add	r7,r7,r9
 2001860:	2800451e 	bne	r5,zero,2001978 <_free_r+0x198>
 2001864:	31000217 	ldw	r4,8(r6)
 2001868:	00808074 	movhi	r2,513
 200186c:	1081d204 	addi	r2,r2,1864
 2001870:	20807b26 	beq	r4,r2,2001a60 <_free_r+0x280>
 2001874:	30800317 	ldw	r2,12(r6)
 2001878:	3a07883a 	add	r3,r7,r8
 200187c:	19c00015 	stw	r7,0(r3)
 2001880:	11000215 	stw	r4,8(r2)
 2001884:	20800315 	stw	r2,12(r4)
 2001888:	38800054 	ori	r2,r7,1
 200188c:	40800115 	stw	r2,4(r8)
 2001890:	28001a26 	beq	r5,zero,20018fc <_free_r+0x11c>
 2001894:	8809883a 	mov	r4,r17
 2001898:	dfc00217 	ldw	ra,8(sp)
 200189c:	dc400117 	ldw	r17,4(sp)
 20018a0:	dc000017 	ldw	r16,0(sp)
 20018a4:	dec00304 	addi	sp,sp,12
 20018a8:	20043f81 	jmpi	20043f8 <__malloc_unlock>
 20018ac:	80bffe17 	ldw	r2,-8(r16)
 20018b0:	50c00204 	addi	r3,r10,8
 20018b4:	4091c83a 	sub	r8,r8,r2
 20018b8:	41000217 	ldw	r4,8(r8)
 20018bc:	388f883a 	add	r7,r7,r2
 20018c0:	20c06126 	beq	r4,r3,2001a48 <_free_r+0x268>
 20018c4:	40800317 	ldw	r2,12(r8)
 20018c8:	3247883a 	add	r3,r6,r9
 20018cc:	000b883a 	mov	r5,zero
 20018d0:	11000215 	stw	r4,8(r2)
 20018d4:	20800315 	stw	r2,12(r4)
 20018d8:	18800117 	ldw	r2,4(r3)
 20018dc:	1080004c 	andi	r2,r2,1
 20018e0:	103fdd26 	beq	r2,zero,2001858 <_free_r+0x78>
 20018e4:	38800054 	ori	r2,r7,1
 20018e8:	3a07883a 	add	r3,r7,r8
 20018ec:	280ac03a 	cmpne	r5,r5,zero
 20018f0:	40800115 	stw	r2,4(r8)
 20018f4:	19c00015 	stw	r7,0(r3)
 20018f8:	283fe61e 	bne	r5,zero,2001894 <_free_r+0xb4>
 20018fc:	00807fc4 	movi	r2,511
 2001900:	11c01f2e 	bgeu	r2,r7,2001980 <_free_r+0x1a0>
 2001904:	3806d27a 	srli	r3,r7,9
 2001908:	1800481e 	bne	r3,zero,2001a2c <_free_r+0x24c>
 200190c:	3804d0fa 	srli	r2,r7,3
 2001910:	100690fa 	slli	r3,r2,3
 2001914:	1acd883a 	add	r6,r3,r11
 2001918:	31400217 	ldw	r5,8(r6)
 200191c:	31405926 	beq	r6,r5,2001a84 <_free_r+0x2a4>
 2001920:	28800117 	ldw	r2,4(r5)
 2001924:	00ffff04 	movi	r3,-4
 2001928:	10c4703a 	and	r2,r2,r3
 200192c:	3880022e 	bgeu	r7,r2,2001938 <_free_r+0x158>
 2001930:	29400217 	ldw	r5,8(r5)
 2001934:	317ffa1e 	bne	r6,r5,2001920 <_free_r+0x140>
 2001938:	29800317 	ldw	r6,12(r5)
 200193c:	41800315 	stw	r6,12(r8)
 2001940:	41400215 	stw	r5,8(r8)
 2001944:	8809883a 	mov	r4,r17
 2001948:	2a000315 	stw	r8,12(r5)
 200194c:	32000215 	stw	r8,8(r6)
 2001950:	dfc00217 	ldw	ra,8(sp)
 2001954:	dc400117 	ldw	r17,4(sp)
 2001958:	dc000017 	ldw	r16,0(sp)
 200195c:	dec00304 	addi	sp,sp,12
 2001960:	20043f81 	jmpi	20043f8 <__malloc_unlock>
 2001964:	dfc00217 	ldw	ra,8(sp)
 2001968:	dc400117 	ldw	r17,4(sp)
 200196c:	dc000017 	ldw	r16,0(sp)
 2001970:	dec00304 	addi	sp,sp,12
 2001974:	f800283a 	ret
 2001978:	31000217 	ldw	r4,8(r6)
 200197c:	003fbd06 	br	2001874 <_free_r+0x94>
 2001980:	3806d0fa 	srli	r3,r7,3
 2001984:	00800044 	movi	r2,1
 2001988:	51400117 	ldw	r5,4(r10)
 200198c:	180890fa 	slli	r4,r3,3
 2001990:	1807d0ba 	srai	r3,r3,2
 2001994:	22c9883a 	add	r4,r4,r11
 2001998:	21800217 	ldw	r6,8(r4)
 200199c:	10c4983a 	sll	r2,r2,r3
 20019a0:	41000315 	stw	r4,12(r8)
 20019a4:	41800215 	stw	r6,8(r8)
 20019a8:	288ab03a 	or	r5,r5,r2
 20019ac:	22000215 	stw	r8,8(r4)
 20019b0:	8809883a 	mov	r4,r17
 20019b4:	51400115 	stw	r5,4(r10)
 20019b8:	32000315 	stw	r8,12(r6)
 20019bc:	dfc00217 	ldw	ra,8(sp)
 20019c0:	dc400117 	ldw	r17,4(sp)
 20019c4:	dc000017 	ldw	r16,0(sp)
 20019c8:	dec00304 	addi	sp,sp,12
 20019cc:	20043f81 	jmpi	20043f8 <__malloc_unlock>
 20019d0:	2880004c 	andi	r2,r5,1
 20019d4:	3a4d883a 	add	r6,r7,r9
 20019d8:	1000071e 	bne	r2,zero,20019f8 <_free_r+0x218>
 20019dc:	80bffe17 	ldw	r2,-8(r16)
 20019e0:	4091c83a 	sub	r8,r8,r2
 20019e4:	41000317 	ldw	r4,12(r8)
 20019e8:	40c00217 	ldw	r3,8(r8)
 20019ec:	308d883a 	add	r6,r6,r2
 20019f0:	20c00215 	stw	r3,8(r4)
 20019f4:	19000315 	stw	r4,12(r3)
 20019f8:	00808074 	movhi	r2,513
 20019fc:	10889804 	addi	r2,r2,8800
 2001a00:	11000017 	ldw	r4,0(r2)
 2001a04:	30c00054 	ori	r3,r6,1
 2001a08:	52000215 	stw	r8,8(r10)
 2001a0c:	40c00115 	stw	r3,4(r8)
 2001a10:	313fa036 	bltu	r6,r4,2001894 <_free_r+0xb4>
 2001a14:	00808074 	movhi	r2,513
 2001a18:	108fbe04 	addi	r2,r2,16120
 2001a1c:	11400017 	ldw	r5,0(r2)
 2001a20:	8809883a 	mov	r4,r17
 2001a24:	20016b40 	call	20016b4 <_malloc_trim_r>
 2001a28:	003f9a06 	br	2001894 <_free_r+0xb4>
 2001a2c:	00800104 	movi	r2,4
 2001a30:	10c0072e 	bgeu	r2,r3,2001a50 <_free_r+0x270>
 2001a34:	00800504 	movi	r2,20
 2001a38:	10c01936 	bltu	r2,r3,2001aa0 <_free_r+0x2c0>
 2001a3c:	188016c4 	addi	r2,r3,91
 2001a40:	100690fa 	slli	r3,r2,3
 2001a44:	003fb306 	br	2001914 <_free_r+0x134>
 2001a48:	01400044 	movi	r5,1
 2001a4c:	003f7e06 	br	2001848 <_free_r+0x68>
 2001a50:	3804d1ba 	srli	r2,r7,6
 2001a54:	10800e04 	addi	r2,r2,56
 2001a58:	100690fa 	slli	r3,r2,3
 2001a5c:	003fad06 	br	2001914 <_free_r+0x134>
 2001a60:	22000315 	stw	r8,12(r4)
 2001a64:	22000215 	stw	r8,8(r4)
 2001a68:	3a05883a 	add	r2,r7,r8
 2001a6c:	38c00054 	ori	r3,r7,1
 2001a70:	11c00015 	stw	r7,0(r2)
 2001a74:	41000215 	stw	r4,8(r8)
 2001a78:	40c00115 	stw	r3,4(r8)
 2001a7c:	41000315 	stw	r4,12(r8)
 2001a80:	003f8406 	br	2001894 <_free_r+0xb4>
 2001a84:	1005d0ba 	srai	r2,r2,2
 2001a88:	00c00044 	movi	r3,1
 2001a8c:	51000117 	ldw	r4,4(r10)
 2001a90:	1886983a 	sll	r3,r3,r2
 2001a94:	20c8b03a 	or	r4,r4,r3
 2001a98:	51000115 	stw	r4,4(r10)
 2001a9c:	003fa706 	br	200193c <_free_r+0x15c>
 2001aa0:	00801504 	movi	r2,84
 2001aa4:	10c00436 	bltu	r2,r3,2001ab8 <_free_r+0x2d8>
 2001aa8:	3804d33a 	srli	r2,r7,12
 2001aac:	10801b84 	addi	r2,r2,110
 2001ab0:	100690fa 	slli	r3,r2,3
 2001ab4:	003f9706 	br	2001914 <_free_r+0x134>
 2001ab8:	00805504 	movi	r2,340
 2001abc:	10c00436 	bltu	r2,r3,2001ad0 <_free_r+0x2f0>
 2001ac0:	3804d3fa 	srli	r2,r7,15
 2001ac4:	10801dc4 	addi	r2,r2,119
 2001ac8:	100690fa 	slli	r3,r2,3
 2001acc:	003f9106 	br	2001914 <_free_r+0x134>
 2001ad0:	00815504 	movi	r2,1364
 2001ad4:	10c0032e 	bgeu	r2,r3,2001ae4 <_free_r+0x304>
 2001ad8:	00801f84 	movi	r2,126
 2001adc:	00c0fc04 	movi	r3,1008
 2001ae0:	003f8c06 	br	2001914 <_free_r+0x134>
 2001ae4:	3804d4ba 	srli	r2,r7,18
 2001ae8:	10801f04 	addi	r2,r2,124
 2001aec:	100690fa 	slli	r3,r2,3
 2001af0:	003f8806 	br	2001914 <_free_r+0x134>

02001af4 <__sfvwrite_r>:
 2001af4:	30800217 	ldw	r2,8(r6)
 2001af8:	defff504 	addi	sp,sp,-44
 2001afc:	df000915 	stw	fp,36(sp)
 2001b00:	dd800715 	stw	r22,28(sp)
 2001b04:	dc800315 	stw	r18,12(sp)
 2001b08:	dfc00a15 	stw	ra,40(sp)
 2001b0c:	ddc00815 	stw	r23,32(sp)
 2001b10:	dd400615 	stw	r21,24(sp)
 2001b14:	dd000515 	stw	r20,20(sp)
 2001b18:	dcc00415 	stw	r19,16(sp)
 2001b1c:	dc400215 	stw	r17,8(sp)
 2001b20:	dc000115 	stw	r16,4(sp)
 2001b24:	302d883a 	mov	r22,r6
 2001b28:	2039883a 	mov	fp,r4
 2001b2c:	2825883a 	mov	r18,r5
 2001b30:	10001c26 	beq	r2,zero,2001ba4 <__sfvwrite_r+0xb0>
 2001b34:	29c0030b 	ldhu	r7,12(r5)
 2001b38:	3880020c 	andi	r2,r7,8
 2001b3c:	10002726 	beq	r2,zero,2001bdc <__sfvwrite_r+0xe8>
 2001b40:	28800417 	ldw	r2,16(r5)
 2001b44:	10002526 	beq	r2,zero,2001bdc <__sfvwrite_r+0xe8>
 2001b48:	3880008c 	andi	r2,r7,2
 2001b4c:	b5400017 	ldw	r21,0(r22)
 2001b50:	10002826 	beq	r2,zero,2001bf4 <__sfvwrite_r+0x100>
 2001b54:	0021883a 	mov	r16,zero
 2001b58:	0023883a 	mov	r17,zero
 2001b5c:	880d883a 	mov	r6,r17
 2001b60:	e009883a 	mov	r4,fp
 2001b64:	00810004 	movi	r2,1024
 2001b68:	80006e26 	beq	r16,zero,2001d24 <__sfvwrite_r+0x230>
 2001b6c:	800f883a 	mov	r7,r16
 2001b70:	91400717 	ldw	r5,28(r18)
 2001b74:	1400012e 	bgeu	r2,r16,2001b7c <__sfvwrite_r+0x88>
 2001b78:	100f883a 	mov	r7,r2
 2001b7c:	90c00917 	ldw	r3,36(r18)
 2001b80:	183ee83a 	callr	r3
 2001b84:	1007883a 	mov	r3,r2
 2001b88:	80a1c83a 	sub	r16,r16,r2
 2001b8c:	88a3883a 	add	r17,r17,r2
 2001b90:	00806d0e 	bge	zero,r2,2001d48 <__sfvwrite_r+0x254>
 2001b94:	b0800217 	ldw	r2,8(r22)
 2001b98:	10c5c83a 	sub	r2,r2,r3
 2001b9c:	b0800215 	stw	r2,8(r22)
 2001ba0:	103fee1e 	bne	r2,zero,2001b5c <__sfvwrite_r+0x68>
 2001ba4:	0009883a 	mov	r4,zero
 2001ba8:	2005883a 	mov	r2,r4
 2001bac:	dfc00a17 	ldw	ra,40(sp)
 2001bb0:	df000917 	ldw	fp,36(sp)
 2001bb4:	ddc00817 	ldw	r23,32(sp)
 2001bb8:	dd800717 	ldw	r22,28(sp)
 2001bbc:	dd400617 	ldw	r21,24(sp)
 2001bc0:	dd000517 	ldw	r20,20(sp)
 2001bc4:	dcc00417 	ldw	r19,16(sp)
 2001bc8:	dc800317 	ldw	r18,12(sp)
 2001bcc:	dc400217 	ldw	r17,8(sp)
 2001bd0:	dc000117 	ldw	r16,4(sp)
 2001bd4:	dec00b04 	addi	sp,sp,44
 2001bd8:	f800283a 	ret
 2001bdc:	20027e80 	call	20027e8 <__swsetup_r>
 2001be0:	1000e41e 	bne	r2,zero,2001f74 <__sfvwrite_r+0x480>
 2001be4:	91c0030b 	ldhu	r7,12(r18)
 2001be8:	b5400017 	ldw	r21,0(r22)
 2001bec:	3880008c 	andi	r2,r7,2
 2001bf0:	103fd81e 	bne	r2,zero,2001b54 <__sfvwrite_r+0x60>
 2001bf4:	3880004c 	andi	r2,r7,1
 2001bf8:	1005003a 	cmpeq	r2,r2,zero
 2001bfc:	10005726 	beq	r2,zero,2001d5c <__sfvwrite_r+0x268>
 2001c00:	0029883a 	mov	r20,zero
 2001c04:	002f883a 	mov	r23,zero
 2001c08:	a0004226 	beq	r20,zero,2001d14 <__sfvwrite_r+0x220>
 2001c0c:	3880800c 	andi	r2,r7,512
 2001c10:	94000217 	ldw	r16,8(r18)
 2001c14:	10008b26 	beq	r2,zero,2001e44 <__sfvwrite_r+0x350>
 2001c18:	800d883a 	mov	r6,r16
 2001c1c:	a400a536 	bltu	r20,r16,2001eb4 <__sfvwrite_r+0x3c0>
 2001c20:	3881200c 	andi	r2,r7,1152
 2001c24:	10002726 	beq	r2,zero,2001cc4 <__sfvwrite_r+0x1d0>
 2001c28:	90800517 	ldw	r2,20(r18)
 2001c2c:	92000417 	ldw	r8,16(r18)
 2001c30:	91400017 	ldw	r5,0(r18)
 2001c34:	1087883a 	add	r3,r2,r2
 2001c38:	1887883a 	add	r3,r3,r2
 2001c3c:	1808d7fa 	srli	r4,r3,31
 2001c40:	2a21c83a 	sub	r16,r5,r8
 2001c44:	80800044 	addi	r2,r16,1
 2001c48:	20c9883a 	add	r4,r4,r3
 2001c4c:	2027d07a 	srai	r19,r4,1
 2001c50:	a085883a 	add	r2,r20,r2
 2001c54:	980d883a 	mov	r6,r19
 2001c58:	9880022e 	bgeu	r19,r2,2001c64 <__sfvwrite_r+0x170>
 2001c5c:	1027883a 	mov	r19,r2
 2001c60:	100d883a 	mov	r6,r2
 2001c64:	3881000c 	andi	r2,r7,1024
 2001c68:	1000b826 	beq	r2,zero,2001f4c <__sfvwrite_r+0x458>
 2001c6c:	300b883a 	mov	r5,r6
 2001c70:	e009883a 	mov	r4,fp
 2001c74:	2000ddc0 	call	2000ddc <_malloc_r>
 2001c78:	10003126 	beq	r2,zero,2001d40 <__sfvwrite_r+0x24c>
 2001c7c:	91400417 	ldw	r5,16(r18)
 2001c80:	1009883a 	mov	r4,r2
 2001c84:	800d883a 	mov	r6,r16
 2001c88:	1023883a 	mov	r17,r2
 2001c8c:	20020740 	call	2002074 <memcpy>
 2001c90:	90c0030b 	ldhu	r3,12(r18)
 2001c94:	00beffc4 	movi	r2,-1025
 2001c98:	1886703a 	and	r3,r3,r2
 2001c9c:	18c02014 	ori	r3,r3,128
 2001ca0:	90c0030d 	sth	r3,12(r18)
 2001ca4:	9c07c83a 	sub	r3,r19,r16
 2001ca8:	8c05883a 	add	r2,r17,r16
 2001cac:	a00d883a 	mov	r6,r20
 2001cb0:	a021883a 	mov	r16,r20
 2001cb4:	90800015 	stw	r2,0(r18)
 2001cb8:	90c00215 	stw	r3,8(r18)
 2001cbc:	94400415 	stw	r17,16(r18)
 2001cc0:	94c00515 	stw	r19,20(r18)
 2001cc4:	91000017 	ldw	r4,0(r18)
 2001cc8:	b80b883a 	mov	r5,r23
 2001ccc:	a023883a 	mov	r17,r20
 2001cd0:	20021140 	call	2002114 <memmove>
 2001cd4:	90c00217 	ldw	r3,8(r18)
 2001cd8:	90800017 	ldw	r2,0(r18)
 2001cdc:	a027883a 	mov	r19,r20
 2001ce0:	1c07c83a 	sub	r3,r3,r16
 2001ce4:	1405883a 	add	r2,r2,r16
 2001ce8:	90c00215 	stw	r3,8(r18)
 2001cec:	a021883a 	mov	r16,r20
 2001cf0:	90800015 	stw	r2,0(r18)
 2001cf4:	b0800217 	ldw	r2,8(r22)
 2001cf8:	1405c83a 	sub	r2,r2,r16
 2001cfc:	b0800215 	stw	r2,8(r22)
 2001d00:	103fa826 	beq	r2,zero,2001ba4 <__sfvwrite_r+0xb0>
 2001d04:	a469c83a 	sub	r20,r20,r17
 2001d08:	91c0030b 	ldhu	r7,12(r18)
 2001d0c:	bcef883a 	add	r23,r23,r19
 2001d10:	a03fbe1e 	bne	r20,zero,2001c0c <__sfvwrite_r+0x118>
 2001d14:	adc00017 	ldw	r23,0(r21)
 2001d18:	ad000117 	ldw	r20,4(r21)
 2001d1c:	ad400204 	addi	r21,r21,8
 2001d20:	003fb906 	br	2001c08 <__sfvwrite_r+0x114>
 2001d24:	ac400017 	ldw	r17,0(r21)
 2001d28:	ac000117 	ldw	r16,4(r21)
 2001d2c:	ad400204 	addi	r21,r21,8
 2001d30:	003f8a06 	br	2001b5c <__sfvwrite_r+0x68>
 2001d34:	91400417 	ldw	r5,16(r18)
 2001d38:	e009883a 	mov	r4,fp
 2001d3c:	20017e00 	call	20017e0 <_free_r>
 2001d40:	00800304 	movi	r2,12
 2001d44:	e0800015 	stw	r2,0(fp)
 2001d48:	9080030b 	ldhu	r2,12(r18)
 2001d4c:	013fffc4 	movi	r4,-1
 2001d50:	10801014 	ori	r2,r2,64
 2001d54:	9080030d 	sth	r2,12(r18)
 2001d58:	003f9306 	br	2001ba8 <__sfvwrite_r+0xb4>
 2001d5c:	0027883a 	mov	r19,zero
 2001d60:	002f883a 	mov	r23,zero
 2001d64:	d8000015 	stw	zero,0(sp)
 2001d68:	0029883a 	mov	r20,zero
 2001d6c:	98001e26 	beq	r19,zero,2001de8 <__sfvwrite_r+0x2f4>
 2001d70:	d8c00017 	ldw	r3,0(sp)
 2001d74:	1804c03a 	cmpne	r2,r3,zero
 2001d78:	10005e26 	beq	r2,zero,2001ef4 <__sfvwrite_r+0x400>
 2001d7c:	9821883a 	mov	r16,r19
 2001d80:	a4c0012e 	bgeu	r20,r19,2001d88 <__sfvwrite_r+0x294>
 2001d84:	a021883a 	mov	r16,r20
 2001d88:	91000017 	ldw	r4,0(r18)
 2001d8c:	90800417 	ldw	r2,16(r18)
 2001d90:	91800217 	ldw	r6,8(r18)
 2001d94:	91c00517 	ldw	r7,20(r18)
 2001d98:	1100022e 	bgeu	r2,r4,2001da4 <__sfvwrite_r+0x2b0>
 2001d9c:	31e3883a 	add	r17,r6,r7
 2001da0:	8c001616 	blt	r17,r16,2001dfc <__sfvwrite_r+0x308>
 2001da4:	81c03816 	blt	r16,r7,2001e88 <__sfvwrite_r+0x394>
 2001da8:	90c00917 	ldw	r3,36(r18)
 2001dac:	91400717 	ldw	r5,28(r18)
 2001db0:	e009883a 	mov	r4,fp
 2001db4:	b80d883a 	mov	r6,r23
 2001db8:	183ee83a 	callr	r3
 2001dbc:	1023883a 	mov	r17,r2
 2001dc0:	00bfe10e 	bge	zero,r2,2001d48 <__sfvwrite_r+0x254>
 2001dc4:	a469c83a 	sub	r20,r20,r17
 2001dc8:	a0001826 	beq	r20,zero,2001e2c <__sfvwrite_r+0x338>
 2001dcc:	b0800217 	ldw	r2,8(r22)
 2001dd0:	1445c83a 	sub	r2,r2,r17
 2001dd4:	b0800215 	stw	r2,8(r22)
 2001dd8:	103f7226 	beq	r2,zero,2001ba4 <__sfvwrite_r+0xb0>
 2001ddc:	9c67c83a 	sub	r19,r19,r17
 2001de0:	bc6f883a 	add	r23,r23,r17
 2001de4:	983fe21e 	bne	r19,zero,2001d70 <__sfvwrite_r+0x27c>
 2001de8:	adc00017 	ldw	r23,0(r21)
 2001dec:	acc00117 	ldw	r19,4(r21)
 2001df0:	ad400204 	addi	r21,r21,8
 2001df4:	d8000015 	stw	zero,0(sp)
 2001df8:	003fdc06 	br	2001d6c <__sfvwrite_r+0x278>
 2001dfc:	b80b883a 	mov	r5,r23
 2001e00:	880d883a 	mov	r6,r17
 2001e04:	20021140 	call	2002114 <memmove>
 2001e08:	90c00017 	ldw	r3,0(r18)
 2001e0c:	e009883a 	mov	r4,fp
 2001e10:	900b883a 	mov	r5,r18
 2001e14:	1c47883a 	add	r3,r3,r17
 2001e18:	90c00015 	stw	r3,0(r18)
 2001e1c:	20029240 	call	2002924 <_fflush_r>
 2001e20:	103fc91e 	bne	r2,zero,2001d48 <__sfvwrite_r+0x254>
 2001e24:	a469c83a 	sub	r20,r20,r17
 2001e28:	a03fe81e 	bne	r20,zero,2001dcc <__sfvwrite_r+0x2d8>
 2001e2c:	e009883a 	mov	r4,fp
 2001e30:	900b883a 	mov	r5,r18
 2001e34:	20029240 	call	2002924 <_fflush_r>
 2001e38:	103fc31e 	bne	r2,zero,2001d48 <__sfvwrite_r+0x254>
 2001e3c:	d8000015 	stw	zero,0(sp)
 2001e40:	003fe206 	br	2001dcc <__sfvwrite_r+0x2d8>
 2001e44:	91000017 	ldw	r4,0(r18)
 2001e48:	90800417 	ldw	r2,16(r18)
 2001e4c:	1100022e 	bgeu	r2,r4,2001e58 <__sfvwrite_r+0x364>
 2001e50:	8023883a 	mov	r17,r16
 2001e54:	85003136 	bltu	r16,r20,2001f1c <__sfvwrite_r+0x428>
 2001e58:	91c00517 	ldw	r7,20(r18)
 2001e5c:	a1c01836 	bltu	r20,r7,2001ec0 <__sfvwrite_r+0x3cc>
 2001e60:	90c00917 	ldw	r3,36(r18)
 2001e64:	91400717 	ldw	r5,28(r18)
 2001e68:	e009883a 	mov	r4,fp
 2001e6c:	b80d883a 	mov	r6,r23
 2001e70:	183ee83a 	callr	r3
 2001e74:	1021883a 	mov	r16,r2
 2001e78:	00bfb30e 	bge	zero,r2,2001d48 <__sfvwrite_r+0x254>
 2001e7c:	1023883a 	mov	r17,r2
 2001e80:	1027883a 	mov	r19,r2
 2001e84:	003f9b06 	br	2001cf4 <__sfvwrite_r+0x200>
 2001e88:	b80b883a 	mov	r5,r23
 2001e8c:	800d883a 	mov	r6,r16
 2001e90:	20021140 	call	2002114 <memmove>
 2001e94:	90c00217 	ldw	r3,8(r18)
 2001e98:	90800017 	ldw	r2,0(r18)
 2001e9c:	8023883a 	mov	r17,r16
 2001ea0:	1c07c83a 	sub	r3,r3,r16
 2001ea4:	1405883a 	add	r2,r2,r16
 2001ea8:	90c00215 	stw	r3,8(r18)
 2001eac:	90800015 	stw	r2,0(r18)
 2001eb0:	003fc406 	br	2001dc4 <__sfvwrite_r+0x2d0>
 2001eb4:	a00d883a 	mov	r6,r20
 2001eb8:	a021883a 	mov	r16,r20
 2001ebc:	003f8106 	br	2001cc4 <__sfvwrite_r+0x1d0>
 2001ec0:	b80b883a 	mov	r5,r23
 2001ec4:	a00d883a 	mov	r6,r20
 2001ec8:	20021140 	call	2002114 <memmove>
 2001ecc:	90c00217 	ldw	r3,8(r18)
 2001ed0:	90800017 	ldw	r2,0(r18)
 2001ed4:	a021883a 	mov	r16,r20
 2001ed8:	1d07c83a 	sub	r3,r3,r20
 2001edc:	1505883a 	add	r2,r2,r20
 2001ee0:	a023883a 	mov	r17,r20
 2001ee4:	a027883a 	mov	r19,r20
 2001ee8:	90c00215 	stw	r3,8(r18)
 2001eec:	90800015 	stw	r2,0(r18)
 2001ef0:	003f8006 	br	2001cf4 <__sfvwrite_r+0x200>
 2001ef4:	b809883a 	mov	r4,r23
 2001ef8:	01400284 	movi	r5,10
 2001efc:	980d883a 	mov	r6,r19
 2001f00:	2001f900 	call	2001f90 <memchr>
 2001f04:	10001726 	beq	r2,zero,2001f64 <__sfvwrite_r+0x470>
 2001f08:	15c5c83a 	sub	r2,r2,r23
 2001f0c:	15000044 	addi	r20,r2,1
 2001f10:	00800044 	movi	r2,1
 2001f14:	d8800015 	stw	r2,0(sp)
 2001f18:	003f9806 	br	2001d7c <__sfvwrite_r+0x288>
 2001f1c:	b80b883a 	mov	r5,r23
 2001f20:	800d883a 	mov	r6,r16
 2001f24:	20021140 	call	2002114 <memmove>
 2001f28:	90c00017 	ldw	r3,0(r18)
 2001f2c:	e009883a 	mov	r4,fp
 2001f30:	900b883a 	mov	r5,r18
 2001f34:	1c07883a 	add	r3,r3,r16
 2001f38:	90c00015 	stw	r3,0(r18)
 2001f3c:	8027883a 	mov	r19,r16
 2001f40:	20029240 	call	2002924 <_fflush_r>
 2001f44:	103f6b26 	beq	r2,zero,2001cf4 <__sfvwrite_r+0x200>
 2001f48:	003f7f06 	br	2001d48 <__sfvwrite_r+0x254>
 2001f4c:	400b883a 	mov	r5,r8
 2001f50:	e009883a 	mov	r4,fp
 2001f54:	20021f40 	call	20021f4 <_realloc_r>
 2001f58:	103f7626 	beq	r2,zero,2001d34 <__sfvwrite_r+0x240>
 2001f5c:	1023883a 	mov	r17,r2
 2001f60:	003f5006 	br	2001ca4 <__sfvwrite_r+0x1b0>
 2001f64:	00c00044 	movi	r3,1
 2001f68:	9d000044 	addi	r20,r19,1
 2001f6c:	d8c00015 	stw	r3,0(sp)
 2001f70:	003f8206 	br	2001d7c <__sfvwrite_r+0x288>
 2001f74:	9080030b 	ldhu	r2,12(r18)
 2001f78:	00c00244 	movi	r3,9
 2001f7c:	013fffc4 	movi	r4,-1
 2001f80:	10801014 	ori	r2,r2,64
 2001f84:	9080030d 	sth	r2,12(r18)
 2001f88:	e0c00015 	stw	r3,0(fp)
 2001f8c:	003f0606 	br	2001ba8 <__sfvwrite_r+0xb4>

02001f90 <memchr>:
 2001f90:	008000c4 	movi	r2,3
 2001f94:	29403fcc 	andi	r5,r5,255
 2001f98:	2007883a 	mov	r3,r4
 2001f9c:	1180022e 	bgeu	r2,r6,2001fa8 <memchr+0x18>
 2001fa0:	2084703a 	and	r2,r4,r2
 2001fa4:	10000b26 	beq	r2,zero,2001fd4 <memchr+0x44>
 2001fa8:	313fffc4 	addi	r4,r6,-1
 2001fac:	3000051e 	bne	r6,zero,2001fc4 <memchr+0x34>
 2001fb0:	00002c06 	br	2002064 <memchr+0xd4>
 2001fb4:	213fffc4 	addi	r4,r4,-1
 2001fb8:	00bfffc4 	movi	r2,-1
 2001fbc:	18c00044 	addi	r3,r3,1
 2001fc0:	20802826 	beq	r4,r2,2002064 <memchr+0xd4>
 2001fc4:	18800003 	ldbu	r2,0(r3)
 2001fc8:	28bffa1e 	bne	r5,r2,2001fb4 <memchr+0x24>
 2001fcc:	1805883a 	mov	r2,r3
 2001fd0:	f800283a 	ret
 2001fd4:	0011883a 	mov	r8,zero
 2001fd8:	0007883a 	mov	r3,zero
 2001fdc:	01c00104 	movi	r7,4
 2001fe0:	4004923a 	slli	r2,r8,8
 2001fe4:	18c00044 	addi	r3,r3,1
 2001fe8:	1151883a 	add	r8,r2,r5
 2001fec:	19fffc1e 	bne	r3,r7,2001fe0 <memchr+0x50>
 2001ff0:	02bfbff4 	movhi	r10,65279
 2001ff4:	52bfbfc4 	addi	r10,r10,-257
 2001ff8:	02602074 	movhi	r9,32897
 2001ffc:	4a602004 	addi	r9,r9,-32640
 2002000:	02c000c4 	movi	r11,3
 2002004:	20800017 	ldw	r2,0(r4)
 2002008:	31bfff04 	addi	r6,r6,-4
 200200c:	200f883a 	mov	r7,r4
 2002010:	1204f03a 	xor	r2,r2,r8
 2002014:	1287883a 	add	r3,r2,r10
 2002018:	1a46703a 	and	r3,r3,r9
 200201c:	0084303a 	nor	r2,zero,r2
 2002020:	10c4703a 	and	r2,r2,r3
 2002024:	10000b26 	beq	r2,zero,2002054 <memchr+0xc4>
 2002028:	20800003 	ldbu	r2,0(r4)
 200202c:	28800f26 	beq	r5,r2,200206c <memchr+0xdc>
 2002030:	20800043 	ldbu	r2,1(r4)
 2002034:	21c00044 	addi	r7,r4,1
 2002038:	28800c26 	beq	r5,r2,200206c <memchr+0xdc>
 200203c:	20800083 	ldbu	r2,2(r4)
 2002040:	21c00084 	addi	r7,r4,2
 2002044:	28800926 	beq	r5,r2,200206c <memchr+0xdc>
 2002048:	208000c3 	ldbu	r2,3(r4)
 200204c:	21c000c4 	addi	r7,r4,3
 2002050:	28800626 	beq	r5,r2,200206c <memchr+0xdc>
 2002054:	21000104 	addi	r4,r4,4
 2002058:	59bfea36 	bltu	r11,r6,2002004 <memchr+0x74>
 200205c:	2007883a 	mov	r3,r4
 2002060:	003fd106 	br	2001fa8 <memchr+0x18>
 2002064:	0005883a 	mov	r2,zero
 2002068:	f800283a 	ret
 200206c:	3805883a 	mov	r2,r7
 2002070:	f800283a 	ret

02002074 <memcpy>:
 2002074:	01c003c4 	movi	r7,15
 2002078:	2007883a 	mov	r3,r4
 200207c:	3980032e 	bgeu	r7,r6,200208c <memcpy+0x18>
 2002080:	2904b03a 	or	r2,r5,r4
 2002084:	108000cc 	andi	r2,r2,3
 2002088:	10000926 	beq	r2,zero,20020b0 <memcpy+0x3c>
 200208c:	30000626 	beq	r6,zero,20020a8 <memcpy+0x34>
 2002090:	30cd883a 	add	r6,r6,r3
 2002094:	28800003 	ldbu	r2,0(r5)
 2002098:	29400044 	addi	r5,r5,1
 200209c:	18800005 	stb	r2,0(r3)
 20020a0:	18c00044 	addi	r3,r3,1
 20020a4:	30fffb1e 	bne	r6,r3,2002094 <memcpy+0x20>
 20020a8:	2005883a 	mov	r2,r4
 20020ac:	f800283a 	ret
 20020b0:	3811883a 	mov	r8,r7
 20020b4:	200f883a 	mov	r7,r4
 20020b8:	28c00017 	ldw	r3,0(r5)
 20020bc:	31bffc04 	addi	r6,r6,-16
 20020c0:	38c00015 	stw	r3,0(r7)
 20020c4:	28800117 	ldw	r2,4(r5)
 20020c8:	38800115 	stw	r2,4(r7)
 20020cc:	28c00217 	ldw	r3,8(r5)
 20020d0:	38c00215 	stw	r3,8(r7)
 20020d4:	28800317 	ldw	r2,12(r5)
 20020d8:	29400404 	addi	r5,r5,16
 20020dc:	38800315 	stw	r2,12(r7)
 20020e0:	39c00404 	addi	r7,r7,16
 20020e4:	41bff436 	bltu	r8,r6,20020b8 <memcpy+0x44>
 20020e8:	008000c4 	movi	r2,3
 20020ec:	1180072e 	bgeu	r2,r6,200210c <memcpy+0x98>
 20020f0:	1007883a 	mov	r3,r2
 20020f4:	28800017 	ldw	r2,0(r5)
 20020f8:	31bfff04 	addi	r6,r6,-4
 20020fc:	29400104 	addi	r5,r5,4
 2002100:	38800015 	stw	r2,0(r7)
 2002104:	39c00104 	addi	r7,r7,4
 2002108:	19bffa36 	bltu	r3,r6,20020f4 <memcpy+0x80>
 200210c:	3807883a 	mov	r3,r7
 2002110:	003fde06 	br	200208c <memcpy+0x18>

02002114 <memmove>:
 2002114:	2807883a 	mov	r3,r5
 2002118:	2011883a 	mov	r8,r4
 200211c:	29000c2e 	bgeu	r5,r4,2002150 <memmove+0x3c>
 2002120:	298f883a 	add	r7,r5,r6
 2002124:	21c00a2e 	bgeu	r4,r7,2002150 <memmove+0x3c>
 2002128:	30000726 	beq	r6,zero,2002148 <memmove+0x34>
 200212c:	2187883a 	add	r3,r4,r6
 2002130:	198dc83a 	sub	r6,r3,r6
 2002134:	39ffffc4 	addi	r7,r7,-1
 2002138:	38800003 	ldbu	r2,0(r7)
 200213c:	18ffffc4 	addi	r3,r3,-1
 2002140:	18800005 	stb	r2,0(r3)
 2002144:	19bffb1e 	bne	r3,r6,2002134 <memmove+0x20>
 2002148:	2005883a 	mov	r2,r4
 200214c:	f800283a 	ret
 2002150:	01c003c4 	movi	r7,15
 2002154:	39800a36 	bltu	r7,r6,2002180 <memmove+0x6c>
 2002158:	303ffb26 	beq	r6,zero,2002148 <memmove+0x34>
 200215c:	400f883a 	mov	r7,r8
 2002160:	320d883a 	add	r6,r6,r8
 2002164:	28800003 	ldbu	r2,0(r5)
 2002168:	29400044 	addi	r5,r5,1
 200216c:	38800005 	stb	r2,0(r7)
 2002170:	39c00044 	addi	r7,r7,1
 2002174:	39bffb1e 	bne	r7,r6,2002164 <memmove+0x50>
 2002178:	2005883a 	mov	r2,r4
 200217c:	f800283a 	ret
 2002180:	1904b03a 	or	r2,r3,r4
 2002184:	108000cc 	andi	r2,r2,3
 2002188:	103ff31e 	bne	r2,zero,2002158 <memmove+0x44>
 200218c:	3811883a 	mov	r8,r7
 2002190:	180b883a 	mov	r5,r3
 2002194:	200f883a 	mov	r7,r4
 2002198:	28c00017 	ldw	r3,0(r5)
 200219c:	31bffc04 	addi	r6,r6,-16
 20021a0:	38c00015 	stw	r3,0(r7)
 20021a4:	28800117 	ldw	r2,4(r5)
 20021a8:	38800115 	stw	r2,4(r7)
 20021ac:	28c00217 	ldw	r3,8(r5)
 20021b0:	38c00215 	stw	r3,8(r7)
 20021b4:	28800317 	ldw	r2,12(r5)
 20021b8:	29400404 	addi	r5,r5,16
 20021bc:	38800315 	stw	r2,12(r7)
 20021c0:	39c00404 	addi	r7,r7,16
 20021c4:	41bff436 	bltu	r8,r6,2002198 <memmove+0x84>
 20021c8:	008000c4 	movi	r2,3
 20021cc:	1180072e 	bgeu	r2,r6,20021ec <memmove+0xd8>
 20021d0:	1007883a 	mov	r3,r2
 20021d4:	28800017 	ldw	r2,0(r5)
 20021d8:	31bfff04 	addi	r6,r6,-4
 20021dc:	29400104 	addi	r5,r5,4
 20021e0:	38800015 	stw	r2,0(r7)
 20021e4:	39c00104 	addi	r7,r7,4
 20021e8:	19bffa36 	bltu	r3,r6,20021d4 <memmove+0xc0>
 20021ec:	3811883a 	mov	r8,r7
 20021f0:	003fd906 	br	2002158 <memmove+0x44>

020021f4 <_realloc_r>:
 20021f4:	defff404 	addi	sp,sp,-48
 20021f8:	dd800815 	stw	r22,32(sp)
 20021fc:	dc800415 	stw	r18,16(sp)
 2002200:	dc400315 	stw	r17,12(sp)
 2002204:	dfc00b15 	stw	ra,44(sp)
 2002208:	df000a15 	stw	fp,40(sp)
 200220c:	ddc00915 	stw	r23,36(sp)
 2002210:	dd400715 	stw	r21,28(sp)
 2002214:	dd000615 	stw	r20,24(sp)
 2002218:	dcc00515 	stw	r19,20(sp)
 200221c:	dc000215 	stw	r16,8(sp)
 2002220:	2825883a 	mov	r18,r5
 2002224:	3023883a 	mov	r17,r6
 2002228:	202d883a 	mov	r22,r4
 200222c:	2800c926 	beq	r5,zero,2002554 <_realloc_r+0x360>
 2002230:	20042f00 	call	20042f0 <__malloc_lock>
 2002234:	943ffe04 	addi	r16,r18,-8
 2002238:	88c002c4 	addi	r3,r17,11
 200223c:	00800584 	movi	r2,22
 2002240:	82000117 	ldw	r8,4(r16)
 2002244:	10c01b2e 	bgeu	r2,r3,20022b4 <_realloc_r+0xc0>
 2002248:	00bffe04 	movi	r2,-8
 200224c:	188e703a 	and	r7,r3,r2
 2002250:	3839883a 	mov	fp,r7
 2002254:	38001a16 	blt	r7,zero,20022c0 <_realloc_r+0xcc>
 2002258:	e4401936 	bltu	fp,r17,20022c0 <_realloc_r+0xcc>
 200225c:	013fff04 	movi	r4,-4
 2002260:	4126703a 	and	r19,r8,r4
 2002264:	99c02616 	blt	r19,r7,2002300 <_realloc_r+0x10c>
 2002268:	802b883a 	mov	r21,r16
 200226c:	9829883a 	mov	r20,r19
 2002270:	84000204 	addi	r16,r16,8
 2002274:	a80f883a 	mov	r7,r21
 2002278:	a70dc83a 	sub	r6,r20,fp
 200227c:	008003c4 	movi	r2,15
 2002280:	1180c136 	bltu	r2,r6,2002588 <_realloc_r+0x394>
 2002284:	38800117 	ldw	r2,4(r7)
 2002288:	a549883a 	add	r4,r20,r21
 200228c:	1080004c 	andi	r2,r2,1
 2002290:	a084b03a 	or	r2,r20,r2
 2002294:	38800115 	stw	r2,4(r7)
 2002298:	20c00117 	ldw	r3,4(r4)
 200229c:	18c00054 	ori	r3,r3,1
 20022a0:	20c00115 	stw	r3,4(r4)
 20022a4:	b009883a 	mov	r4,r22
 20022a8:	20043f80 	call	20043f8 <__malloc_unlock>
 20022ac:	8023883a 	mov	r17,r16
 20022b0:	00000606 	br	20022cc <_realloc_r+0xd8>
 20022b4:	01c00404 	movi	r7,16
 20022b8:	3839883a 	mov	fp,r7
 20022bc:	e47fe72e 	bgeu	fp,r17,200225c <_realloc_r+0x68>
 20022c0:	00800304 	movi	r2,12
 20022c4:	0023883a 	mov	r17,zero
 20022c8:	b0800015 	stw	r2,0(r22)
 20022cc:	8805883a 	mov	r2,r17
 20022d0:	dfc00b17 	ldw	ra,44(sp)
 20022d4:	df000a17 	ldw	fp,40(sp)
 20022d8:	ddc00917 	ldw	r23,36(sp)
 20022dc:	dd800817 	ldw	r22,32(sp)
 20022e0:	dd400717 	ldw	r21,28(sp)
 20022e4:	dd000617 	ldw	r20,24(sp)
 20022e8:	dcc00517 	ldw	r19,20(sp)
 20022ec:	dc800417 	ldw	r18,16(sp)
 20022f0:	dc400317 	ldw	r17,12(sp)
 20022f4:	dc000217 	ldw	r16,8(sp)
 20022f8:	dec00c04 	addi	sp,sp,48
 20022fc:	f800283a 	ret
 2002300:	00808074 	movhi	r2,513
 2002304:	1081d004 	addi	r2,r2,1856
 2002308:	12400217 	ldw	r9,8(r2)
 200230c:	84cd883a 	add	r6,r16,r19
 2002310:	802b883a 	mov	r21,r16
 2002314:	3240b926 	beq	r6,r9,20025fc <_realloc_r+0x408>
 2002318:	31400117 	ldw	r5,4(r6)
 200231c:	00bfff84 	movi	r2,-2
 2002320:	2884703a 	and	r2,r5,r2
 2002324:	1185883a 	add	r2,r2,r6
 2002328:	10c00117 	ldw	r3,4(r2)
 200232c:	18c0004c 	andi	r3,r3,1
 2002330:	1807003a 	cmpeq	r3,r3,zero
 2002334:	1800a326 	beq	r3,zero,20025c4 <_realloc_r+0x3d0>
 2002338:	2908703a 	and	r4,r5,r4
 200233c:	9929883a 	add	r20,r19,r4
 2002340:	a1c0a30e 	bge	r20,r7,20025d0 <_realloc_r+0x3dc>
 2002344:	4080004c 	andi	r2,r8,1
 2002348:	1000551e 	bne	r2,zero,20024a0 <_realloc_r+0x2ac>
 200234c:	80800017 	ldw	r2,0(r16)
 2002350:	80afc83a 	sub	r23,r16,r2
 2002354:	b8c00117 	ldw	r3,4(r23)
 2002358:	00bfff04 	movi	r2,-4
 200235c:	1884703a 	and	r2,r3,r2
 2002360:	30002e26 	beq	r6,zero,200241c <_realloc_r+0x228>
 2002364:	3240b926 	beq	r6,r9,200264c <_realloc_r+0x458>
 2002368:	98a9883a 	add	r20,r19,r2
 200236c:	2509883a 	add	r4,r4,r20
 2002370:	d9000015 	stw	r4,0(sp)
 2002374:	21c02a16 	blt	r4,r7,2002420 <_realloc_r+0x22c>
 2002378:	30800317 	ldw	r2,12(r6)
 200237c:	30c00217 	ldw	r3,8(r6)
 2002380:	01400904 	movi	r5,36
 2002384:	99bfff04 	addi	r6,r19,-4
 2002388:	18800315 	stw	r2,12(r3)
 200238c:	10c00215 	stw	r3,8(r2)
 2002390:	b9000317 	ldw	r4,12(r23)
 2002394:	b8800217 	ldw	r2,8(r23)
 2002398:	b82b883a 	mov	r21,r23
 200239c:	bc000204 	addi	r16,r23,8
 20023a0:	20800215 	stw	r2,8(r4)
 20023a4:	11000315 	stw	r4,12(r2)
 20023a8:	2980e436 	bltu	r5,r6,200273c <_realloc_r+0x548>
 20023ac:	008004c4 	movi	r2,19
 20023b0:	9009883a 	mov	r4,r18
 20023b4:	8011883a 	mov	r8,r16
 20023b8:	11800f2e 	bgeu	r2,r6,20023f8 <_realloc_r+0x204>
 20023bc:	90800017 	ldw	r2,0(r18)
 20023c0:	ba000404 	addi	r8,r23,16
 20023c4:	91000204 	addi	r4,r18,8
 20023c8:	b8800215 	stw	r2,8(r23)
 20023cc:	90c00117 	ldw	r3,4(r18)
 20023d0:	008006c4 	movi	r2,27
 20023d4:	b8c00315 	stw	r3,12(r23)
 20023d8:	1180072e 	bgeu	r2,r6,20023f8 <_realloc_r+0x204>
 20023dc:	90c00217 	ldw	r3,8(r18)
 20023e0:	ba000604 	addi	r8,r23,24
 20023e4:	91000404 	addi	r4,r18,16
 20023e8:	b8c00415 	stw	r3,16(r23)
 20023ec:	90800317 	ldw	r2,12(r18)
 20023f0:	b8800515 	stw	r2,20(r23)
 20023f4:	3140e726 	beq	r6,r5,2002794 <_realloc_r+0x5a0>
 20023f8:	20800017 	ldw	r2,0(r4)
 20023fc:	dd000017 	ldw	r20,0(sp)
 2002400:	b80f883a 	mov	r7,r23
 2002404:	40800015 	stw	r2,0(r8)
 2002408:	20c00117 	ldw	r3,4(r4)
 200240c:	40c00115 	stw	r3,4(r8)
 2002410:	20800217 	ldw	r2,8(r4)
 2002414:	40800215 	stw	r2,8(r8)
 2002418:	003f9706 	br	2002278 <_realloc_r+0x84>
 200241c:	98a9883a 	add	r20,r19,r2
 2002420:	a1c01f16 	blt	r20,r7,20024a0 <_realloc_r+0x2ac>
 2002424:	b8c00317 	ldw	r3,12(r23)
 2002428:	b8800217 	ldw	r2,8(r23)
 200242c:	99bfff04 	addi	r6,r19,-4
 2002430:	01400904 	movi	r5,36
 2002434:	b82b883a 	mov	r21,r23
 2002438:	18800215 	stw	r2,8(r3)
 200243c:	10c00315 	stw	r3,12(r2)
 2002440:	bc000204 	addi	r16,r23,8
 2002444:	2980c336 	bltu	r5,r6,2002754 <_realloc_r+0x560>
 2002448:	008004c4 	movi	r2,19
 200244c:	9009883a 	mov	r4,r18
 2002450:	8011883a 	mov	r8,r16
 2002454:	11800f2e 	bgeu	r2,r6,2002494 <_realloc_r+0x2a0>
 2002458:	90800017 	ldw	r2,0(r18)
 200245c:	ba000404 	addi	r8,r23,16
 2002460:	91000204 	addi	r4,r18,8
 2002464:	b8800215 	stw	r2,8(r23)
 2002468:	90c00117 	ldw	r3,4(r18)
 200246c:	008006c4 	movi	r2,27
 2002470:	b8c00315 	stw	r3,12(r23)
 2002474:	1180072e 	bgeu	r2,r6,2002494 <_realloc_r+0x2a0>
 2002478:	90c00217 	ldw	r3,8(r18)
 200247c:	ba000604 	addi	r8,r23,24
 2002480:	91000404 	addi	r4,r18,16
 2002484:	b8c00415 	stw	r3,16(r23)
 2002488:	90800317 	ldw	r2,12(r18)
 200248c:	b8800515 	stw	r2,20(r23)
 2002490:	3140c726 	beq	r6,r5,20027b0 <_realloc_r+0x5bc>
 2002494:	20800017 	ldw	r2,0(r4)
 2002498:	b80f883a 	mov	r7,r23
 200249c:	003fd906 	br	2002404 <_realloc_r+0x210>
 20024a0:	880b883a 	mov	r5,r17
 20024a4:	b009883a 	mov	r4,r22
 20024a8:	2000ddc0 	call	2000ddc <_malloc_r>
 20024ac:	1023883a 	mov	r17,r2
 20024b0:	10002526 	beq	r2,zero,2002548 <_realloc_r+0x354>
 20024b4:	80800117 	ldw	r2,4(r16)
 20024b8:	00ffff84 	movi	r3,-2
 20024bc:	893ffe04 	addi	r4,r17,-8
 20024c0:	10c4703a 	and	r2,r2,r3
 20024c4:	8085883a 	add	r2,r16,r2
 20024c8:	20809526 	beq	r4,r2,2002720 <_realloc_r+0x52c>
 20024cc:	99bfff04 	addi	r6,r19,-4
 20024d0:	01c00904 	movi	r7,36
 20024d4:	39804536 	bltu	r7,r6,20025ec <_realloc_r+0x3f8>
 20024d8:	008004c4 	movi	r2,19
 20024dc:	9009883a 	mov	r4,r18
 20024e0:	880b883a 	mov	r5,r17
 20024e4:	11800f2e 	bgeu	r2,r6,2002524 <_realloc_r+0x330>
 20024e8:	90800017 	ldw	r2,0(r18)
 20024ec:	89400204 	addi	r5,r17,8
 20024f0:	91000204 	addi	r4,r18,8
 20024f4:	88800015 	stw	r2,0(r17)
 20024f8:	90c00117 	ldw	r3,4(r18)
 20024fc:	008006c4 	movi	r2,27
 2002500:	88c00115 	stw	r3,4(r17)
 2002504:	1180072e 	bgeu	r2,r6,2002524 <_realloc_r+0x330>
 2002508:	90c00217 	ldw	r3,8(r18)
 200250c:	89400404 	addi	r5,r17,16
 2002510:	91000404 	addi	r4,r18,16
 2002514:	88c00215 	stw	r3,8(r17)
 2002518:	90800317 	ldw	r2,12(r18)
 200251c:	88800315 	stw	r2,12(r17)
 2002520:	31c09126 	beq	r6,r7,2002768 <_realloc_r+0x574>
 2002524:	20800017 	ldw	r2,0(r4)
 2002528:	28800015 	stw	r2,0(r5)
 200252c:	20c00117 	ldw	r3,4(r4)
 2002530:	28c00115 	stw	r3,4(r5)
 2002534:	20800217 	ldw	r2,8(r4)
 2002538:	28800215 	stw	r2,8(r5)
 200253c:	900b883a 	mov	r5,r18
 2002540:	b009883a 	mov	r4,r22
 2002544:	20017e00 	call	20017e0 <_free_r>
 2002548:	b009883a 	mov	r4,r22
 200254c:	20043f80 	call	20043f8 <__malloc_unlock>
 2002550:	003f5e06 	br	20022cc <_realloc_r+0xd8>
 2002554:	300b883a 	mov	r5,r6
 2002558:	dfc00b17 	ldw	ra,44(sp)
 200255c:	df000a17 	ldw	fp,40(sp)
 2002560:	ddc00917 	ldw	r23,36(sp)
 2002564:	dd800817 	ldw	r22,32(sp)
 2002568:	dd400717 	ldw	r21,28(sp)
 200256c:	dd000617 	ldw	r20,24(sp)
 2002570:	dcc00517 	ldw	r19,20(sp)
 2002574:	dc800417 	ldw	r18,16(sp)
 2002578:	dc400317 	ldw	r17,12(sp)
 200257c:	dc000217 	ldw	r16,8(sp)
 2002580:	dec00c04 	addi	sp,sp,48
 2002584:	2000ddc1 	jmpi	2000ddc <_malloc_r>
 2002588:	38800117 	ldw	r2,4(r7)
 200258c:	e54b883a 	add	r5,fp,r21
 2002590:	31000054 	ori	r4,r6,1
 2002594:	1080004c 	andi	r2,r2,1
 2002598:	1704b03a 	or	r2,r2,fp
 200259c:	38800115 	stw	r2,4(r7)
 20025a0:	29000115 	stw	r4,4(r5)
 20025a4:	2987883a 	add	r3,r5,r6
 20025a8:	18800117 	ldw	r2,4(r3)
 20025ac:	29400204 	addi	r5,r5,8
 20025b0:	b009883a 	mov	r4,r22
 20025b4:	10800054 	ori	r2,r2,1
 20025b8:	18800115 	stw	r2,4(r3)
 20025bc:	20017e00 	call	20017e0 <_free_r>
 20025c0:	003f3806 	br	20022a4 <_realloc_r+0xb0>
 20025c4:	000d883a 	mov	r6,zero
 20025c8:	0009883a 	mov	r4,zero
 20025cc:	003f5d06 	br	2002344 <_realloc_r+0x150>
 20025d0:	30c00217 	ldw	r3,8(r6)
 20025d4:	30800317 	ldw	r2,12(r6)
 20025d8:	800f883a 	mov	r7,r16
 20025dc:	84000204 	addi	r16,r16,8
 20025e0:	10c00215 	stw	r3,8(r2)
 20025e4:	18800315 	stw	r2,12(r3)
 20025e8:	003f2306 	br	2002278 <_realloc_r+0x84>
 20025ec:	8809883a 	mov	r4,r17
 20025f0:	900b883a 	mov	r5,r18
 20025f4:	20021140 	call	2002114 <memmove>
 20025f8:	003fd006 	br	200253c <_realloc_r+0x348>
 20025fc:	30800117 	ldw	r2,4(r6)
 2002600:	e0c00404 	addi	r3,fp,16
 2002604:	1108703a 	and	r4,r2,r4
 2002608:	9905883a 	add	r2,r19,r4
 200260c:	10ff4d16 	blt	r2,r3,2002344 <_realloc_r+0x150>
 2002610:	1705c83a 	sub	r2,r2,fp
 2002614:	870b883a 	add	r5,r16,fp
 2002618:	10800054 	ori	r2,r2,1
 200261c:	28800115 	stw	r2,4(r5)
 2002620:	80c00117 	ldw	r3,4(r16)
 2002624:	00808074 	movhi	r2,513
 2002628:	1081d004 	addi	r2,r2,1856
 200262c:	b009883a 	mov	r4,r22
 2002630:	18c0004c 	andi	r3,r3,1
 2002634:	e0c6b03a 	or	r3,fp,r3
 2002638:	11400215 	stw	r5,8(r2)
 200263c:	80c00115 	stw	r3,4(r16)
 2002640:	20043f80 	call	20043f8 <__malloc_unlock>
 2002644:	84400204 	addi	r17,r16,8
 2002648:	003f2006 	br	20022cc <_realloc_r+0xd8>
 200264c:	98a9883a 	add	r20,r19,r2
 2002650:	2509883a 	add	r4,r4,r20
 2002654:	e0800404 	addi	r2,fp,16
 2002658:	d9000115 	stw	r4,4(sp)
 200265c:	20bf7016 	blt	r4,r2,2002420 <_realloc_r+0x22c>
 2002660:	b8c00317 	ldw	r3,12(r23)
 2002664:	b8800217 	ldw	r2,8(r23)
 2002668:	99bfff04 	addi	r6,r19,-4
 200266c:	01400904 	movi	r5,36
 2002670:	18800215 	stw	r2,8(r3)
 2002674:	10c00315 	stw	r3,12(r2)
 2002678:	bc400204 	addi	r17,r23,8
 200267c:	29804136 	bltu	r5,r6,2002784 <_realloc_r+0x590>
 2002680:	008004c4 	movi	r2,19
 2002684:	9009883a 	mov	r4,r18
 2002688:	880f883a 	mov	r7,r17
 200268c:	11800f2e 	bgeu	r2,r6,20026cc <_realloc_r+0x4d8>
 2002690:	90800017 	ldw	r2,0(r18)
 2002694:	b9c00404 	addi	r7,r23,16
 2002698:	91000204 	addi	r4,r18,8
 200269c:	b8800215 	stw	r2,8(r23)
 20026a0:	90c00117 	ldw	r3,4(r18)
 20026a4:	008006c4 	movi	r2,27
 20026a8:	b8c00315 	stw	r3,12(r23)
 20026ac:	1180072e 	bgeu	r2,r6,20026cc <_realloc_r+0x4d8>
 20026b0:	90c00217 	ldw	r3,8(r18)
 20026b4:	b9c00604 	addi	r7,r23,24
 20026b8:	91000404 	addi	r4,r18,16
 20026bc:	b8c00415 	stw	r3,16(r23)
 20026c0:	90800317 	ldw	r2,12(r18)
 20026c4:	b8800515 	stw	r2,20(r23)
 20026c8:	31404026 	beq	r6,r5,20027cc <_realloc_r+0x5d8>
 20026cc:	20800017 	ldw	r2,0(r4)
 20026d0:	38800015 	stw	r2,0(r7)
 20026d4:	20c00117 	ldw	r3,4(r4)
 20026d8:	38c00115 	stw	r3,4(r7)
 20026dc:	20800217 	ldw	r2,8(r4)
 20026e0:	38800215 	stw	r2,8(r7)
 20026e4:	d8c00117 	ldw	r3,4(sp)
 20026e8:	bf0b883a 	add	r5,r23,fp
 20026ec:	b009883a 	mov	r4,r22
 20026f0:	1f05c83a 	sub	r2,r3,fp
 20026f4:	10800054 	ori	r2,r2,1
 20026f8:	28800115 	stw	r2,4(r5)
 20026fc:	b8c00117 	ldw	r3,4(r23)
 2002700:	00808074 	movhi	r2,513
 2002704:	1081d004 	addi	r2,r2,1856
 2002708:	11400215 	stw	r5,8(r2)
 200270c:	18c0004c 	andi	r3,r3,1
 2002710:	e0c6b03a 	or	r3,fp,r3
 2002714:	b8c00115 	stw	r3,4(r23)
 2002718:	20043f80 	call	20043f8 <__malloc_unlock>
 200271c:	003eeb06 	br	20022cc <_realloc_r+0xd8>
 2002720:	20800117 	ldw	r2,4(r4)
 2002724:	00ffff04 	movi	r3,-4
 2002728:	800f883a 	mov	r7,r16
 200272c:	10c4703a 	and	r2,r2,r3
 2002730:	98a9883a 	add	r20,r19,r2
 2002734:	84000204 	addi	r16,r16,8
 2002738:	003ecf06 	br	2002278 <_realloc_r+0x84>
 200273c:	900b883a 	mov	r5,r18
 2002740:	8009883a 	mov	r4,r16
 2002744:	20021140 	call	2002114 <memmove>
 2002748:	dd000017 	ldw	r20,0(sp)
 200274c:	b80f883a 	mov	r7,r23
 2002750:	003ec906 	br	2002278 <_realloc_r+0x84>
 2002754:	900b883a 	mov	r5,r18
 2002758:	8009883a 	mov	r4,r16
 200275c:	20021140 	call	2002114 <memmove>
 2002760:	b80f883a 	mov	r7,r23
 2002764:	003ec406 	br	2002278 <_realloc_r+0x84>
 2002768:	90c00417 	ldw	r3,16(r18)
 200276c:	89400604 	addi	r5,r17,24
 2002770:	91000604 	addi	r4,r18,24
 2002774:	88c00415 	stw	r3,16(r17)
 2002778:	90800517 	ldw	r2,20(r18)
 200277c:	88800515 	stw	r2,20(r17)
 2002780:	003f6806 	br	2002524 <_realloc_r+0x330>
 2002784:	900b883a 	mov	r5,r18
 2002788:	8809883a 	mov	r4,r17
 200278c:	20021140 	call	2002114 <memmove>
 2002790:	003fd406 	br	20026e4 <_realloc_r+0x4f0>
 2002794:	90c00417 	ldw	r3,16(r18)
 2002798:	91000604 	addi	r4,r18,24
 200279c:	ba000804 	addi	r8,r23,32
 20027a0:	b8c00615 	stw	r3,24(r23)
 20027a4:	90800517 	ldw	r2,20(r18)
 20027a8:	b8800715 	stw	r2,28(r23)
 20027ac:	003f1206 	br	20023f8 <_realloc_r+0x204>
 20027b0:	90c00417 	ldw	r3,16(r18)
 20027b4:	91000604 	addi	r4,r18,24
 20027b8:	ba000804 	addi	r8,r23,32
 20027bc:	b8c00615 	stw	r3,24(r23)
 20027c0:	90800517 	ldw	r2,20(r18)
 20027c4:	b8800715 	stw	r2,28(r23)
 20027c8:	003f3206 	br	2002494 <_realloc_r+0x2a0>
 20027cc:	90c00417 	ldw	r3,16(r18)
 20027d0:	91000604 	addi	r4,r18,24
 20027d4:	b9c00804 	addi	r7,r23,32
 20027d8:	b8c00615 	stw	r3,24(r23)
 20027dc:	90800517 	ldw	r2,20(r18)
 20027e0:	b8800715 	stw	r2,28(r23)
 20027e4:	003fb906 	br	20026cc <_realloc_r+0x4d8>

020027e8 <__swsetup_r>:
 20027e8:	00808074 	movhi	r2,513
 20027ec:	10889a04 	addi	r2,r2,8808
 20027f0:	10c00017 	ldw	r3,0(r2)
 20027f4:	defffd04 	addi	sp,sp,-12
 20027f8:	dc400115 	stw	r17,4(sp)
 20027fc:	dc000015 	stw	r16,0(sp)
 2002800:	dfc00215 	stw	ra,8(sp)
 2002804:	2023883a 	mov	r17,r4
 2002808:	2821883a 	mov	r16,r5
 200280c:	18000226 	beq	r3,zero,2002818 <__swsetup_r+0x30>
 2002810:	18800e17 	ldw	r2,56(r3)
 2002814:	10001f26 	beq	r2,zero,2002894 <__swsetup_r+0xac>
 2002818:	8100030b 	ldhu	r4,12(r16)
 200281c:	2080020c 	andi	r2,r4,8
 2002820:	10002826 	beq	r2,zero,20028c4 <__swsetup_r+0xdc>
 2002824:	81400417 	ldw	r5,16(r16)
 2002828:	28001d26 	beq	r5,zero,20028a0 <__swsetup_r+0xb8>
 200282c:	2080004c 	andi	r2,r4,1
 2002830:	1005003a 	cmpeq	r2,r2,zero
 2002834:	10000b26 	beq	r2,zero,2002864 <__swsetup_r+0x7c>
 2002838:	2080008c 	andi	r2,r4,2
 200283c:	10001226 	beq	r2,zero,2002888 <__swsetup_r+0xa0>
 2002840:	0005883a 	mov	r2,zero
 2002844:	80800215 	stw	r2,8(r16)
 2002848:	28000b26 	beq	r5,zero,2002878 <__swsetup_r+0x90>
 200284c:	0005883a 	mov	r2,zero
 2002850:	dfc00217 	ldw	ra,8(sp)
 2002854:	dc400117 	ldw	r17,4(sp)
 2002858:	dc000017 	ldw	r16,0(sp)
 200285c:	dec00304 	addi	sp,sp,12
 2002860:	f800283a 	ret
 2002864:	80800517 	ldw	r2,20(r16)
 2002868:	80000215 	stw	zero,8(r16)
 200286c:	0085c83a 	sub	r2,zero,r2
 2002870:	80800615 	stw	r2,24(r16)
 2002874:	283ff51e 	bne	r5,zero,200284c <__swsetup_r+0x64>
 2002878:	2080200c 	andi	r2,r4,128
 200287c:	103ff326 	beq	r2,zero,200284c <__swsetup_r+0x64>
 2002880:	00bfffc4 	movi	r2,-1
 2002884:	003ff206 	br	2002850 <__swsetup_r+0x68>
 2002888:	80800517 	ldw	r2,20(r16)
 200288c:	80800215 	stw	r2,8(r16)
 2002890:	003fed06 	br	2002848 <__swsetup_r+0x60>
 2002894:	1809883a 	mov	r4,r3
 2002898:	2002bbc0 	call	2002bbc <__sinit>
 200289c:	003fde06 	br	2002818 <__swsetup_r+0x30>
 20028a0:	20c0a00c 	andi	r3,r4,640
 20028a4:	00808004 	movi	r2,512
 20028a8:	18bfe026 	beq	r3,r2,200282c <__swsetup_r+0x44>
 20028ac:	8809883a 	mov	r4,r17
 20028b0:	800b883a 	mov	r5,r16
 20028b4:	2002f940 	call	2002f94 <__smakebuf_r>
 20028b8:	8100030b 	ldhu	r4,12(r16)
 20028bc:	81400417 	ldw	r5,16(r16)
 20028c0:	003fda06 	br	200282c <__swsetup_r+0x44>
 20028c4:	2080040c 	andi	r2,r4,16
 20028c8:	103fed26 	beq	r2,zero,2002880 <__swsetup_r+0x98>
 20028cc:	2080010c 	andi	r2,r4,4
 20028d0:	10001226 	beq	r2,zero,200291c <__swsetup_r+0x134>
 20028d4:	81400c17 	ldw	r5,48(r16)
 20028d8:	28000526 	beq	r5,zero,20028f0 <__swsetup_r+0x108>
 20028dc:	80801004 	addi	r2,r16,64
 20028e0:	28800226 	beq	r5,r2,20028ec <__swsetup_r+0x104>
 20028e4:	8809883a 	mov	r4,r17
 20028e8:	20017e00 	call	20017e0 <_free_r>
 20028ec:	80000c15 	stw	zero,48(r16)
 20028f0:	8080030b 	ldhu	r2,12(r16)
 20028f4:	81400417 	ldw	r5,16(r16)
 20028f8:	80000115 	stw	zero,4(r16)
 20028fc:	10bff6cc 	andi	r2,r2,65499
 2002900:	8080030d 	sth	r2,12(r16)
 2002904:	81400015 	stw	r5,0(r16)
 2002908:	8080030b 	ldhu	r2,12(r16)
 200290c:	10800214 	ori	r2,r2,8
 2002910:	113fffcc 	andi	r4,r2,65535
 2002914:	8080030d 	sth	r2,12(r16)
 2002918:	003fc306 	br	2002828 <__swsetup_r+0x40>
 200291c:	81400417 	ldw	r5,16(r16)
 2002920:	003ff906 	br	2002908 <__swsetup_r+0x120>

02002924 <_fflush_r>:
 2002924:	defffb04 	addi	sp,sp,-20
 2002928:	dcc00315 	stw	r19,12(sp)
 200292c:	dc800215 	stw	r18,8(sp)
 2002930:	dfc00415 	stw	ra,16(sp)
 2002934:	dc400115 	stw	r17,4(sp)
 2002938:	dc000015 	stw	r16,0(sp)
 200293c:	2027883a 	mov	r19,r4
 2002940:	2825883a 	mov	r18,r5
 2002944:	20000226 	beq	r4,zero,2002950 <_fflush_r+0x2c>
 2002948:	20800e17 	ldw	r2,56(r4)
 200294c:	10005626 	beq	r2,zero,2002aa8 <_fflush_r+0x184>
 2002950:	9100030b 	ldhu	r4,12(r18)
 2002954:	20ffffcc 	andi	r3,r4,65535
 2002958:	18e0001c 	xori	r3,r3,32768
 200295c:	18e00004 	addi	r3,r3,-32768
 2002960:	1880020c 	andi	r2,r3,8
 2002964:	1000261e 	bne	r2,zero,2002a00 <_fflush_r+0xdc>
 2002968:	90c00117 	ldw	r3,4(r18)
 200296c:	20820014 	ori	r2,r4,2048
 2002970:	9080030d 	sth	r2,12(r18)
 2002974:	1009883a 	mov	r4,r2
 2002978:	00c0400e 	bge	zero,r3,2002a7c <_fflush_r+0x158>
 200297c:	92000a17 	ldw	r8,40(r18)
 2002980:	40004026 	beq	r8,zero,2002a84 <_fflush_r+0x160>
 2002984:	2084000c 	andi	r2,r4,4096
 2002988:	10005326 	beq	r2,zero,2002ad8 <_fflush_r+0x1b4>
 200298c:	94001417 	ldw	r16,80(r18)
 2002990:	9080030b 	ldhu	r2,12(r18)
 2002994:	1080010c 	andi	r2,r2,4
 2002998:	1000481e 	bne	r2,zero,2002abc <_fflush_r+0x198>
 200299c:	91400717 	ldw	r5,28(r18)
 20029a0:	9809883a 	mov	r4,r19
 20029a4:	800d883a 	mov	r6,r16
 20029a8:	000f883a 	mov	r7,zero
 20029ac:	403ee83a 	callr	r8
 20029b0:	8080261e 	bne	r16,r2,2002a4c <_fflush_r+0x128>
 20029b4:	9080030b 	ldhu	r2,12(r18)
 20029b8:	91000417 	ldw	r4,16(r18)
 20029bc:	90000115 	stw	zero,4(r18)
 20029c0:	10bdffcc 	andi	r2,r2,63487
 20029c4:	10ffffcc 	andi	r3,r2,65535
 20029c8:	18c4000c 	andi	r3,r3,4096
 20029cc:	9080030d 	sth	r2,12(r18)
 20029d0:	91000015 	stw	r4,0(r18)
 20029d4:	18002b26 	beq	r3,zero,2002a84 <_fflush_r+0x160>
 20029d8:	0007883a 	mov	r3,zero
 20029dc:	1805883a 	mov	r2,r3
 20029e0:	94001415 	stw	r16,80(r18)
 20029e4:	dfc00417 	ldw	ra,16(sp)
 20029e8:	dcc00317 	ldw	r19,12(sp)
 20029ec:	dc800217 	ldw	r18,8(sp)
 20029f0:	dc400117 	ldw	r17,4(sp)
 20029f4:	dc000017 	ldw	r16,0(sp)
 20029f8:	dec00504 	addi	sp,sp,20
 20029fc:	f800283a 	ret
 2002a00:	94400417 	ldw	r17,16(r18)
 2002a04:	88001f26 	beq	r17,zero,2002a84 <_fflush_r+0x160>
 2002a08:	90800017 	ldw	r2,0(r18)
 2002a0c:	18c000cc 	andi	r3,r3,3
 2002a10:	94400015 	stw	r17,0(r18)
 2002a14:	1461c83a 	sub	r16,r2,r17
 2002a18:	18002526 	beq	r3,zero,2002ab0 <_fflush_r+0x18c>
 2002a1c:	0005883a 	mov	r2,zero
 2002a20:	90800215 	stw	r2,8(r18)
 2002a24:	0400170e 	bge	zero,r16,2002a84 <_fflush_r+0x160>
 2002a28:	90c00917 	ldw	r3,36(r18)
 2002a2c:	91400717 	ldw	r5,28(r18)
 2002a30:	880d883a 	mov	r6,r17
 2002a34:	800f883a 	mov	r7,r16
 2002a38:	9809883a 	mov	r4,r19
 2002a3c:	183ee83a 	callr	r3
 2002a40:	88a3883a 	add	r17,r17,r2
 2002a44:	80a1c83a 	sub	r16,r16,r2
 2002a48:	00bff616 	blt	zero,r2,2002a24 <_fflush_r+0x100>
 2002a4c:	9080030b 	ldhu	r2,12(r18)
 2002a50:	00ffffc4 	movi	r3,-1
 2002a54:	10801014 	ori	r2,r2,64
 2002a58:	9080030d 	sth	r2,12(r18)
 2002a5c:	1805883a 	mov	r2,r3
 2002a60:	dfc00417 	ldw	ra,16(sp)
 2002a64:	dcc00317 	ldw	r19,12(sp)
 2002a68:	dc800217 	ldw	r18,8(sp)
 2002a6c:	dc400117 	ldw	r17,4(sp)
 2002a70:	dc000017 	ldw	r16,0(sp)
 2002a74:	dec00504 	addi	sp,sp,20
 2002a78:	f800283a 	ret
 2002a7c:	90800f17 	ldw	r2,60(r18)
 2002a80:	00bfbe16 	blt	zero,r2,200297c <_fflush_r+0x58>
 2002a84:	0007883a 	mov	r3,zero
 2002a88:	1805883a 	mov	r2,r3
 2002a8c:	dfc00417 	ldw	ra,16(sp)
 2002a90:	dcc00317 	ldw	r19,12(sp)
 2002a94:	dc800217 	ldw	r18,8(sp)
 2002a98:	dc400117 	ldw	r17,4(sp)
 2002a9c:	dc000017 	ldw	r16,0(sp)
 2002aa0:	dec00504 	addi	sp,sp,20
 2002aa4:	f800283a 	ret
 2002aa8:	2002bbc0 	call	2002bbc <__sinit>
 2002aac:	003fa806 	br	2002950 <_fflush_r+0x2c>
 2002ab0:	90800517 	ldw	r2,20(r18)
 2002ab4:	90800215 	stw	r2,8(r18)
 2002ab8:	003fda06 	br	2002a24 <_fflush_r+0x100>
 2002abc:	90800117 	ldw	r2,4(r18)
 2002ac0:	90c00c17 	ldw	r3,48(r18)
 2002ac4:	80a1c83a 	sub	r16,r16,r2
 2002ac8:	183fb426 	beq	r3,zero,200299c <_fflush_r+0x78>
 2002acc:	90800f17 	ldw	r2,60(r18)
 2002ad0:	80a1c83a 	sub	r16,r16,r2
 2002ad4:	003fb106 	br	200299c <_fflush_r+0x78>
 2002ad8:	91400717 	ldw	r5,28(r18)
 2002adc:	9809883a 	mov	r4,r19
 2002ae0:	000d883a 	mov	r6,zero
 2002ae4:	01c00044 	movi	r7,1
 2002ae8:	403ee83a 	callr	r8
 2002aec:	1021883a 	mov	r16,r2
 2002af0:	00bfffc4 	movi	r2,-1
 2002af4:	80800226 	beq	r16,r2,2002b00 <_fflush_r+0x1dc>
 2002af8:	92000a17 	ldw	r8,40(r18)
 2002afc:	003fa406 	br	2002990 <_fflush_r+0x6c>
 2002b00:	98c00017 	ldw	r3,0(r19)
 2002b04:	00800744 	movi	r2,29
 2002b08:	18bfde26 	beq	r3,r2,2002a84 <_fflush_r+0x160>
 2002b0c:	9080030b 	ldhu	r2,12(r18)
 2002b10:	8007883a 	mov	r3,r16
 2002b14:	10801014 	ori	r2,r2,64
 2002b18:	9080030d 	sth	r2,12(r18)
 2002b1c:	003fcf06 	br	2002a5c <_fflush_r+0x138>

02002b20 <fflush>:
 2002b20:	01408034 	movhi	r5,512
 2002b24:	294a4904 	addi	r5,r5,10532
 2002b28:	2007883a 	mov	r3,r4
 2002b2c:	20000526 	beq	r4,zero,2002b44 <fflush+0x24>
 2002b30:	00808074 	movhi	r2,513
 2002b34:	10889a04 	addi	r2,r2,8808
 2002b38:	11000017 	ldw	r4,0(r2)
 2002b3c:	180b883a 	mov	r5,r3
 2002b40:	20029241 	jmpi	2002924 <_fflush_r>
 2002b44:	00808074 	movhi	r2,513
 2002b48:	10889b04 	addi	r2,r2,8812
 2002b4c:	11000017 	ldw	r4,0(r2)
 2002b50:	2002e141 	jmpi	2002e14 <_fwalk_reent>

02002b54 <std>:
 2002b54:	00808034 	movhi	r2,512
 2002b58:	108c7004 	addi	r2,r2,12736
 2002b5c:	20800b15 	stw	r2,44(r4)
 2002b60:	00808034 	movhi	r2,512
 2002b64:	108cab04 	addi	r2,r2,12972
 2002b68:	20800815 	stw	r2,32(r4)
 2002b6c:	00c08034 	movhi	r3,512
 2002b70:	18cc8c04 	addi	r3,r3,12848
 2002b74:	00808034 	movhi	r2,512
 2002b78:	108c7204 	addi	r2,r2,12744
 2002b7c:	2140030d 	sth	r5,12(r4)
 2002b80:	2180038d 	sth	r6,14(r4)
 2002b84:	20c00915 	stw	r3,36(r4)
 2002b88:	20800a15 	stw	r2,40(r4)
 2002b8c:	20000015 	stw	zero,0(r4)
 2002b90:	20000115 	stw	zero,4(r4)
 2002b94:	20000215 	stw	zero,8(r4)
 2002b98:	20000415 	stw	zero,16(r4)
 2002b9c:	20000515 	stw	zero,20(r4)
 2002ba0:	20000615 	stw	zero,24(r4)
 2002ba4:	21000715 	stw	r4,28(r4)
 2002ba8:	f800283a 	ret

02002bac <__sfp_lock_acquire>:
 2002bac:	f800283a 	ret

02002bb0 <__sfp_lock_release>:
 2002bb0:	f800283a 	ret

02002bb4 <__sinit_lock_acquire>:
 2002bb4:	f800283a 	ret

02002bb8 <__sinit_lock_release>:
 2002bb8:	f800283a 	ret

02002bbc <__sinit>:
 2002bbc:	20800e17 	ldw	r2,56(r4)
 2002bc0:	defffd04 	addi	sp,sp,-12
 2002bc4:	dc400115 	stw	r17,4(sp)
 2002bc8:	dc000015 	stw	r16,0(sp)
 2002bcc:	dfc00215 	stw	ra,8(sp)
 2002bd0:	04400044 	movi	r17,1
 2002bd4:	01400104 	movi	r5,4
 2002bd8:	000d883a 	mov	r6,zero
 2002bdc:	2021883a 	mov	r16,r4
 2002be0:	2200bb04 	addi	r8,r4,748
 2002be4:	200f883a 	mov	r7,r4
 2002be8:	10000526 	beq	r2,zero,2002c00 <__sinit+0x44>
 2002bec:	dfc00217 	ldw	ra,8(sp)
 2002bf0:	dc400117 	ldw	r17,4(sp)
 2002bf4:	dc000017 	ldw	r16,0(sp)
 2002bf8:	dec00304 	addi	sp,sp,12
 2002bfc:	f800283a 	ret
 2002c00:	21000117 	ldw	r4,4(r4)
 2002c04:	00808034 	movhi	r2,512
 2002c08:	108b2804 	addi	r2,r2,11424
 2002c0c:	00c000c4 	movi	r3,3
 2002c10:	80800f15 	stw	r2,60(r16)
 2002c14:	80c0b915 	stw	r3,740(r16)
 2002c18:	8200ba15 	stw	r8,744(r16)
 2002c1c:	84400e15 	stw	r17,56(r16)
 2002c20:	8000b815 	stw	zero,736(r16)
 2002c24:	2002b540 	call	2002b54 <std>
 2002c28:	81000217 	ldw	r4,8(r16)
 2002c2c:	880d883a 	mov	r6,r17
 2002c30:	800f883a 	mov	r7,r16
 2002c34:	01400284 	movi	r5,10
 2002c38:	2002b540 	call	2002b54 <std>
 2002c3c:	81000317 	ldw	r4,12(r16)
 2002c40:	800f883a 	mov	r7,r16
 2002c44:	01400484 	movi	r5,18
 2002c48:	01800084 	movi	r6,2
 2002c4c:	dfc00217 	ldw	ra,8(sp)
 2002c50:	dc400117 	ldw	r17,4(sp)
 2002c54:	dc000017 	ldw	r16,0(sp)
 2002c58:	dec00304 	addi	sp,sp,12
 2002c5c:	2002b541 	jmpi	2002b54 <std>

02002c60 <__fp_lock>:
 2002c60:	0005883a 	mov	r2,zero
 2002c64:	f800283a 	ret

02002c68 <__fp_unlock>:
 2002c68:	0005883a 	mov	r2,zero
 2002c6c:	f800283a 	ret

02002c70 <__fp_unlock_all>:
 2002c70:	00808074 	movhi	r2,513
 2002c74:	10889a04 	addi	r2,r2,8808
 2002c78:	11000017 	ldw	r4,0(r2)
 2002c7c:	01408034 	movhi	r5,512
 2002c80:	294b1a04 	addi	r5,r5,11368
 2002c84:	2002edc1 	jmpi	2002edc <_fwalk>

02002c88 <__fp_lock_all>:
 2002c88:	00808074 	movhi	r2,513
 2002c8c:	10889a04 	addi	r2,r2,8808
 2002c90:	11000017 	ldw	r4,0(r2)
 2002c94:	01408034 	movhi	r5,512
 2002c98:	294b1804 	addi	r5,r5,11360
 2002c9c:	2002edc1 	jmpi	2002edc <_fwalk>

02002ca0 <_cleanup_r>:
 2002ca0:	01408034 	movhi	r5,512
 2002ca4:	294d4104 	addi	r5,r5,13572
 2002ca8:	2002edc1 	jmpi	2002edc <_fwalk>

02002cac <_cleanup>:
 2002cac:	00808074 	movhi	r2,513
 2002cb0:	10889b04 	addi	r2,r2,8812
 2002cb4:	11000017 	ldw	r4,0(r2)
 2002cb8:	2002ca01 	jmpi	2002ca0 <_cleanup_r>

02002cbc <__sfmoreglue>:
 2002cbc:	defffc04 	addi	sp,sp,-16
 2002cc0:	dc400115 	stw	r17,4(sp)
 2002cc4:	2c401724 	muli	r17,r5,92
 2002cc8:	dc800215 	stw	r18,8(sp)
 2002ccc:	2825883a 	mov	r18,r5
 2002cd0:	89400304 	addi	r5,r17,12
 2002cd4:	dc000015 	stw	r16,0(sp)
 2002cd8:	dfc00315 	stw	ra,12(sp)
 2002cdc:	2000ddc0 	call	2000ddc <_malloc_r>
 2002ce0:	0021883a 	mov	r16,zero
 2002ce4:	880d883a 	mov	r6,r17
 2002ce8:	000b883a 	mov	r5,zero
 2002cec:	10000626 	beq	r2,zero,2002d08 <__sfmoreglue+0x4c>
 2002cf0:	11000304 	addi	r4,r2,12
 2002cf4:	14800115 	stw	r18,4(r2)
 2002cf8:	10000015 	stw	zero,0(r2)
 2002cfc:	11000215 	stw	r4,8(r2)
 2002d00:	1021883a 	mov	r16,r2
 2002d04:	20031280 	call	2003128 <memset>
 2002d08:	8005883a 	mov	r2,r16
 2002d0c:	dfc00317 	ldw	ra,12(sp)
 2002d10:	dc800217 	ldw	r18,8(sp)
 2002d14:	dc400117 	ldw	r17,4(sp)
 2002d18:	dc000017 	ldw	r16,0(sp)
 2002d1c:	dec00404 	addi	sp,sp,16
 2002d20:	f800283a 	ret

02002d24 <__sfp>:
 2002d24:	defffd04 	addi	sp,sp,-12
 2002d28:	00808074 	movhi	r2,513
 2002d2c:	10889b04 	addi	r2,r2,8812
 2002d30:	dc000015 	stw	r16,0(sp)
 2002d34:	14000017 	ldw	r16,0(r2)
 2002d38:	dc400115 	stw	r17,4(sp)
 2002d3c:	dfc00215 	stw	ra,8(sp)
 2002d40:	80800e17 	ldw	r2,56(r16)
 2002d44:	2023883a 	mov	r17,r4
 2002d48:	10002626 	beq	r2,zero,2002de4 <__sfp+0xc0>
 2002d4c:	8400b804 	addi	r16,r16,736
 2002d50:	80800117 	ldw	r2,4(r16)
 2002d54:	81000217 	ldw	r4,8(r16)
 2002d58:	10ffffc4 	addi	r3,r2,-1
 2002d5c:	18000916 	blt	r3,zero,2002d84 <__sfp+0x60>
 2002d60:	2080030f 	ldh	r2,12(r4)
 2002d64:	10000b26 	beq	r2,zero,2002d94 <__sfp+0x70>
 2002d68:	017fffc4 	movi	r5,-1
 2002d6c:	00000206 	br	2002d78 <__sfp+0x54>
 2002d70:	2080030f 	ldh	r2,12(r4)
 2002d74:	10000726 	beq	r2,zero,2002d94 <__sfp+0x70>
 2002d78:	18ffffc4 	addi	r3,r3,-1
 2002d7c:	21001704 	addi	r4,r4,92
 2002d80:	197ffb1e 	bne	r3,r5,2002d70 <__sfp+0x4c>
 2002d84:	80800017 	ldw	r2,0(r16)
 2002d88:	10001926 	beq	r2,zero,2002df0 <__sfp+0xcc>
 2002d8c:	1021883a 	mov	r16,r2
 2002d90:	003fef06 	br	2002d50 <__sfp+0x2c>
 2002d94:	00bfffc4 	movi	r2,-1
 2002d98:	00c00044 	movi	r3,1
 2002d9c:	2080038d 	sth	r2,14(r4)
 2002da0:	20c0030d 	sth	r3,12(r4)
 2002da4:	20000015 	stw	zero,0(r4)
 2002da8:	20000215 	stw	zero,8(r4)
 2002dac:	20000115 	stw	zero,4(r4)
 2002db0:	20000415 	stw	zero,16(r4)
 2002db4:	20000515 	stw	zero,20(r4)
 2002db8:	20000615 	stw	zero,24(r4)
 2002dbc:	20000c15 	stw	zero,48(r4)
 2002dc0:	20000d15 	stw	zero,52(r4)
 2002dc4:	20001115 	stw	zero,68(r4)
 2002dc8:	20001215 	stw	zero,72(r4)
 2002dcc:	2005883a 	mov	r2,r4
 2002dd0:	dfc00217 	ldw	ra,8(sp)
 2002dd4:	dc400117 	ldw	r17,4(sp)
 2002dd8:	dc000017 	ldw	r16,0(sp)
 2002ddc:	dec00304 	addi	sp,sp,12
 2002de0:	f800283a 	ret
 2002de4:	8009883a 	mov	r4,r16
 2002de8:	2002bbc0 	call	2002bbc <__sinit>
 2002dec:	003fd706 	br	2002d4c <__sfp+0x28>
 2002df0:	8809883a 	mov	r4,r17
 2002df4:	01400104 	movi	r5,4
 2002df8:	2002cbc0 	call	2002cbc <__sfmoreglue>
 2002dfc:	80800015 	stw	r2,0(r16)
 2002e00:	103fe21e 	bne	r2,zero,2002d8c <__sfp+0x68>
 2002e04:	00800304 	movi	r2,12
 2002e08:	0009883a 	mov	r4,zero
 2002e0c:	88800015 	stw	r2,0(r17)
 2002e10:	003fee06 	br	2002dcc <__sfp+0xa8>

02002e14 <_fwalk_reent>:
 2002e14:	defff704 	addi	sp,sp,-36
 2002e18:	dcc00315 	stw	r19,12(sp)
 2002e1c:	24c0b804 	addi	r19,r4,736
 2002e20:	dd800615 	stw	r22,24(sp)
 2002e24:	dd400515 	stw	r21,20(sp)
 2002e28:	dfc00815 	stw	ra,32(sp)
 2002e2c:	ddc00715 	stw	r23,28(sp)
 2002e30:	dd000415 	stw	r20,16(sp)
 2002e34:	dc800215 	stw	r18,8(sp)
 2002e38:	dc400115 	stw	r17,4(sp)
 2002e3c:	dc000015 	stw	r16,0(sp)
 2002e40:	202b883a 	mov	r21,r4
 2002e44:	282d883a 	mov	r22,r5
 2002e48:	2002bac0 	call	2002bac <__sfp_lock_acquire>
 2002e4c:	98002126 	beq	r19,zero,2002ed4 <_fwalk_reent+0xc0>
 2002e50:	002f883a 	mov	r23,zero
 2002e54:	9c800117 	ldw	r18,4(r19)
 2002e58:	9c000217 	ldw	r16,8(r19)
 2002e5c:	90bfffc4 	addi	r2,r18,-1
 2002e60:	10000d16 	blt	r2,zero,2002e98 <_fwalk_reent+0x84>
 2002e64:	0023883a 	mov	r17,zero
 2002e68:	053fffc4 	movi	r20,-1
 2002e6c:	8080030f 	ldh	r2,12(r16)
 2002e70:	8c400044 	addi	r17,r17,1
 2002e74:	10000626 	beq	r2,zero,2002e90 <_fwalk_reent+0x7c>
 2002e78:	8080038f 	ldh	r2,14(r16)
 2002e7c:	800b883a 	mov	r5,r16
 2002e80:	a809883a 	mov	r4,r21
 2002e84:	15000226 	beq	r2,r20,2002e90 <_fwalk_reent+0x7c>
 2002e88:	b03ee83a 	callr	r22
 2002e8c:	b8aeb03a 	or	r23,r23,r2
 2002e90:	84001704 	addi	r16,r16,92
 2002e94:	947ff51e 	bne	r18,r17,2002e6c <_fwalk_reent+0x58>
 2002e98:	9cc00017 	ldw	r19,0(r19)
 2002e9c:	983fed1e 	bne	r19,zero,2002e54 <_fwalk_reent+0x40>
 2002ea0:	2002bb00 	call	2002bb0 <__sfp_lock_release>
 2002ea4:	b805883a 	mov	r2,r23
 2002ea8:	dfc00817 	ldw	ra,32(sp)
 2002eac:	ddc00717 	ldw	r23,28(sp)
 2002eb0:	dd800617 	ldw	r22,24(sp)
 2002eb4:	dd400517 	ldw	r21,20(sp)
 2002eb8:	dd000417 	ldw	r20,16(sp)
 2002ebc:	dcc00317 	ldw	r19,12(sp)
 2002ec0:	dc800217 	ldw	r18,8(sp)
 2002ec4:	dc400117 	ldw	r17,4(sp)
 2002ec8:	dc000017 	ldw	r16,0(sp)
 2002ecc:	dec00904 	addi	sp,sp,36
 2002ed0:	f800283a 	ret
 2002ed4:	002f883a 	mov	r23,zero
 2002ed8:	003ff106 	br	2002ea0 <_fwalk_reent+0x8c>

02002edc <_fwalk>:
 2002edc:	defff804 	addi	sp,sp,-32
 2002ee0:	dcc00315 	stw	r19,12(sp)
 2002ee4:	24c0b804 	addi	r19,r4,736
 2002ee8:	dd400515 	stw	r21,20(sp)
 2002eec:	dfc00715 	stw	ra,28(sp)
 2002ef0:	dd800615 	stw	r22,24(sp)
 2002ef4:	dd000415 	stw	r20,16(sp)
 2002ef8:	dc800215 	stw	r18,8(sp)
 2002efc:	dc400115 	stw	r17,4(sp)
 2002f00:	dc000015 	stw	r16,0(sp)
 2002f04:	282b883a 	mov	r21,r5
 2002f08:	2002bac0 	call	2002bac <__sfp_lock_acquire>
 2002f0c:	98001f26 	beq	r19,zero,2002f8c <_fwalk+0xb0>
 2002f10:	002d883a 	mov	r22,zero
 2002f14:	9c800117 	ldw	r18,4(r19)
 2002f18:	9c000217 	ldw	r16,8(r19)
 2002f1c:	90bfffc4 	addi	r2,r18,-1
 2002f20:	10000c16 	blt	r2,zero,2002f54 <_fwalk+0x78>
 2002f24:	0023883a 	mov	r17,zero
 2002f28:	053fffc4 	movi	r20,-1
 2002f2c:	8080030f 	ldh	r2,12(r16)
 2002f30:	8c400044 	addi	r17,r17,1
 2002f34:	10000526 	beq	r2,zero,2002f4c <_fwalk+0x70>
 2002f38:	8080038f 	ldh	r2,14(r16)
 2002f3c:	8009883a 	mov	r4,r16
 2002f40:	15000226 	beq	r2,r20,2002f4c <_fwalk+0x70>
 2002f44:	a83ee83a 	callr	r21
 2002f48:	b0acb03a 	or	r22,r22,r2
 2002f4c:	84001704 	addi	r16,r16,92
 2002f50:	947ff61e 	bne	r18,r17,2002f2c <_fwalk+0x50>
 2002f54:	9cc00017 	ldw	r19,0(r19)
 2002f58:	983fee1e 	bne	r19,zero,2002f14 <_fwalk+0x38>
 2002f5c:	2002bb00 	call	2002bb0 <__sfp_lock_release>
 2002f60:	b005883a 	mov	r2,r22
 2002f64:	dfc00717 	ldw	ra,28(sp)
 2002f68:	dd800617 	ldw	r22,24(sp)
 2002f6c:	dd400517 	ldw	r21,20(sp)
 2002f70:	dd000417 	ldw	r20,16(sp)
 2002f74:	dcc00317 	ldw	r19,12(sp)
 2002f78:	dc800217 	ldw	r18,8(sp)
 2002f7c:	dc400117 	ldw	r17,4(sp)
 2002f80:	dc000017 	ldw	r16,0(sp)
 2002f84:	dec00804 	addi	sp,sp,32
 2002f88:	f800283a 	ret
 2002f8c:	002d883a 	mov	r22,zero
 2002f90:	003ff206 	br	2002f5c <_fwalk+0x80>

02002f94 <__smakebuf_r>:
 2002f94:	2880030b 	ldhu	r2,12(r5)
 2002f98:	deffed04 	addi	sp,sp,-76
 2002f9c:	dc401015 	stw	r17,64(sp)
 2002fa0:	1080008c 	andi	r2,r2,2
 2002fa4:	dc000f15 	stw	r16,60(sp)
 2002fa8:	dfc01215 	stw	ra,72(sp)
 2002fac:	dc801115 	stw	r18,68(sp)
 2002fb0:	2821883a 	mov	r16,r5
 2002fb4:	2023883a 	mov	r17,r4
 2002fb8:	10000b26 	beq	r2,zero,2002fe8 <__smakebuf_r+0x54>
 2002fbc:	28c010c4 	addi	r3,r5,67
 2002fc0:	00800044 	movi	r2,1
 2002fc4:	28800515 	stw	r2,20(r5)
 2002fc8:	28c00415 	stw	r3,16(r5)
 2002fcc:	28c00015 	stw	r3,0(r5)
 2002fd0:	dfc01217 	ldw	ra,72(sp)
 2002fd4:	dc801117 	ldw	r18,68(sp)
 2002fd8:	dc401017 	ldw	r17,64(sp)
 2002fdc:	dc000f17 	ldw	r16,60(sp)
 2002fe0:	dec01304 	addi	sp,sp,76
 2002fe4:	f800283a 	ret
 2002fe8:	2940038f 	ldh	r5,14(r5)
 2002fec:	28002116 	blt	r5,zero,2003074 <__smakebuf_r+0xe0>
 2002ff0:	d80d883a 	mov	r6,sp
 2002ff4:	20035180 	call	2003518 <_fstat_r>
 2002ff8:	10001e16 	blt	r2,zero,2003074 <__smakebuf_r+0xe0>
 2002ffc:	d8800117 	ldw	r2,4(sp)
 2003000:	00e00014 	movui	r3,32768
 2003004:	113c000c 	andi	r4,r2,61440
 2003008:	20c03126 	beq	r4,r3,20030d0 <__smakebuf_r+0x13c>
 200300c:	8080030b 	ldhu	r2,12(r16)
 2003010:	00c80004 	movi	r3,8192
 2003014:	10820014 	ori	r2,r2,2048
 2003018:	8080030d 	sth	r2,12(r16)
 200301c:	20c01e26 	beq	r4,r3,2003098 <__smakebuf_r+0x104>
 2003020:	04810004 	movi	r18,1024
 2003024:	8809883a 	mov	r4,r17
 2003028:	900b883a 	mov	r5,r18
 200302c:	2000ddc0 	call	2000ddc <_malloc_r>
 2003030:	1009883a 	mov	r4,r2
 2003034:	10003126 	beq	r2,zero,20030fc <__smakebuf_r+0x168>
 2003038:	80c0030b 	ldhu	r3,12(r16)
 200303c:	00808034 	movhi	r2,512
 2003040:	108b2804 	addi	r2,r2,11424
 2003044:	88800f15 	stw	r2,60(r17)
 2003048:	18c02014 	ori	r3,r3,128
 200304c:	84800515 	stw	r18,20(r16)
 2003050:	80c0030d 	sth	r3,12(r16)
 2003054:	81000415 	stw	r4,16(r16)
 2003058:	81000015 	stw	r4,0(r16)
 200305c:	dfc01217 	ldw	ra,72(sp)
 2003060:	dc801117 	ldw	r18,68(sp)
 2003064:	dc401017 	ldw	r17,64(sp)
 2003068:	dc000f17 	ldw	r16,60(sp)
 200306c:	dec01304 	addi	sp,sp,76
 2003070:	f800283a 	ret
 2003074:	80c0030b 	ldhu	r3,12(r16)
 2003078:	1880200c 	andi	r2,r3,128
 200307c:	10000426 	beq	r2,zero,2003090 <__smakebuf_r+0xfc>
 2003080:	04801004 	movi	r18,64
 2003084:	18820014 	ori	r2,r3,2048
 2003088:	8080030d 	sth	r2,12(r16)
 200308c:	003fe506 	br	2003024 <__smakebuf_r+0x90>
 2003090:	04810004 	movi	r18,1024
 2003094:	003ffb06 	br	2003084 <__smakebuf_r+0xf0>
 2003098:	8140038f 	ldh	r5,14(r16)
 200309c:	8809883a 	mov	r4,r17
 20030a0:	200358c0 	call	200358c <_isatty_r>
 20030a4:	103fde26 	beq	r2,zero,2003020 <__smakebuf_r+0x8c>
 20030a8:	8080030b 	ldhu	r2,12(r16)
 20030ac:	80c010c4 	addi	r3,r16,67
 20030b0:	04810004 	movi	r18,1024
 20030b4:	10800054 	ori	r2,r2,1
 20030b8:	8080030d 	sth	r2,12(r16)
 20030bc:	00800044 	movi	r2,1
 20030c0:	80c00415 	stw	r3,16(r16)
 20030c4:	80800515 	stw	r2,20(r16)
 20030c8:	80c00015 	stw	r3,0(r16)
 20030cc:	003fd506 	br	2003024 <__smakebuf_r+0x90>
 20030d0:	80c00a17 	ldw	r3,40(r16)
 20030d4:	00808034 	movhi	r2,512
 20030d8:	108c7204 	addi	r2,r2,12744
 20030dc:	18bfcb1e 	bne	r3,r2,200300c <__smakebuf_r+0x78>
 20030e0:	8080030b 	ldhu	r2,12(r16)
 20030e4:	00c10004 	movi	r3,1024
 20030e8:	1825883a 	mov	r18,r3
 20030ec:	10c4b03a 	or	r2,r2,r3
 20030f0:	8080030d 	sth	r2,12(r16)
 20030f4:	80c01315 	stw	r3,76(r16)
 20030f8:	003fca06 	br	2003024 <__smakebuf_r+0x90>
 20030fc:	8100030b 	ldhu	r4,12(r16)
 2003100:	2080800c 	andi	r2,r4,512
 2003104:	103fb21e 	bne	r2,zero,2002fd0 <__smakebuf_r+0x3c>
 2003108:	80c010c4 	addi	r3,r16,67
 200310c:	21000094 	ori	r4,r4,2
 2003110:	00800044 	movi	r2,1
 2003114:	80800515 	stw	r2,20(r16)
 2003118:	8100030d 	sth	r4,12(r16)
 200311c:	80c00415 	stw	r3,16(r16)
 2003120:	80c00015 	stw	r3,0(r16)
 2003124:	003faa06 	br	2002fd0 <__smakebuf_r+0x3c>

02003128 <memset>:
 2003128:	008000c4 	movi	r2,3
 200312c:	29403fcc 	andi	r5,r5,255
 2003130:	2007883a 	mov	r3,r4
 2003134:	1180022e 	bgeu	r2,r6,2003140 <memset+0x18>
 2003138:	2084703a 	and	r2,r4,r2
 200313c:	10000826 	beq	r2,zero,2003160 <memset+0x38>
 2003140:	30000526 	beq	r6,zero,2003158 <memset+0x30>
 2003144:	2805883a 	mov	r2,r5
 2003148:	30cd883a 	add	r6,r6,r3
 200314c:	18800005 	stb	r2,0(r3)
 2003150:	18c00044 	addi	r3,r3,1
 2003154:	19bffd1e 	bne	r3,r6,200314c <memset+0x24>
 2003158:	2005883a 	mov	r2,r4
 200315c:	f800283a 	ret
 2003160:	2804923a 	slli	r2,r5,8
 2003164:	020003c4 	movi	r8,15
 2003168:	200f883a 	mov	r7,r4
 200316c:	2884b03a 	or	r2,r5,r2
 2003170:	1006943a 	slli	r3,r2,16
 2003174:	10c6b03a 	or	r3,r2,r3
 2003178:	41800a2e 	bgeu	r8,r6,20031a4 <memset+0x7c>
 200317c:	4005883a 	mov	r2,r8
 2003180:	31bffc04 	addi	r6,r6,-16
 2003184:	38c00015 	stw	r3,0(r7)
 2003188:	38c00115 	stw	r3,4(r7)
 200318c:	38c00215 	stw	r3,8(r7)
 2003190:	38c00315 	stw	r3,12(r7)
 2003194:	39c00404 	addi	r7,r7,16
 2003198:	11bff936 	bltu	r2,r6,2003180 <memset+0x58>
 200319c:	008000c4 	movi	r2,3
 20031a0:	1180052e 	bgeu	r2,r6,20031b8 <memset+0x90>
 20031a4:	31bfff04 	addi	r6,r6,-4
 20031a8:	008000c4 	movi	r2,3
 20031ac:	38c00015 	stw	r3,0(r7)
 20031b0:	39c00104 	addi	r7,r7,4
 20031b4:	11bffb36 	bltu	r2,r6,20031a4 <memset+0x7c>
 20031b8:	3807883a 	mov	r3,r7
 20031bc:	003fe006 	br	2003140 <memset+0x18>

020031c0 <__sclose>:
 20031c0:	2940038f 	ldh	r5,14(r5)
 20031c4:	20033841 	jmpi	2003384 <_close_r>

020031c8 <__sseek>:
 20031c8:	defffe04 	addi	sp,sp,-8
 20031cc:	dc000015 	stw	r16,0(sp)
 20031d0:	2821883a 	mov	r16,r5
 20031d4:	2940038f 	ldh	r5,14(r5)
 20031d8:	dfc00115 	stw	ra,4(sp)
 20031dc:	20035fc0 	call	20035fc <_lseek_r>
 20031e0:	1007883a 	mov	r3,r2
 20031e4:	00bfffc4 	movi	r2,-1
 20031e8:	18800926 	beq	r3,r2,2003210 <__sseek+0x48>
 20031ec:	8080030b 	ldhu	r2,12(r16)
 20031f0:	80c01415 	stw	r3,80(r16)
 20031f4:	10840014 	ori	r2,r2,4096
 20031f8:	8080030d 	sth	r2,12(r16)
 20031fc:	1805883a 	mov	r2,r3
 2003200:	dfc00117 	ldw	ra,4(sp)
 2003204:	dc000017 	ldw	r16,0(sp)
 2003208:	dec00204 	addi	sp,sp,8
 200320c:	f800283a 	ret
 2003210:	8080030b 	ldhu	r2,12(r16)
 2003214:	10bbffcc 	andi	r2,r2,61439
 2003218:	8080030d 	sth	r2,12(r16)
 200321c:	1805883a 	mov	r2,r3
 2003220:	dfc00117 	ldw	ra,4(sp)
 2003224:	dc000017 	ldw	r16,0(sp)
 2003228:	dec00204 	addi	sp,sp,8
 200322c:	f800283a 	ret

02003230 <__swrite>:
 2003230:	2880030b 	ldhu	r2,12(r5)
 2003234:	defffb04 	addi	sp,sp,-20
 2003238:	dcc00315 	stw	r19,12(sp)
 200323c:	1080400c 	andi	r2,r2,256
 2003240:	dc800215 	stw	r18,8(sp)
 2003244:	dc400115 	stw	r17,4(sp)
 2003248:	dc000015 	stw	r16,0(sp)
 200324c:	3027883a 	mov	r19,r6
 2003250:	3825883a 	mov	r18,r7
 2003254:	dfc00415 	stw	ra,16(sp)
 2003258:	2821883a 	mov	r16,r5
 200325c:	000d883a 	mov	r6,zero
 2003260:	01c00084 	movi	r7,2
 2003264:	2023883a 	mov	r17,r4
 2003268:	10000226 	beq	r2,zero,2003274 <__swrite+0x44>
 200326c:	2940038f 	ldh	r5,14(r5)
 2003270:	20035fc0 	call	20035fc <_lseek_r>
 2003274:	8080030b 	ldhu	r2,12(r16)
 2003278:	8140038f 	ldh	r5,14(r16)
 200327c:	8809883a 	mov	r4,r17
 2003280:	10bbffcc 	andi	r2,r2,61439
 2003284:	980d883a 	mov	r6,r19
 2003288:	900f883a 	mov	r7,r18
 200328c:	8080030d 	sth	r2,12(r16)
 2003290:	dfc00417 	ldw	ra,16(sp)
 2003294:	dcc00317 	ldw	r19,12(sp)
 2003298:	dc800217 	ldw	r18,8(sp)
 200329c:	dc400117 	ldw	r17,4(sp)
 20032a0:	dc000017 	ldw	r16,0(sp)
 20032a4:	dec00504 	addi	sp,sp,20
 20032a8:	200330c1 	jmpi	200330c <_write_r>

020032ac <__sread>:
 20032ac:	defffe04 	addi	sp,sp,-8
 20032b0:	dc000015 	stw	r16,0(sp)
 20032b4:	2821883a 	mov	r16,r5
 20032b8:	2940038f 	ldh	r5,14(r5)
 20032bc:	dfc00115 	stw	ra,4(sp)
 20032c0:	20036740 	call	2003674 <_read_r>
 20032c4:	1007883a 	mov	r3,r2
 20032c8:	10000816 	blt	r2,zero,20032ec <__sread+0x40>
 20032cc:	80801417 	ldw	r2,80(r16)
 20032d0:	10c5883a 	add	r2,r2,r3
 20032d4:	80801415 	stw	r2,80(r16)
 20032d8:	1805883a 	mov	r2,r3
 20032dc:	dfc00117 	ldw	ra,4(sp)
 20032e0:	dc000017 	ldw	r16,0(sp)
 20032e4:	dec00204 	addi	sp,sp,8
 20032e8:	f800283a 	ret
 20032ec:	8080030b 	ldhu	r2,12(r16)
 20032f0:	10bbffcc 	andi	r2,r2,61439
 20032f4:	8080030d 	sth	r2,12(r16)
 20032f8:	1805883a 	mov	r2,r3
 20032fc:	dfc00117 	ldw	ra,4(sp)
 2003300:	dc000017 	ldw	r16,0(sp)
 2003304:	dec00204 	addi	sp,sp,8
 2003308:	f800283a 	ret

0200330c <_write_r>:
 200330c:	defffd04 	addi	sp,sp,-12
 2003310:	dc000015 	stw	r16,0(sp)
 2003314:	04008074 	movhi	r16,513
 2003318:	840fc104 	addi	r16,r16,16132
 200331c:	dc400115 	stw	r17,4(sp)
 2003320:	80000015 	stw	zero,0(r16)
 2003324:	2023883a 	mov	r17,r4
 2003328:	2809883a 	mov	r4,r5
 200332c:	300b883a 	mov	r5,r6
 2003330:	380d883a 	mov	r6,r7
 2003334:	dfc00215 	stw	ra,8(sp)
 2003338:	20040680 	call	2004068 <write>
 200333c:	1007883a 	mov	r3,r2
 2003340:	00bfffc4 	movi	r2,-1
 2003344:	18800626 	beq	r3,r2,2003360 <_write_r+0x54>
 2003348:	1805883a 	mov	r2,r3
 200334c:	dfc00217 	ldw	ra,8(sp)
 2003350:	dc400117 	ldw	r17,4(sp)
 2003354:	dc000017 	ldw	r16,0(sp)
 2003358:	dec00304 	addi	sp,sp,12
 200335c:	f800283a 	ret
 2003360:	80800017 	ldw	r2,0(r16)
 2003364:	103ff826 	beq	r2,zero,2003348 <_write_r+0x3c>
 2003368:	88800015 	stw	r2,0(r17)
 200336c:	1805883a 	mov	r2,r3
 2003370:	dfc00217 	ldw	ra,8(sp)
 2003374:	dc400117 	ldw	r17,4(sp)
 2003378:	dc000017 	ldw	r16,0(sp)
 200337c:	dec00304 	addi	sp,sp,12
 2003380:	f800283a 	ret

02003384 <_close_r>:
 2003384:	defffd04 	addi	sp,sp,-12
 2003388:	dc000015 	stw	r16,0(sp)
 200338c:	04008074 	movhi	r16,513
 2003390:	840fc104 	addi	r16,r16,16132
 2003394:	dc400115 	stw	r17,4(sp)
 2003398:	80000015 	stw	zero,0(r16)
 200339c:	2023883a 	mov	r17,r4
 20033a0:	2809883a 	mov	r4,r5
 20033a4:	dfc00215 	stw	ra,8(sp)
 20033a8:	20036ec0 	call	20036ec <close>
 20033ac:	1007883a 	mov	r3,r2
 20033b0:	00bfffc4 	movi	r2,-1
 20033b4:	18800626 	beq	r3,r2,20033d0 <_close_r+0x4c>
 20033b8:	1805883a 	mov	r2,r3
 20033bc:	dfc00217 	ldw	ra,8(sp)
 20033c0:	dc400117 	ldw	r17,4(sp)
 20033c4:	dc000017 	ldw	r16,0(sp)
 20033c8:	dec00304 	addi	sp,sp,12
 20033cc:	f800283a 	ret
 20033d0:	80800017 	ldw	r2,0(r16)
 20033d4:	103ff826 	beq	r2,zero,20033b8 <_close_r+0x34>
 20033d8:	88800015 	stw	r2,0(r17)
 20033dc:	1805883a 	mov	r2,r3
 20033e0:	dfc00217 	ldw	ra,8(sp)
 20033e4:	dc400117 	ldw	r17,4(sp)
 20033e8:	dc000017 	ldw	r16,0(sp)
 20033ec:	dec00304 	addi	sp,sp,12
 20033f0:	f800283a 	ret

020033f4 <_fclose_r>:
 20033f4:	defffc04 	addi	sp,sp,-16
 20033f8:	dc400115 	stw	r17,4(sp)
 20033fc:	dc000015 	stw	r16,0(sp)
 2003400:	dfc00315 	stw	ra,12(sp)
 2003404:	dc800215 	stw	r18,8(sp)
 2003408:	2821883a 	mov	r16,r5
 200340c:	2023883a 	mov	r17,r4
 2003410:	28002926 	beq	r5,zero,20034b8 <_fclose_r+0xc4>
 2003414:	2002bac0 	call	2002bac <__sfp_lock_acquire>
 2003418:	88000226 	beq	r17,zero,2003424 <_fclose_r+0x30>
 200341c:	88800e17 	ldw	r2,56(r17)
 2003420:	10002d26 	beq	r2,zero,20034d8 <_fclose_r+0xe4>
 2003424:	8080030f 	ldh	r2,12(r16)
 2003428:	10002226 	beq	r2,zero,20034b4 <_fclose_r+0xc0>
 200342c:	8809883a 	mov	r4,r17
 2003430:	800b883a 	mov	r5,r16
 2003434:	20029240 	call	2002924 <_fflush_r>
 2003438:	1025883a 	mov	r18,r2
 200343c:	80800b17 	ldw	r2,44(r16)
 2003440:	10000426 	beq	r2,zero,2003454 <_fclose_r+0x60>
 2003444:	81400717 	ldw	r5,28(r16)
 2003448:	8809883a 	mov	r4,r17
 200344c:	103ee83a 	callr	r2
 2003450:	10002a16 	blt	r2,zero,20034fc <_fclose_r+0x108>
 2003454:	8080030b 	ldhu	r2,12(r16)
 2003458:	1080200c 	andi	r2,r2,128
 200345c:	1000231e 	bne	r2,zero,20034ec <_fclose_r+0xf8>
 2003460:	81400c17 	ldw	r5,48(r16)
 2003464:	28000526 	beq	r5,zero,200347c <_fclose_r+0x88>
 2003468:	80801004 	addi	r2,r16,64
 200346c:	28800226 	beq	r5,r2,2003478 <_fclose_r+0x84>
 2003470:	8809883a 	mov	r4,r17
 2003474:	20017e00 	call	20017e0 <_free_r>
 2003478:	80000c15 	stw	zero,48(r16)
 200347c:	81401117 	ldw	r5,68(r16)
 2003480:	28000326 	beq	r5,zero,2003490 <_fclose_r+0x9c>
 2003484:	8809883a 	mov	r4,r17
 2003488:	20017e00 	call	20017e0 <_free_r>
 200348c:	80001115 	stw	zero,68(r16)
 2003490:	8000030d 	sth	zero,12(r16)
 2003494:	2002bb00 	call	2002bb0 <__sfp_lock_release>
 2003498:	9005883a 	mov	r2,r18
 200349c:	dfc00317 	ldw	ra,12(sp)
 20034a0:	dc800217 	ldw	r18,8(sp)
 20034a4:	dc400117 	ldw	r17,4(sp)
 20034a8:	dc000017 	ldw	r16,0(sp)
 20034ac:	dec00404 	addi	sp,sp,16
 20034b0:	f800283a 	ret
 20034b4:	2002bb00 	call	2002bb0 <__sfp_lock_release>
 20034b8:	0025883a 	mov	r18,zero
 20034bc:	9005883a 	mov	r2,r18
 20034c0:	dfc00317 	ldw	ra,12(sp)
 20034c4:	dc800217 	ldw	r18,8(sp)
 20034c8:	dc400117 	ldw	r17,4(sp)
 20034cc:	dc000017 	ldw	r16,0(sp)
 20034d0:	dec00404 	addi	sp,sp,16
 20034d4:	f800283a 	ret
 20034d8:	8809883a 	mov	r4,r17
 20034dc:	2002bbc0 	call	2002bbc <__sinit>
 20034e0:	8080030f 	ldh	r2,12(r16)
 20034e4:	103fd11e 	bne	r2,zero,200342c <_fclose_r+0x38>
 20034e8:	003ff206 	br	20034b4 <_fclose_r+0xc0>
 20034ec:	81400417 	ldw	r5,16(r16)
 20034f0:	8809883a 	mov	r4,r17
 20034f4:	20017e00 	call	20017e0 <_free_r>
 20034f8:	003fd906 	br	2003460 <_fclose_r+0x6c>
 20034fc:	04bfffc4 	movi	r18,-1
 2003500:	003fd406 	br	2003454 <_fclose_r+0x60>

02003504 <fclose>:
 2003504:	00808074 	movhi	r2,513
 2003508:	10889a04 	addi	r2,r2,8808
 200350c:	200b883a 	mov	r5,r4
 2003510:	11000017 	ldw	r4,0(r2)
 2003514:	20033f41 	jmpi	20033f4 <_fclose_r>

02003518 <_fstat_r>:
 2003518:	defffd04 	addi	sp,sp,-12
 200351c:	dc000015 	stw	r16,0(sp)
 2003520:	04008074 	movhi	r16,513
 2003524:	840fc104 	addi	r16,r16,16132
 2003528:	dc400115 	stw	r17,4(sp)
 200352c:	80000015 	stw	zero,0(r16)
 2003530:	2023883a 	mov	r17,r4
 2003534:	2809883a 	mov	r4,r5
 2003538:	300b883a 	mov	r5,r6
 200353c:	dfc00215 	stw	ra,8(sp)
 2003540:	20038740 	call	2003874 <fstat>
 2003544:	1007883a 	mov	r3,r2
 2003548:	00bfffc4 	movi	r2,-1
 200354c:	18800626 	beq	r3,r2,2003568 <_fstat_r+0x50>
 2003550:	1805883a 	mov	r2,r3
 2003554:	dfc00217 	ldw	ra,8(sp)
 2003558:	dc400117 	ldw	r17,4(sp)
 200355c:	dc000017 	ldw	r16,0(sp)
 2003560:	dec00304 	addi	sp,sp,12
 2003564:	f800283a 	ret
 2003568:	80800017 	ldw	r2,0(r16)
 200356c:	103ff826 	beq	r2,zero,2003550 <_fstat_r+0x38>
 2003570:	88800015 	stw	r2,0(r17)
 2003574:	1805883a 	mov	r2,r3
 2003578:	dfc00217 	ldw	ra,8(sp)
 200357c:	dc400117 	ldw	r17,4(sp)
 2003580:	dc000017 	ldw	r16,0(sp)
 2003584:	dec00304 	addi	sp,sp,12
 2003588:	f800283a 	ret

0200358c <_isatty_r>:
 200358c:	defffd04 	addi	sp,sp,-12
 2003590:	dc000015 	stw	r16,0(sp)
 2003594:	04008074 	movhi	r16,513
 2003598:	840fc104 	addi	r16,r16,16132
 200359c:	dc400115 	stw	r17,4(sp)
 20035a0:	80000015 	stw	zero,0(r16)
 20035a4:	2023883a 	mov	r17,r4
 20035a8:	2809883a 	mov	r4,r5
 20035ac:	dfc00215 	stw	ra,8(sp)
 20035b0:	20039a80 	call	20039a8 <isatty>
 20035b4:	1007883a 	mov	r3,r2
 20035b8:	00bfffc4 	movi	r2,-1
 20035bc:	18800626 	beq	r3,r2,20035d8 <_isatty_r+0x4c>
 20035c0:	1805883a 	mov	r2,r3
 20035c4:	dfc00217 	ldw	ra,8(sp)
 20035c8:	dc400117 	ldw	r17,4(sp)
 20035cc:	dc000017 	ldw	r16,0(sp)
 20035d0:	dec00304 	addi	sp,sp,12
 20035d4:	f800283a 	ret
 20035d8:	80800017 	ldw	r2,0(r16)
 20035dc:	103ff826 	beq	r2,zero,20035c0 <_isatty_r+0x34>
 20035e0:	88800015 	stw	r2,0(r17)
 20035e4:	1805883a 	mov	r2,r3
 20035e8:	dfc00217 	ldw	ra,8(sp)
 20035ec:	dc400117 	ldw	r17,4(sp)
 20035f0:	dc000017 	ldw	r16,0(sp)
 20035f4:	dec00304 	addi	sp,sp,12
 20035f8:	f800283a 	ret

020035fc <_lseek_r>:
 20035fc:	defffd04 	addi	sp,sp,-12
 2003600:	dc000015 	stw	r16,0(sp)
 2003604:	04008074 	movhi	r16,513
 2003608:	840fc104 	addi	r16,r16,16132
 200360c:	dc400115 	stw	r17,4(sp)
 2003610:	80000015 	stw	zero,0(r16)
 2003614:	2023883a 	mov	r17,r4
 2003618:	2809883a 	mov	r4,r5
 200361c:	300b883a 	mov	r5,r6
 2003620:	380d883a 	mov	r6,r7
 2003624:	dfc00215 	stw	ra,8(sp)
 2003628:	2003bb40 	call	2003bb4 <lseek>
 200362c:	1007883a 	mov	r3,r2
 2003630:	00bfffc4 	movi	r2,-1
 2003634:	18800626 	beq	r3,r2,2003650 <_lseek_r+0x54>
 2003638:	1805883a 	mov	r2,r3
 200363c:	dfc00217 	ldw	ra,8(sp)
 2003640:	dc400117 	ldw	r17,4(sp)
 2003644:	dc000017 	ldw	r16,0(sp)
 2003648:	dec00304 	addi	sp,sp,12
 200364c:	f800283a 	ret
 2003650:	80800017 	ldw	r2,0(r16)
 2003654:	103ff826 	beq	r2,zero,2003638 <_lseek_r+0x3c>
 2003658:	88800015 	stw	r2,0(r17)
 200365c:	1805883a 	mov	r2,r3
 2003660:	dfc00217 	ldw	ra,8(sp)
 2003664:	dc400117 	ldw	r17,4(sp)
 2003668:	dc000017 	ldw	r16,0(sp)
 200366c:	dec00304 	addi	sp,sp,12
 2003670:	f800283a 	ret

02003674 <_read_r>:
 2003674:	defffd04 	addi	sp,sp,-12
 2003678:	dc000015 	stw	r16,0(sp)
 200367c:	04008074 	movhi	r16,513
 2003680:	840fc104 	addi	r16,r16,16132
 2003684:	dc400115 	stw	r17,4(sp)
 2003688:	80000015 	stw	zero,0(r16)
 200368c:	2023883a 	mov	r17,r4
 2003690:	2809883a 	mov	r4,r5
 2003694:	300b883a 	mov	r5,r6
 2003698:	380d883a 	mov	r6,r7
 200369c:	dfc00215 	stw	ra,8(sp)
 20036a0:	2003dcc0 	call	2003dcc <read>
 20036a4:	1007883a 	mov	r3,r2
 20036a8:	00bfffc4 	movi	r2,-1
 20036ac:	18800626 	beq	r3,r2,20036c8 <_read_r+0x54>
 20036b0:	1805883a 	mov	r2,r3
 20036b4:	dfc00217 	ldw	ra,8(sp)
 20036b8:	dc400117 	ldw	r17,4(sp)
 20036bc:	dc000017 	ldw	r16,0(sp)
 20036c0:	dec00304 	addi	sp,sp,12
 20036c4:	f800283a 	ret
 20036c8:	80800017 	ldw	r2,0(r16)
 20036cc:	103ff826 	beq	r2,zero,20036b0 <_read_r+0x3c>
 20036d0:	88800015 	stw	r2,0(r17)
 20036d4:	1805883a 	mov	r2,r3
 20036d8:	dfc00217 	ldw	ra,8(sp)
 20036dc:	dc400117 	ldw	r17,4(sp)
 20036e0:	dc000017 	ldw	r16,0(sp)
 20036e4:	dec00304 	addi	sp,sp,12
 20036e8:	f800283a 	ret

020036ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20036ec:	defff804 	addi	sp,sp,-32
 20036f0:	dfc00715 	stw	ra,28(sp)
 20036f4:	df000615 	stw	fp,24(sp)
 20036f8:	df000604 	addi	fp,sp,24
 20036fc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2003700:	e0bffc17 	ldw	r2,-16(fp)
 2003704:	1004803a 	cmplt	r2,r2,zero
 2003708:	1000081e 	bne	r2,zero,200372c <close+0x40>
 200370c:	e0bffc17 	ldw	r2,-16(fp)
 2003710:	10800324 	muli	r2,r2,12
 2003714:	1007883a 	mov	r3,r2
 2003718:	00808074 	movhi	r2,513
 200371c:	1083dc04 	addi	r2,r2,3952
 2003720:	1887883a 	add	r3,r3,r2
 2003724:	e0ffff15 	stw	r3,-4(fp)
 2003728:	00000106 	br	2003730 <close+0x44>
 200372c:	e03fff15 	stw	zero,-4(fp)
 2003730:	e0bfff17 	ldw	r2,-4(fp)
 2003734:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2003738:	e0bffb17 	ldw	r2,-20(fp)
 200373c:	1005003a 	cmpeq	r2,r2,zero
 2003740:	10001d1e 	bne	r2,zero,20037b8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2003744:	e0bffb17 	ldw	r2,-20(fp)
 2003748:	10800017 	ldw	r2,0(r2)
 200374c:	10800417 	ldw	r2,16(r2)
 2003750:	1005003a 	cmpeq	r2,r2,zero
 2003754:	1000071e 	bne	r2,zero,2003774 <close+0x88>
 2003758:	e0bffb17 	ldw	r2,-20(fp)
 200375c:	10800017 	ldw	r2,0(r2)
 2003760:	10800417 	ldw	r2,16(r2)
 2003764:	e13ffb17 	ldw	r4,-20(fp)
 2003768:	103ee83a 	callr	r2
 200376c:	e0bffe15 	stw	r2,-8(fp)
 2003770:	00000106 	br	2003778 <close+0x8c>
 2003774:	e03ffe15 	stw	zero,-8(fp)
 2003778:	e0bffe17 	ldw	r2,-8(fp)
 200377c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2003780:	e13ffc17 	ldw	r4,-16(fp)
 2003784:	2003f4c0 	call	2003f4c <alt_release_fd>
    if (rval < 0)
 2003788:	e0bffa17 	ldw	r2,-24(fp)
 200378c:	1004403a 	cmpge	r2,r2,zero
 2003790:	1000071e 	bne	r2,zero,20037b0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 2003794:	20037e80 	call	20037e8 <alt_get_errno>
 2003798:	e0fffa17 	ldw	r3,-24(fp)
 200379c:	00c7c83a 	sub	r3,zero,r3
 20037a0:	10c00015 	stw	r3,0(r2)
      return -1;
 20037a4:	00bfffc4 	movi	r2,-1
 20037a8:	e0bffd15 	stw	r2,-12(fp)
 20037ac:	00000806 	br	20037d0 <close+0xe4>
    }
    return 0;
 20037b0:	e03ffd15 	stw	zero,-12(fp)
 20037b4:	00000606 	br	20037d0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20037b8:	20037e80 	call	20037e8 <alt_get_errno>
 20037bc:	1007883a 	mov	r3,r2
 20037c0:	00801444 	movi	r2,81
 20037c4:	18800015 	stw	r2,0(r3)
    return -1;
 20037c8:	00bfffc4 	movi	r2,-1
 20037cc:	e0bffd15 	stw	r2,-12(fp)
 20037d0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 20037d4:	e037883a 	mov	sp,fp
 20037d8:	dfc00117 	ldw	ra,4(sp)
 20037dc:	df000017 	ldw	fp,0(sp)
 20037e0:	dec00204 	addi	sp,sp,8
 20037e4:	f800283a 	ret

020037e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20037e8:	defffd04 	addi	sp,sp,-12
 20037ec:	dfc00215 	stw	ra,8(sp)
 20037f0:	df000115 	stw	fp,4(sp)
 20037f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20037f8:	00808074 	movhi	r2,513
 20037fc:	1088a104 	addi	r2,r2,8836
 2003800:	10800017 	ldw	r2,0(r2)
 2003804:	1005003a 	cmpeq	r2,r2,zero
 2003808:	1000061e 	bne	r2,zero,2003824 <alt_get_errno+0x3c>
 200380c:	00808074 	movhi	r2,513
 2003810:	1088a104 	addi	r2,r2,8836
 2003814:	10800017 	ldw	r2,0(r2)
 2003818:	103ee83a 	callr	r2
 200381c:	e0bfff15 	stw	r2,-4(fp)
 2003820:	00000306 	br	2003830 <alt_get_errno+0x48>
 2003824:	00808074 	movhi	r2,513
 2003828:	108fc104 	addi	r2,r2,16132
 200382c:	e0bfff15 	stw	r2,-4(fp)
 2003830:	e0bfff17 	ldw	r2,-4(fp)
}
 2003834:	e037883a 	mov	sp,fp
 2003838:	dfc00117 	ldw	ra,4(sp)
 200383c:	df000017 	ldw	fp,0(sp)
 2003840:	dec00204 	addi	sp,sp,8
 2003844:	f800283a 	ret

02003848 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2003848:	defffc04 	addi	sp,sp,-16
 200384c:	df000315 	stw	fp,12(sp)
 2003850:	df000304 	addi	fp,sp,12
 2003854:	e13ffd15 	stw	r4,-12(fp)
 2003858:	e17ffe15 	stw	r5,-8(fp)
 200385c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2003860:	e0bfff17 	ldw	r2,-4(fp)
}
 2003864:	e037883a 	mov	sp,fp
 2003868:	df000017 	ldw	fp,0(sp)
 200386c:	dec00104 	addi	sp,sp,4
 2003870:	f800283a 	ret

02003874 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2003874:	defff904 	addi	sp,sp,-28
 2003878:	dfc00615 	stw	ra,24(sp)
 200387c:	df000515 	stw	fp,20(sp)
 2003880:	df000504 	addi	fp,sp,20
 2003884:	e13ffc15 	stw	r4,-16(fp)
 2003888:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200388c:	e0bffc17 	ldw	r2,-16(fp)
 2003890:	1004803a 	cmplt	r2,r2,zero
 2003894:	1000081e 	bne	r2,zero,20038b8 <fstat+0x44>
 2003898:	e0bffc17 	ldw	r2,-16(fp)
 200389c:	10800324 	muli	r2,r2,12
 20038a0:	1007883a 	mov	r3,r2
 20038a4:	00808074 	movhi	r2,513
 20038a8:	1083dc04 	addi	r2,r2,3952
 20038ac:	1887883a 	add	r3,r3,r2
 20038b0:	e0ffff15 	stw	r3,-4(fp)
 20038b4:	00000106 	br	20038bc <fstat+0x48>
 20038b8:	e03fff15 	stw	zero,-4(fp)
 20038bc:	e0bfff17 	ldw	r2,-4(fp)
 20038c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20038c4:	e0bffb17 	ldw	r2,-20(fp)
 20038c8:	1005003a 	cmpeq	r2,r2,zero
 20038cc:	1000121e 	bne	r2,zero,2003918 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 20038d0:	e0bffb17 	ldw	r2,-20(fp)
 20038d4:	10800017 	ldw	r2,0(r2)
 20038d8:	10800817 	ldw	r2,32(r2)
 20038dc:	1005003a 	cmpeq	r2,r2,zero
 20038e0:	1000081e 	bne	r2,zero,2003904 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 20038e4:	e0bffb17 	ldw	r2,-20(fp)
 20038e8:	10800017 	ldw	r2,0(r2)
 20038ec:	10800817 	ldw	r2,32(r2)
 20038f0:	e13ffb17 	ldw	r4,-20(fp)
 20038f4:	e17ffd17 	ldw	r5,-12(fp)
 20038f8:	103ee83a 	callr	r2
 20038fc:	e0bffe15 	stw	r2,-8(fp)
 2003900:	00000b06 	br	2003930 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2003904:	e0fffd17 	ldw	r3,-12(fp)
 2003908:	00880004 	movi	r2,8192
 200390c:	18800115 	stw	r2,4(r3)
      return 0;
 2003910:	e03ffe15 	stw	zero,-8(fp)
 2003914:	00000606 	br	2003930 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2003918:	20039480 	call	2003948 <alt_get_errno>
 200391c:	1007883a 	mov	r3,r2
 2003920:	00801444 	movi	r2,81
 2003924:	18800015 	stw	r2,0(r3)
    return -1;
 2003928:	00bfffc4 	movi	r2,-1
 200392c:	e0bffe15 	stw	r2,-8(fp)
 2003930:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 2003934:	e037883a 	mov	sp,fp
 2003938:	dfc00117 	ldw	ra,4(sp)
 200393c:	df000017 	ldw	fp,0(sp)
 2003940:	dec00204 	addi	sp,sp,8
 2003944:	f800283a 	ret

02003948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003948:	defffd04 	addi	sp,sp,-12
 200394c:	dfc00215 	stw	ra,8(sp)
 2003950:	df000115 	stw	fp,4(sp)
 2003954:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2003958:	00808074 	movhi	r2,513
 200395c:	1088a104 	addi	r2,r2,8836
 2003960:	10800017 	ldw	r2,0(r2)
 2003964:	1005003a 	cmpeq	r2,r2,zero
 2003968:	1000061e 	bne	r2,zero,2003984 <alt_get_errno+0x3c>
 200396c:	00808074 	movhi	r2,513
 2003970:	1088a104 	addi	r2,r2,8836
 2003974:	10800017 	ldw	r2,0(r2)
 2003978:	103ee83a 	callr	r2
 200397c:	e0bfff15 	stw	r2,-4(fp)
 2003980:	00000306 	br	2003990 <alt_get_errno+0x48>
 2003984:	00808074 	movhi	r2,513
 2003988:	108fc104 	addi	r2,r2,16132
 200398c:	e0bfff15 	stw	r2,-4(fp)
 2003990:	e0bfff17 	ldw	r2,-4(fp)
}
 2003994:	e037883a 	mov	sp,fp
 2003998:	dfc00117 	ldw	ra,4(sp)
 200399c:	df000017 	ldw	fp,0(sp)
 20039a0:	dec00204 	addi	sp,sp,8
 20039a4:	f800283a 	ret

020039a8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 20039a8:	deffeb04 	addi	sp,sp,-84
 20039ac:	dfc01415 	stw	ra,80(sp)
 20039b0:	df001315 	stw	fp,76(sp)
 20039b4:	df001304 	addi	fp,sp,76
 20039b8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20039bc:	e0bffd17 	ldw	r2,-12(fp)
 20039c0:	1004803a 	cmplt	r2,r2,zero
 20039c4:	1000081e 	bne	r2,zero,20039e8 <isatty+0x40>
 20039c8:	e0bffd17 	ldw	r2,-12(fp)
 20039cc:	10800324 	muli	r2,r2,12
 20039d0:	1007883a 	mov	r3,r2
 20039d4:	00808074 	movhi	r2,513
 20039d8:	1083dc04 	addi	r2,r2,3952
 20039dc:	1887883a 	add	r3,r3,r2
 20039e0:	e0ffff15 	stw	r3,-4(fp)
 20039e4:	00000106 	br	20039ec <isatty+0x44>
 20039e8:	e03fff15 	stw	zero,-4(fp)
 20039ec:	e0bfff17 	ldw	r2,-4(fp)
 20039f0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 20039f4:	e0bfed17 	ldw	r2,-76(fp)
 20039f8:	1005003a 	cmpeq	r2,r2,zero
 20039fc:	10000f1e 	bne	r2,zero,2003a3c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2003a00:	e0bfed17 	ldw	r2,-76(fp)
 2003a04:	10800017 	ldw	r2,0(r2)
 2003a08:	10800817 	ldw	r2,32(r2)
 2003a0c:	1004c03a 	cmpne	r2,r2,zero
 2003a10:	1000031e 	bne	r2,zero,2003a20 <isatty+0x78>
    {
      return 1;
 2003a14:	00800044 	movi	r2,1
 2003a18:	e0bffe15 	stw	r2,-8(fp)
 2003a1c:	00000c06 	br	2003a50 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2003a20:	e17fee04 	addi	r5,fp,-72
 2003a24:	e13ffd17 	ldw	r4,-12(fp)
 2003a28:	20038740 	call	2003874 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2003a2c:	e0bfef17 	ldw	r2,-68(fp)
 2003a30:	10880020 	cmpeqi	r2,r2,8192
 2003a34:	e0bffe15 	stw	r2,-8(fp)
 2003a38:	00000506 	br	2003a50 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2003a3c:	2003a680 	call	2003a68 <alt_get_errno>
 2003a40:	1007883a 	mov	r3,r2
 2003a44:	00801444 	movi	r2,81
 2003a48:	18800015 	stw	r2,0(r3)
    return 0;
 2003a4c:	e03ffe15 	stw	zero,-8(fp)
 2003a50:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 2003a54:	e037883a 	mov	sp,fp
 2003a58:	dfc00117 	ldw	ra,4(sp)
 2003a5c:	df000017 	ldw	fp,0(sp)
 2003a60:	dec00204 	addi	sp,sp,8
 2003a64:	f800283a 	ret

02003a68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003a68:	defffd04 	addi	sp,sp,-12
 2003a6c:	dfc00215 	stw	ra,8(sp)
 2003a70:	df000115 	stw	fp,4(sp)
 2003a74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2003a78:	00808074 	movhi	r2,513
 2003a7c:	1088a104 	addi	r2,r2,8836
 2003a80:	10800017 	ldw	r2,0(r2)
 2003a84:	1005003a 	cmpeq	r2,r2,zero
 2003a88:	1000061e 	bne	r2,zero,2003aa4 <alt_get_errno+0x3c>
 2003a8c:	00808074 	movhi	r2,513
 2003a90:	1088a104 	addi	r2,r2,8836
 2003a94:	10800017 	ldw	r2,0(r2)
 2003a98:	103ee83a 	callr	r2
 2003a9c:	e0bfff15 	stw	r2,-4(fp)
 2003aa0:	00000306 	br	2003ab0 <alt_get_errno+0x48>
 2003aa4:	00808074 	movhi	r2,513
 2003aa8:	108fc104 	addi	r2,r2,16132
 2003aac:	e0bfff15 	stw	r2,-4(fp)
 2003ab0:	e0bfff17 	ldw	r2,-4(fp)
}
 2003ab4:	e037883a 	mov	sp,fp
 2003ab8:	dfc00117 	ldw	ra,4(sp)
 2003abc:	df000017 	ldw	fp,0(sp)
 2003ac0:	dec00204 	addi	sp,sp,8
 2003ac4:	f800283a 	ret

02003ac8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2003ac8:	defffe04 	addi	sp,sp,-8
 2003acc:	dfc00115 	stw	ra,4(sp)
 2003ad0:	df000015 	stw	fp,0(sp)
 2003ad4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2003ad8:	01008074 	movhi	r4,513
 2003adc:	2108c704 	addi	r4,r4,8988
 2003ae0:	01408074 	movhi	r5,513
 2003ae4:	2941d004 	addi	r5,r5,1856
 2003ae8:	01808074 	movhi	r6,513
 2003aec:	3188c704 	addi	r6,r6,8988
 2003af0:	2003b480 	call	2003b48 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2003af4:	01008034 	movhi	r4,512
 2003af8:	21000804 	addi	r4,r4,32
 2003afc:	01408034 	movhi	r5,512
 2003b00:	29400804 	addi	r5,r5,32
 2003b04:	01808034 	movhi	r6,512
 2003b08:	31806f04 	addi	r6,r6,444
 2003b0c:	2003b480 	call	2003b48 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2003b10:	01008074 	movhi	r4,513
 2003b14:	21011504 	addi	r4,r4,1108
 2003b18:	01408074 	movhi	r5,513
 2003b1c:	29411504 	addi	r5,r5,1108
 2003b20:	01808074 	movhi	r6,513
 2003b24:	3181d004 	addi	r6,r6,1856
 2003b28:	2003b480 	call	2003b48 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2003b2c:	200e8dc0 	call	200e8dc <alt_dcache_flush_all>
  alt_icache_flush_all();
 2003b30:	200ebcc0 	call	200ebcc <alt_icache_flush_all>
}
 2003b34:	e037883a 	mov	sp,fp
 2003b38:	dfc00117 	ldw	ra,4(sp)
 2003b3c:	df000017 	ldw	fp,0(sp)
 2003b40:	dec00204 	addi	sp,sp,8
 2003b44:	f800283a 	ret

02003b48 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2003b48:	defffc04 	addi	sp,sp,-16
 2003b4c:	df000315 	stw	fp,12(sp)
 2003b50:	df000304 	addi	fp,sp,12
 2003b54:	e13ffd15 	stw	r4,-12(fp)
 2003b58:	e17ffe15 	stw	r5,-8(fp)
 2003b5c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2003b60:	e0fffe17 	ldw	r3,-8(fp)
 2003b64:	e0bffd17 	ldw	r2,-12(fp)
 2003b68:	18800e26 	beq	r3,r2,2003ba4 <alt_load_section+0x5c>
  {
    while( to != end )
 2003b6c:	00000a06 	br	2003b98 <alt_load_section+0x50>
    {
      *to++ = *from++;
 2003b70:	e0bffd17 	ldw	r2,-12(fp)
 2003b74:	10c00017 	ldw	r3,0(r2)
 2003b78:	e0bffe17 	ldw	r2,-8(fp)
 2003b7c:	10c00015 	stw	r3,0(r2)
 2003b80:	e0bffe17 	ldw	r2,-8(fp)
 2003b84:	10800104 	addi	r2,r2,4
 2003b88:	e0bffe15 	stw	r2,-8(fp)
 2003b8c:	e0bffd17 	ldw	r2,-12(fp)
 2003b90:	10800104 	addi	r2,r2,4
 2003b94:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2003b98:	e0fffe17 	ldw	r3,-8(fp)
 2003b9c:	e0bfff17 	ldw	r2,-4(fp)
 2003ba0:	18bff31e 	bne	r3,r2,2003b70 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2003ba4:	e037883a 	mov	sp,fp
 2003ba8:	df000017 	ldw	fp,0(sp)
 2003bac:	dec00104 	addi	sp,sp,4
 2003bb0:	f800283a 	ret

02003bb4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2003bb4:	defff804 	addi	sp,sp,-32
 2003bb8:	dfc00715 	stw	ra,28(sp)
 2003bbc:	df000615 	stw	fp,24(sp)
 2003bc0:	df000604 	addi	fp,sp,24
 2003bc4:	e13ffc15 	stw	r4,-16(fp)
 2003bc8:	e17ffd15 	stw	r5,-12(fp)
 2003bcc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2003bd0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003bd4:	e0bffc17 	ldw	r2,-16(fp)
 2003bd8:	1004803a 	cmplt	r2,r2,zero
 2003bdc:	1000081e 	bne	r2,zero,2003c00 <lseek+0x4c>
 2003be0:	e0bffc17 	ldw	r2,-16(fp)
 2003be4:	10800324 	muli	r2,r2,12
 2003be8:	1007883a 	mov	r3,r2
 2003bec:	00808074 	movhi	r2,513
 2003bf0:	1083dc04 	addi	r2,r2,3952
 2003bf4:	1887883a 	add	r3,r3,r2
 2003bf8:	e0ffff15 	stw	r3,-4(fp)
 2003bfc:	00000106 	br	2003c04 <lseek+0x50>
 2003c00:	e03fff15 	stw	zero,-4(fp)
 2003c04:	e0bfff17 	ldw	r2,-4(fp)
 2003c08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 2003c0c:	e0bffb17 	ldw	r2,-20(fp)
 2003c10:	1005003a 	cmpeq	r2,r2,zero
 2003c14:	1000111e 	bne	r2,zero,2003c5c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2003c18:	e0bffb17 	ldw	r2,-20(fp)
 2003c1c:	10800017 	ldw	r2,0(r2)
 2003c20:	10800717 	ldw	r2,28(r2)
 2003c24:	1005003a 	cmpeq	r2,r2,zero
 2003c28:	1000091e 	bne	r2,zero,2003c50 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2003c2c:	e0bffb17 	ldw	r2,-20(fp)
 2003c30:	10800017 	ldw	r2,0(r2)
 2003c34:	10800717 	ldw	r2,28(r2)
 2003c38:	e13ffb17 	ldw	r4,-20(fp)
 2003c3c:	e17ffd17 	ldw	r5,-12(fp)
 2003c40:	e1bffe17 	ldw	r6,-8(fp)
 2003c44:	103ee83a 	callr	r2
 2003c48:	e0bffa15 	stw	r2,-24(fp)
 2003c4c:	00000506 	br	2003c64 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2003c50:	00bfde84 	movi	r2,-134
 2003c54:	e0bffa15 	stw	r2,-24(fp)
 2003c58:	00000206 	br	2003c64 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 2003c5c:	00bfebc4 	movi	r2,-81
 2003c60:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 2003c64:	e0bffa17 	ldw	r2,-24(fp)
 2003c68:	1004403a 	cmpge	r2,r2,zero
 2003c6c:	1000071e 	bne	r2,zero,2003c8c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 2003c70:	2003ca40 	call	2003ca4 <alt_get_errno>
 2003c74:	1007883a 	mov	r3,r2
 2003c78:	e0bffa17 	ldw	r2,-24(fp)
 2003c7c:	0085c83a 	sub	r2,zero,r2
 2003c80:	18800015 	stw	r2,0(r3)
    rc = -1;
 2003c84:	00bfffc4 	movi	r2,-1
 2003c88:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 2003c8c:	e0bffa17 	ldw	r2,-24(fp)
}
 2003c90:	e037883a 	mov	sp,fp
 2003c94:	dfc00117 	ldw	ra,4(sp)
 2003c98:	df000017 	ldw	fp,0(sp)
 2003c9c:	dec00204 	addi	sp,sp,8
 2003ca0:	f800283a 	ret

02003ca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003ca4:	defffd04 	addi	sp,sp,-12
 2003ca8:	dfc00215 	stw	ra,8(sp)
 2003cac:	df000115 	stw	fp,4(sp)
 2003cb0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2003cb4:	00808074 	movhi	r2,513
 2003cb8:	1088a104 	addi	r2,r2,8836
 2003cbc:	10800017 	ldw	r2,0(r2)
 2003cc0:	1005003a 	cmpeq	r2,r2,zero
 2003cc4:	1000061e 	bne	r2,zero,2003ce0 <alt_get_errno+0x3c>
 2003cc8:	00808074 	movhi	r2,513
 2003ccc:	1088a104 	addi	r2,r2,8836
 2003cd0:	10800017 	ldw	r2,0(r2)
 2003cd4:	103ee83a 	callr	r2
 2003cd8:	e0bfff15 	stw	r2,-4(fp)
 2003cdc:	00000306 	br	2003cec <alt_get_errno+0x48>
 2003ce0:	00808074 	movhi	r2,513
 2003ce4:	108fc104 	addi	r2,r2,16132
 2003ce8:	e0bfff15 	stw	r2,-4(fp)
 2003cec:	e0bfff17 	ldw	r2,-4(fp)
}
 2003cf0:	e037883a 	mov	sp,fp
 2003cf4:	dfc00117 	ldw	ra,4(sp)
 2003cf8:	df000017 	ldw	fp,0(sp)
 2003cfc:	dec00204 	addi	sp,sp,8
 2003d00:	f800283a 	ret

02003d04 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2003d04:	defffb04 	addi	sp,sp,-20
 2003d08:	dfc00415 	stw	ra,16(sp)
 2003d0c:	df000315 	stw	fp,12(sp)
 2003d10:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2003d14:	0009883a 	mov	r4,zero
 2003d18:	200c7940 	call	200c794 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2003d1c:	2004df00 	call	2004df0 <OSInit>
 2003d20:	01000044 	movi	r4,1
 2003d24:	2009cb40 	call	2009cb4 <OSSemCreate>
 2003d28:	1007883a 	mov	r3,r2
 2003d2c:	00808074 	movhi	r2,513
 2003d30:	108fc704 	addi	r2,r2,16156
 2003d34:	10c00015 	stw	r3,0(r2)
 2003d38:	01000044 	movi	r4,1
 2003d3c:	2009cb40 	call	2009cb4 <OSSemCreate>
 2003d40:	1007883a 	mov	r3,r2
 2003d44:	00808074 	movhi	r2,513
 2003d48:	108fc904 	addi	r2,r2,16164
 2003d4c:	10c00015 	stw	r3,0(r2)
 2003d50:	00808074 	movhi	r2,513
 2003d54:	108fc204 	addi	r2,r2,16136
 2003d58:	e0bffd15 	stw	r2,-12(fp)
 2003d5c:	00800044 	movi	r2,1
 2003d60:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 2003d64:	e13ffe0b 	ldhu	r4,-8(fp)
 2003d68:	2009cb40 	call	2009cb4 <OSSemCreate>
 2003d6c:	1007883a 	mov	r3,r2
 2003d70:	e0bffd17 	ldw	r2,-12(fp)
 2003d74:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2003d78:	200c7c80 	call	200c7c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2003d7c:	01008074 	movhi	r4,513
 2003d80:	21017304 	addi	r4,r4,1484
 2003d84:	01408074 	movhi	r5,513
 2003d88:	29417304 	addi	r5,r5,1484
 2003d8c:	01808074 	movhi	r6,513
 2003d90:	31817304 	addi	r6,r6,1484
 2003d94:	200ef8c0 	call	200ef8c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2003d98:	200ea340 	call	200ea34 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2003d9c:	01008074 	movhi	r4,513
 2003da0:	213aa604 	addi	r4,r4,-5480
 2003da4:	200fee80 	call	200fee8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2003da8:	d1272f17 	ldw	r4,-25412(gp)
 2003dac:	d1673017 	ldw	r5,-25408(gp)
 2003db0:	d1a73117 	ldw	r6,-25404(gp)
 2003db4:	20008400 	call	2000840 <main>
 2003db8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2003dbc:	01000044 	movi	r4,1
 2003dc0:	20036ec0 	call	20036ec <close>
  exit (result);
 2003dc4:	e13fff17 	ldw	r4,-4(fp)
 2003dc8:	200fefc0 	call	200fefc <exit>

02003dcc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2003dcc:	defff704 	addi	sp,sp,-36
 2003dd0:	dfc00815 	stw	ra,32(sp)
 2003dd4:	df000715 	stw	fp,28(sp)
 2003dd8:	df000704 	addi	fp,sp,28
 2003ddc:	e13ffb15 	stw	r4,-20(fp)
 2003de0:	e17ffc15 	stw	r5,-16(fp)
 2003de4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003de8:	e0bffb17 	ldw	r2,-20(fp)
 2003dec:	1004803a 	cmplt	r2,r2,zero
 2003df0:	1000081e 	bne	r2,zero,2003e14 <read+0x48>
 2003df4:	e0bffb17 	ldw	r2,-20(fp)
 2003df8:	10800324 	muli	r2,r2,12
 2003dfc:	1007883a 	mov	r3,r2
 2003e00:	00808074 	movhi	r2,513
 2003e04:	1083dc04 	addi	r2,r2,3952
 2003e08:	1887883a 	add	r3,r3,r2
 2003e0c:	e0ffff15 	stw	r3,-4(fp)
 2003e10:	00000106 	br	2003e18 <read+0x4c>
 2003e14:	e03fff15 	stw	zero,-4(fp)
 2003e18:	e0bfff17 	ldw	r2,-4(fp)
 2003e1c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 2003e20:	e0bffa17 	ldw	r2,-24(fp)
 2003e24:	1005003a 	cmpeq	r2,r2,zero
 2003e28:	1000241e 	bne	r2,zero,2003ebc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2003e2c:	e0bffa17 	ldw	r2,-24(fp)
 2003e30:	10800217 	ldw	r2,8(r2)
 2003e34:	108000cc 	andi	r2,r2,3
 2003e38:	10800060 	cmpeqi	r2,r2,1
 2003e3c:	10001a1e 	bne	r2,zero,2003ea8 <read+0xdc>
 2003e40:	e0bffa17 	ldw	r2,-24(fp)
 2003e44:	10800017 	ldw	r2,0(r2)
 2003e48:	10800517 	ldw	r2,20(r2)
 2003e4c:	1005003a 	cmpeq	r2,r2,zero
 2003e50:	1000151e 	bne	r2,zero,2003ea8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2003e54:	e0bffa17 	ldw	r2,-24(fp)
 2003e58:	10800017 	ldw	r2,0(r2)
 2003e5c:	10800517 	ldw	r2,20(r2)
 2003e60:	e17ffc17 	ldw	r5,-16(fp)
 2003e64:	e1bffd17 	ldw	r6,-12(fp)
 2003e68:	e13ffa17 	ldw	r4,-24(fp)
 2003e6c:	103ee83a 	callr	r2
 2003e70:	e0bff915 	stw	r2,-28(fp)
 2003e74:	e0bff917 	ldw	r2,-28(fp)
 2003e78:	1004403a 	cmpge	r2,r2,zero
 2003e7c:	1000071e 	bne	r2,zero,2003e9c <read+0xd0>
        {
          ALT_ERRNO = -rval;
 2003e80:	2003eec0 	call	2003eec <alt_get_errno>
 2003e84:	e0fff917 	ldw	r3,-28(fp)
 2003e88:	00c7c83a 	sub	r3,zero,r3
 2003e8c:	10c00015 	stw	r3,0(r2)
          return -1;
 2003e90:	00bfffc4 	movi	r2,-1
 2003e94:	e0bffe15 	stw	r2,-8(fp)
 2003e98:	00000e06 	br	2003ed4 <read+0x108>
        }
        return rval;
 2003e9c:	e0bff917 	ldw	r2,-28(fp)
 2003ea0:	e0bffe15 	stw	r2,-8(fp)
 2003ea4:	00000b06 	br	2003ed4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2003ea8:	2003eec0 	call	2003eec <alt_get_errno>
 2003eac:	1007883a 	mov	r3,r2
 2003eb0:	00800344 	movi	r2,13
 2003eb4:	18800015 	stw	r2,0(r3)
 2003eb8:	00000406 	br	2003ecc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2003ebc:	2003eec0 	call	2003eec <alt_get_errno>
 2003ec0:	1007883a 	mov	r3,r2
 2003ec4:	00801444 	movi	r2,81
 2003ec8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2003ecc:	00bfffc4 	movi	r2,-1
 2003ed0:	e0bffe15 	stw	r2,-8(fp)
 2003ed4:	e0bffe17 	ldw	r2,-8(fp)
}
 2003ed8:	e037883a 	mov	sp,fp
 2003edc:	dfc00117 	ldw	ra,4(sp)
 2003ee0:	df000017 	ldw	fp,0(sp)
 2003ee4:	dec00204 	addi	sp,sp,8
 2003ee8:	f800283a 	ret

02003eec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003eec:	defffd04 	addi	sp,sp,-12
 2003ef0:	dfc00215 	stw	ra,8(sp)
 2003ef4:	df000115 	stw	fp,4(sp)
 2003ef8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2003efc:	00808074 	movhi	r2,513
 2003f00:	1088a104 	addi	r2,r2,8836
 2003f04:	10800017 	ldw	r2,0(r2)
 2003f08:	1005003a 	cmpeq	r2,r2,zero
 2003f0c:	1000061e 	bne	r2,zero,2003f28 <alt_get_errno+0x3c>
 2003f10:	00808074 	movhi	r2,513
 2003f14:	1088a104 	addi	r2,r2,8836
 2003f18:	10800017 	ldw	r2,0(r2)
 2003f1c:	103ee83a 	callr	r2
 2003f20:	e0bfff15 	stw	r2,-4(fp)
 2003f24:	00000306 	br	2003f34 <alt_get_errno+0x48>
 2003f28:	00808074 	movhi	r2,513
 2003f2c:	108fc104 	addi	r2,r2,16132
 2003f30:	e0bfff15 	stw	r2,-4(fp)
 2003f34:	e0bfff17 	ldw	r2,-4(fp)
}
 2003f38:	e037883a 	mov	sp,fp
 2003f3c:	dfc00117 	ldw	ra,4(sp)
 2003f40:	df000017 	ldw	fp,0(sp)
 2003f44:	dec00204 	addi	sp,sp,8
 2003f48:	f800283a 	ret

02003f4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2003f4c:	defffe04 	addi	sp,sp,-8
 2003f50:	df000115 	stw	fp,4(sp)
 2003f54:	df000104 	addi	fp,sp,4
 2003f58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2003f5c:	e0bfff17 	ldw	r2,-4(fp)
 2003f60:	108000d0 	cmplti	r2,r2,3
 2003f64:	10000d1e 	bne	r2,zero,2003f9c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2003f68:	e0bfff17 	ldw	r2,-4(fp)
 2003f6c:	00c08074 	movhi	r3,513
 2003f70:	18c3dc04 	addi	r3,r3,3952
 2003f74:	10800324 	muli	r2,r2,12
 2003f78:	10c5883a 	add	r2,r2,r3
 2003f7c:	10800204 	addi	r2,r2,8
 2003f80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2003f84:	e0bfff17 	ldw	r2,-4(fp)
 2003f88:	00c08074 	movhi	r3,513
 2003f8c:	18c3dc04 	addi	r3,r3,3952
 2003f90:	10800324 	muli	r2,r2,12
 2003f94:	10c5883a 	add	r2,r2,r3
 2003f98:	10000015 	stw	zero,0(r2)
  }
}
 2003f9c:	e037883a 	mov	sp,fp
 2003fa0:	df000017 	ldw	fp,0(sp)
 2003fa4:	dec00104 	addi	sp,sp,4
 2003fa8:	f800283a 	ret

02003fac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2003fac:	defff804 	addi	sp,sp,-32
 2003fb0:	df000715 	stw	fp,28(sp)
 2003fb4:	df000704 	addi	fp,sp,28
 2003fb8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003fbc:	0005303a 	rdctl	r2,status
 2003fc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003fc4:	e0fffb17 	ldw	r3,-20(fp)
 2003fc8:	00bfff84 	movi	r2,-2
 2003fcc:	1884703a 	and	r2,r3,r2
 2003fd0:	1001703a 	wrctl	status,r2
  
  return context;
 2003fd4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2003fd8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2003fdc:	d0a00e17 	ldw	r2,-32712(gp)
 2003fe0:	10c000c4 	addi	r3,r2,3
 2003fe4:	00bfff04 	movi	r2,-4
 2003fe8:	1884703a 	and	r2,r3,r2
 2003fec:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2003ff0:	d0e00e17 	ldw	r3,-32712(gp)
 2003ff4:	e0bffe17 	ldw	r2,-8(fp)
 2003ff8:	1887883a 	add	r3,r3,r2
 2003ffc:	00810034 	movhi	r2,1024
 2004000:	10800004 	addi	r2,r2,0
 2004004:	10c0072e 	bgeu	r2,r3,2004024 <sbrk+0x78>
 2004008:	e0bffd17 	ldw	r2,-12(fp)
 200400c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004010:	e0bffa17 	ldw	r2,-24(fp)
 2004014:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2004018:	00bfffc4 	movi	r2,-1
 200401c:	e0bfff15 	stw	r2,-4(fp)
 2004020:	00000c06 	br	2004054 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 2004024:	d0a00e17 	ldw	r2,-32712(gp)
 2004028:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 200402c:	d0e00e17 	ldw	r3,-32712(gp)
 2004030:	e0bffe17 	ldw	r2,-8(fp)
 2004034:	1885883a 	add	r2,r3,r2
 2004038:	d0a00e15 	stw	r2,-32712(gp)
 200403c:	e0bffd17 	ldw	r2,-12(fp)
 2004040:	e0bff915 	stw	r2,-28(fp)
 2004044:	e0bff917 	ldw	r2,-28(fp)
 2004048:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200404c:	e0bffc17 	ldw	r2,-16(fp)
 2004050:	e0bfff15 	stw	r2,-4(fp)
 2004054:	e0bfff17 	ldw	r2,-4(fp)
} 
 2004058:	e037883a 	mov	sp,fp
 200405c:	df000017 	ldw	fp,0(sp)
 2004060:	dec00104 	addi	sp,sp,4
 2004064:	f800283a 	ret

02004068 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2004068:	defff704 	addi	sp,sp,-36
 200406c:	dfc00815 	stw	ra,32(sp)
 2004070:	df000715 	stw	fp,28(sp)
 2004074:	df000704 	addi	fp,sp,28
 2004078:	e13ffb15 	stw	r4,-20(fp)
 200407c:	e17ffc15 	stw	r5,-16(fp)
 2004080:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2004084:	e0bffb17 	ldw	r2,-20(fp)
 2004088:	1004803a 	cmplt	r2,r2,zero
 200408c:	1000081e 	bne	r2,zero,20040b0 <write+0x48>
 2004090:	e0bffb17 	ldw	r2,-20(fp)
 2004094:	10800324 	muli	r2,r2,12
 2004098:	1007883a 	mov	r3,r2
 200409c:	00808074 	movhi	r2,513
 20040a0:	1083dc04 	addi	r2,r2,3952
 20040a4:	1887883a 	add	r3,r3,r2
 20040a8:	e0ffff15 	stw	r3,-4(fp)
 20040ac:	00000106 	br	20040b4 <write+0x4c>
 20040b0:	e03fff15 	stw	zero,-4(fp)
 20040b4:	e0bfff17 	ldw	r2,-4(fp)
 20040b8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 20040bc:	e0bffa17 	ldw	r2,-24(fp)
 20040c0:	1005003a 	cmpeq	r2,r2,zero
 20040c4:	1000241e 	bne	r2,zero,2004158 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 20040c8:	e0bffa17 	ldw	r2,-24(fp)
 20040cc:	10800217 	ldw	r2,8(r2)
 20040d0:	108000cc 	andi	r2,r2,3
 20040d4:	1005003a 	cmpeq	r2,r2,zero
 20040d8:	10001a1e 	bne	r2,zero,2004144 <write+0xdc>
 20040dc:	e0bffa17 	ldw	r2,-24(fp)
 20040e0:	10800017 	ldw	r2,0(r2)
 20040e4:	10800617 	ldw	r2,24(r2)
 20040e8:	1005003a 	cmpeq	r2,r2,zero
 20040ec:	1000151e 	bne	r2,zero,2004144 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 20040f0:	e0bffa17 	ldw	r2,-24(fp)
 20040f4:	10800017 	ldw	r2,0(r2)
 20040f8:	10800617 	ldw	r2,24(r2)
 20040fc:	e17ffc17 	ldw	r5,-16(fp)
 2004100:	e1bffd17 	ldw	r6,-12(fp)
 2004104:	e13ffa17 	ldw	r4,-24(fp)
 2004108:	103ee83a 	callr	r2
 200410c:	e0bff915 	stw	r2,-28(fp)
 2004110:	e0bff917 	ldw	r2,-28(fp)
 2004114:	1004403a 	cmpge	r2,r2,zero
 2004118:	1000071e 	bne	r2,zero,2004138 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 200411c:	20041880 	call	2004188 <alt_get_errno>
 2004120:	e0fff917 	ldw	r3,-28(fp)
 2004124:	00c7c83a 	sub	r3,zero,r3
 2004128:	10c00015 	stw	r3,0(r2)
        return -1;
 200412c:	00bfffc4 	movi	r2,-1
 2004130:	e0bffe15 	stw	r2,-8(fp)
 2004134:	00000e06 	br	2004170 <write+0x108>
      }
      return rval;
 2004138:	e0bff917 	ldw	r2,-28(fp)
 200413c:	e0bffe15 	stw	r2,-8(fp)
 2004140:	00000b06 	br	2004170 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2004144:	20041880 	call	2004188 <alt_get_errno>
 2004148:	1007883a 	mov	r3,r2
 200414c:	00800344 	movi	r2,13
 2004150:	18800015 	stw	r2,0(r3)
 2004154:	00000406 	br	2004168 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2004158:	20041880 	call	2004188 <alt_get_errno>
 200415c:	1007883a 	mov	r3,r2
 2004160:	00801444 	movi	r2,81
 2004164:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2004168:	00bfffc4 	movi	r2,-1
 200416c:	e0bffe15 	stw	r2,-8(fp)
 2004170:	e0bffe17 	ldw	r2,-8(fp)
}
 2004174:	e037883a 	mov	sp,fp
 2004178:	dfc00117 	ldw	ra,4(sp)
 200417c:	df000017 	ldw	fp,0(sp)
 2004180:	dec00204 	addi	sp,sp,8
 2004184:	f800283a 	ret

02004188 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004188:	defffd04 	addi	sp,sp,-12
 200418c:	dfc00215 	stw	ra,8(sp)
 2004190:	df000115 	stw	fp,4(sp)
 2004194:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2004198:	00808074 	movhi	r2,513
 200419c:	1088a104 	addi	r2,r2,8836
 20041a0:	10800017 	ldw	r2,0(r2)
 20041a4:	1005003a 	cmpeq	r2,r2,zero
 20041a8:	1000061e 	bne	r2,zero,20041c4 <alt_get_errno+0x3c>
 20041ac:	00808074 	movhi	r2,513
 20041b0:	1088a104 	addi	r2,r2,8836
 20041b4:	10800017 	ldw	r2,0(r2)
 20041b8:	103ee83a 	callr	r2
 20041bc:	e0bfff15 	stw	r2,-4(fp)
 20041c0:	00000306 	br	20041d0 <alt_get_errno+0x48>
 20041c4:	00808074 	movhi	r2,513
 20041c8:	108fc104 	addi	r2,r2,16132
 20041cc:	e0bfff15 	stw	r2,-4(fp)
 20041d0:	e0bfff17 	ldw	r2,-4(fp)
}
 20041d4:	e037883a 	mov	sp,fp
 20041d8:	dfc00117 	ldw	ra,4(sp)
 20041dc:	df000017 	ldw	fp,0(sp)
 20041e0:	dec00204 	addi	sp,sp,8
 20041e4:	f800283a 	ret

020041e8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 20041e8:	deffdf04 	addi	sp,sp,-132
 20041ec:	dfc02015 	stw	ra,128(sp)
 20041f0:	df001f15 	stw	fp,124(sp)
 20041f4:	df001f04 	addi	fp,sp,124
 20041f8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 20041fc:	e17fe204 	addi	r5,fp,-120
 2004200:	01003fc4 	movi	r4,255
 2004204:	200c03c0 	call	200c03c <OSTaskQuery>
 2004208:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 200420c:	e0bffe83 	ldbu	r2,-6(fp)
 2004210:	10803fcc 	andi	r2,r2,255
 2004214:	1004c03a 	cmpne	r2,r2,zero
 2004218:	1000191e 	bne	r2,zero,2004280 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 200421c:	e0bfee83 	ldbu	r2,-70(fp)
 2004220:	10803fcc 	andi	r2,r2,255
 2004224:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 2004228:	d1273317 	ldw	r4,-25396(gp)
 200422c:	e17ffd04 	addi	r5,fp,-12
 2004230:	200a5880 	call	200a588 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 2004234:	e0bffe43 	ldbu	r2,-7(fp)
 2004238:	10803fcc 	andi	r2,r2,255
 200423c:	1005003a 	cmpeq	r2,r2,zero
 2004240:	1000071e 	bne	r2,zero,2004260 <__env_lock+0x78>
 2004244:	d0e00f17 	ldw	r3,-32708(gp)
 2004248:	e0bfe117 	ldw	r2,-124(fp)
 200424c:	10c0041e 	bne	r2,r3,2004260 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 2004250:	d0a73217 	ldw	r2,-25400(gp)
 2004254:	10800044 	addi	r2,r2,1
 2004258:	d0a73215 	stw	r2,-25400(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 200425c:	00000806 	br	2004280 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 2004260:	d1273317 	ldw	r4,-25396(gp)
 2004264:	e1bffe84 	addi	r6,fp,-6
 2004268:	000b883a 	mov	r5,zero
 200426c:	200a0680 	call	200a068 <OSSemPend>
    locks  = 1;
 2004270:	00800044 	movi	r2,1
 2004274:	d0a73215 	stw	r2,-25400(gp)
    lockid = id;
 2004278:	e0bfe117 	ldw	r2,-124(fp)
 200427c:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 2004280:	e037883a 	mov	sp,fp
 2004284:	dfc00117 	ldw	ra,4(sp)
 2004288:	df000017 	ldw	fp,0(sp)
 200428c:	dec00204 	addi	sp,sp,8
 2004290:	f800283a 	ret

02004294 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 2004294:	defffd04 	addi	sp,sp,-12
 2004298:	dfc00215 	stw	ra,8(sp)
 200429c:	df000115 	stw	fp,4(sp)
 20042a0:	df000104 	addi	fp,sp,4
 20042a4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 20042a8:	d0a73217 	ldw	r2,-25400(gp)
 20042ac:	1005003a 	cmpeq	r2,r2,zero
 20042b0:	10000a1e 	bne	r2,zero,20042dc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 20042b4:	d0a73217 	ldw	r2,-25400(gp)
 20042b8:	10bfffc4 	addi	r2,r2,-1
 20042bc:	d0a73215 	stw	r2,-25400(gp)
 20042c0:	d0a73217 	ldw	r2,-25400(gp)
 20042c4:	1004c03a 	cmpne	r2,r2,zero
 20042c8:	1000041e 	bne	r2,zero,20042dc <__env_unlock+0x48>
  {
    lockid = -1;
 20042cc:	00bfffc4 	movi	r2,-1
 20042d0:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
 20042d4:	d1273317 	ldw	r4,-25396(gp)
 20042d8:	200a4600 	call	200a460 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 20042dc:	e037883a 	mov	sp,fp
 20042e0:	dfc00117 	ldw	ra,4(sp)
 20042e4:	df000017 	ldw	fp,0(sp)
 20042e8:	dec00204 	addi	sp,sp,8
 20042ec:	f800283a 	ret

020042f0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 20042f0:	deffdb04 	addi	sp,sp,-148
 20042f4:	dfc02415 	stw	ra,144(sp)
 20042f8:	df002315 	stw	fp,140(sp)
 20042fc:	df002304 	addi	fp,sp,140
 2004300:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2004304:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 2004308:	00808074 	movhi	r2,513
 200430c:	108fca44 	addi	r2,r2,16169
 2004310:	10800003 	ldbu	r2,0(r2)
 2004314:	10803fcc 	andi	r2,r2,255
 2004318:	10800058 	cmpnei	r2,r2,1
 200431c:	1000311e 	bne	r2,zero,20043e4 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 2004320:	e17fe204 	addi	r5,fp,-120
 2004324:	01003fc4 	movi	r4,255
 2004328:	200c03c0 	call	200c03c <OSTaskQuery>
 200432c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 2004330:	e0bffe83 	ldbu	r2,-6(fp)
 2004334:	10803fcc 	andi	r2,r2,255
 2004338:	1004c03a 	cmpne	r2,r2,zero
 200433c:	1000291e 	bne	r2,zero,20043e4 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 2004340:	e0bfee83 	ldbu	r2,-70(fp)
 2004344:	10803fcc 	andi	r2,r2,255
 2004348:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 200434c:	d1273517 	ldw	r4,-25388(gp)
 2004350:	e17ffd04 	addi	r5,fp,-12
 2004354:	200a5880 	call	200a588 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004358:	0005303a 	rdctl	r2,status
 200435c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004360:	e0ffdf17 	ldw	r3,-132(fp)
 2004364:	00bfff84 	movi	r2,-2
 2004368:	1884703a 	and	r2,r3,r2
 200436c:	1001703a 	wrctl	status,r2
  
  return context;
 2004370:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 2004374:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 2004378:	e0bffd0b 	ldhu	r2,-12(fp)
 200437c:	10bfffcc 	andi	r2,r2,65535
 2004380:	1004c03a 	cmpne	r2,r2,zero
 2004384:	10000b1e 	bne	r2,zero,20043b4 <__malloc_lock+0xc4>
 2004388:	d0e01017 	ldw	r3,-32704(gp)
 200438c:	e0bfe117 	ldw	r2,-124(fp)
 2004390:	10c0081e 	bne	r2,r3,20043b4 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 2004394:	d0a73417 	ldw	r2,-25392(gp)
 2004398:	10800044 	addi	r2,r2,1
 200439c:	d0a73415 	stw	r2,-25392(gp)
 20043a0:	e0bfe017 	ldw	r2,-128(fp)
 20043a4:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20043a8:	e0bfde17 	ldw	r2,-136(fp)
 20043ac:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 20043b0:	00000c06 	br	20043e4 <__malloc_lock+0xf4>
 20043b4:	e0bfe017 	ldw	r2,-128(fp)
 20043b8:	e0bfdd15 	stw	r2,-140(fp)
 20043bc:	e0bfdd17 	ldw	r2,-140(fp)
 20043c0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 20043c4:	d1273517 	ldw	r4,-25388(gp)
 20043c8:	e1bffe84 	addi	r6,fp,-6
 20043cc:	000b883a 	mov	r5,zero
 20043d0:	200a0680 	call	200a068 <OSSemPend>
    locks  = 1;
 20043d4:	00800044 	movi	r2,1
 20043d8:	d0a73415 	stw	r2,-25392(gp)
    lockid = id;
 20043dc:	e0bfe117 	ldw	r2,-124(fp)
 20043e0:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 20043e4:	e037883a 	mov	sp,fp
 20043e8:	dfc00117 	ldw	ra,4(sp)
 20043ec:	df000017 	ldw	fp,0(sp)
 20043f0:	dec00204 	addi	sp,sp,8
 20043f4:	f800283a 	ret

020043f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 20043f8:	defff804 	addi	sp,sp,-32
 20043fc:	dfc00715 	stw	ra,28(sp)
 2004400:	df000615 	stw	fp,24(sp)
 2004404:	df000604 	addi	fp,sp,24
 2004408:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200440c:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 2004410:	00808074 	movhi	r2,513
 2004414:	108fca44 	addi	r2,r2,16169
 2004418:	10800003 	ldbu	r2,0(r2)
 200441c:	10803fcc 	andi	r2,r2,255
 2004420:	10800058 	cmpnei	r2,r2,1
 2004424:	1000231e 	bne	r2,zero,20044b4 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004428:	0005303a 	rdctl	r2,status
 200442c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004430:	e0fffd17 	ldw	r3,-12(fp)
 2004434:	00bfff84 	movi	r2,-2
 2004438:	1884703a 	and	r2,r3,r2
 200443c:	1001703a 	wrctl	status,r2
  
  return context;
 2004440:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 2004444:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 2004448:	d0a73417 	ldw	r2,-25392(gp)
 200444c:	1004c03a 	cmpne	r2,r2,zero
 2004450:	1000051e 	bne	r2,zero,2004468 <__malloc_unlock+0x70>
 2004454:	e0bffe17 	ldw	r2,-8(fp)
 2004458:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200445c:	e0bffc17 	ldw	r2,-16(fp)
 2004460:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 2004464:	00001306 	br	20044b4 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 2004468:	d0a73417 	ldw	r2,-25392(gp)
 200446c:	10bfffc4 	addi	r2,r2,-1
 2004470:	d0a73415 	stw	r2,-25392(gp)
 2004474:	d0a73417 	ldw	r2,-25392(gp)
 2004478:	1004c03a 	cmpne	r2,r2,zero
 200447c:	1000091e 	bne	r2,zero,20044a4 <__malloc_unlock+0xac>
  {
    lockid = -1;
 2004480:	00bfffc4 	movi	r2,-1
 2004484:	d0a01015 	stw	r2,-32704(gp)
 2004488:	e0bffe17 	ldw	r2,-8(fp)
 200448c:	e0bffb15 	stw	r2,-20(fp)
 2004490:	e0bffb17 	ldw	r2,-20(fp)
 2004494:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 2004498:	d1273517 	ldw	r4,-25388(gp)
 200449c:	200a4600 	call	200a460 <OSSemPost>
 20044a0:	00000406 	br	20044b4 <__malloc_unlock+0xbc>
 20044a4:	e0bffe17 	ldw	r2,-8(fp)
 20044a8:	e0bffa15 	stw	r2,-24(fp)
 20044ac:	e0bffa17 	ldw	r2,-24(fp)
 20044b0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 20044b4:	e037883a 	mov	sp,fp
 20044b8:	dfc00117 	ldw	ra,4(sp)
 20044bc:	df000017 	ldw	fp,0(sp)
 20044c0:	dec00204 	addi	sp,sp,8
 20044c4:	f800283a 	ret

020044c8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 20044c8:	defff604 	addi	sp,sp,-40
 20044cc:	dfc00915 	stw	ra,36(sp)
 20044d0:	df000815 	stw	fp,32(sp)
 20044d4:	df000804 	addi	fp,sp,32
 20044d8:	e13ffc15 	stw	r4,-16(fp)
 20044dc:	e17ffd15 	stw	r5,-12(fp)
 20044e0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20044e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20044e8:	e0bffe17 	ldw	r2,-8(fp)
 20044ec:	1004c03a 	cmpne	r2,r2,zero
 20044f0:	1000021e 	bne	r2,zero,20044fc <OSEventNameGet+0x34>
        return (0);
 20044f4:	e03fff15 	stw	zero,-4(fp)
 20044f8:	00003906 	br	20045e0 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 20044fc:	e0bffc17 	ldw	r2,-16(fp)
 2004500:	1004c03a 	cmpne	r2,r2,zero
 2004504:	1000051e 	bne	r2,zero,200451c <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 2004508:	e0fffe17 	ldw	r3,-8(fp)
 200450c:	00800104 	movi	r2,4
 2004510:	18800005 	stb	r2,0(r3)
        return (0);
 2004514:	e03fff15 	stw	zero,-4(fp)
 2004518:	00003106 	br	20045e0 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 200451c:	e0bffd17 	ldw	r2,-12(fp)
 2004520:	1004c03a 	cmpne	r2,r2,zero
 2004524:	1000051e 	bne	r2,zero,200453c <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 2004528:	e0fffe17 	ldw	r3,-8(fp)
 200452c:	00800304 	movi	r2,12
 2004530:	18800005 	stb	r2,0(r3)
        return (0);
 2004534:	e03fff15 	stw	zero,-4(fp)
 2004538:	00002906 	br	20045e0 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200453c:	d0a74403 	ldbu	r2,-25328(gp)
 2004540:	10803fcc 	andi	r2,r2,255
 2004544:	1005003a 	cmpeq	r2,r2,zero
 2004548:	1000051e 	bne	r2,zero,2004560 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 200454c:	e0fffe17 	ldw	r3,-8(fp)
 2004550:	00800444 	movi	r2,17
 2004554:	18800005 	stb	r2,0(r3)
        return (0);
 2004558:	e03fff15 	stw	zero,-4(fp)
 200455c:	00002006 	br	20045e0 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 2004560:	e0bffc17 	ldw	r2,-16(fp)
 2004564:	10800003 	ldbu	r2,0(r2)
 2004568:	10803fcc 	andi	r2,r2,255
 200456c:	10bfffc4 	addi	r2,r2,-1
 2004570:	10800128 	cmpgeui	r2,r2,4
 2004574:	1000161e 	bne	r2,zero,20045d0 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004578:	0005303a 	rdctl	r2,status
 200457c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004580:	e0fff917 	ldw	r3,-28(fp)
 2004584:	00bfff84 	movi	r2,-2
 2004588:	1884703a 	and	r2,r3,r2
 200458c:	1001703a 	wrctl	status,r2
  
  return context;
 2004590:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 2004594:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 2004598:	e0bffc17 	ldw	r2,-16(fp)
 200459c:	11400384 	addi	r5,r2,14
 20045a0:	e13ffd17 	ldw	r4,-12(fp)
 20045a4:	200604c0 	call	200604c <OS_StrCopy>
 20045a8:	e0bffb05 	stb	r2,-20(fp)
 20045ac:	e0bffa17 	ldw	r2,-24(fp)
 20045b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20045b4:	e0bff817 	ldw	r2,-32(fp)
 20045b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20045bc:	e0bffe17 	ldw	r2,-8(fp)
 20045c0:	10000005 	stb	zero,0(r2)
    return (len);
 20045c4:	e0bffb03 	ldbu	r2,-20(fp)
 20045c8:	e0bfff15 	stw	r2,-4(fp)
 20045cc:	00000406 	br	20045e0 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 20045d0:	e0fffe17 	ldw	r3,-8(fp)
 20045d4:	00800044 	movi	r2,1
 20045d8:	18800005 	stb	r2,0(r3)
             return (0);
 20045dc:	e03fff15 	stw	zero,-4(fp)
 20045e0:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 20045e4:	e037883a 	mov	sp,fp
 20045e8:	dfc00117 	ldw	ra,4(sp)
 20045ec:	df000017 	ldw	fp,0(sp)
 20045f0:	dec00204 	addi	sp,sp,8
 20045f4:	f800283a 	ret

020045f8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 20045f8:	defff604 	addi	sp,sp,-40
 20045fc:	dfc00915 	stw	ra,36(sp)
 2004600:	df000815 	stw	fp,32(sp)
 2004604:	df000804 	addi	fp,sp,32
 2004608:	e13ffd15 	stw	r4,-12(fp)
 200460c:	e17ffe15 	stw	r5,-8(fp)
 2004610:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2004614:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2004618:	e0bfff17 	ldw	r2,-4(fp)
 200461c:	1005003a 	cmpeq	r2,r2,zero
 2004620:	1000411e 	bne	r2,zero,2004728 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 2004624:	e0bffd17 	ldw	r2,-12(fp)
 2004628:	1004c03a 	cmpne	r2,r2,zero
 200462c:	1000041e 	bne	r2,zero,2004640 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 2004630:	e0ffff17 	ldw	r3,-4(fp)
 2004634:	00800104 	movi	r2,4
 2004638:	18800005 	stb	r2,0(r3)
        return;
 200463c:	00003a06 	br	2004728 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2004640:	e0bffe17 	ldw	r2,-8(fp)
 2004644:	1004c03a 	cmpne	r2,r2,zero
 2004648:	1000041e 	bne	r2,zero,200465c <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 200464c:	e0ffff17 	ldw	r3,-4(fp)
 2004650:	00800304 	movi	r2,12
 2004654:	18800005 	stb	r2,0(r3)
        return;
 2004658:	00003306 	br	2004728 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200465c:	d0a74403 	ldbu	r2,-25328(gp)
 2004660:	10803fcc 	andi	r2,r2,255
 2004664:	1005003a 	cmpeq	r2,r2,zero
 2004668:	1000041e 	bne	r2,zero,200467c <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 200466c:	e0ffff17 	ldw	r3,-4(fp)
 2004670:	00800484 	movi	r2,18
 2004674:	18800005 	stb	r2,0(r3)
        return;
 2004678:	00002b06 	br	2004728 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 200467c:	e0bffd17 	ldw	r2,-12(fp)
 2004680:	10800003 	ldbu	r2,0(r2)
 2004684:	10803fcc 	andi	r2,r2,255
 2004688:	10bfffc4 	addi	r2,r2,-1
 200468c:	10800128 	cmpgeui	r2,r2,4
 2004690:	10000f1e 	bne	r2,zero,20046d0 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004694:	0005303a 	rdctl	r2,status
 2004698:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200469c:	e0fffa17 	ldw	r3,-24(fp)
 20046a0:	00bfff84 	movi	r2,-2
 20046a4:	1884703a 	and	r2,r3,r2
 20046a8:	1001703a 	wrctl	status,r2
  
  return context;
 20046ac:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 20046b0:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 20046b4:	e13ffe17 	ldw	r4,-8(fp)
 20046b8:	20060cc0 	call	20060cc <OS_StrLen>
 20046bc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 20046c0:	e0bffc03 	ldbu	r2,-16(fp)
 20046c4:	10800828 	cmpgeui	r2,r2,32
 20046c8:	1000051e 	bne	r2,zero,20046e0 <OSEventNameSet+0xe8>
 20046cc:	00000c06 	br	2004700 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 20046d0:	e0ffff17 	ldw	r3,-4(fp)
 20046d4:	00800044 	movi	r2,1
 20046d8:	18800005 	stb	r2,0(r3)
             return;
 20046dc:	00001206 	br	2004728 <OSEventNameSet+0x130>
 20046e0:	e0bffb17 	ldw	r2,-20(fp)
 20046e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20046e8:	e0bff917 	ldw	r2,-28(fp)
 20046ec:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 20046f0:	e0ffff17 	ldw	r3,-4(fp)
 20046f4:	008002c4 	movi	r2,11
 20046f8:	18800005 	stb	r2,0(r3)
        return;
 20046fc:	00000a06 	br	2004728 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 2004700:	e0bffd17 	ldw	r2,-12(fp)
 2004704:	11000384 	addi	r4,r2,14
 2004708:	e17ffe17 	ldw	r5,-8(fp)
 200470c:	200604c0 	call	200604c <OS_StrCopy>
 2004710:	e0bffb17 	ldw	r2,-20(fp)
 2004714:	e0bff815 	stw	r2,-32(fp)
 2004718:	e0bff817 	ldw	r2,-32(fp)
 200471c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2004720:	e0bfff17 	ldw	r2,-4(fp)
 2004724:	10000005 	stb	zero,0(r2)
}
 2004728:	e037883a 	mov	sp,fp
 200472c:	dfc00117 	ldw	ra,4(sp)
 2004730:	df000017 	ldw	fp,0(sp)
 2004734:	dec00204 	addi	sp,sp,8
 2004738:	f800283a 	ret

0200473c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 200473c:	deffe704 	addi	sp,sp,-100
 2004740:	dfc01815 	stw	ra,96(sp)
 2004744:	df001715 	stw	fp,92(sp)
 2004748:	df001704 	addi	fp,sp,92
 200474c:	e13ff615 	stw	r4,-40(fp)
 2004750:	e17ff715 	stw	r5,-36(fp)
 2004754:	e1bff815 	stw	r6,-32(fp)
 2004758:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 200475c:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 2004760:	e0800217 	ldw	r2,8(fp)
 2004764:	1004c03a 	cmpne	r2,r2,zero
 2004768:	1000021e 	bne	r2,zero,2004774 <OSEventPendMulti+0x38>
        return (0);
 200476c:	e03fff15 	stw	zero,-4(fp)
 2004770:	00019906 	br	2004dd8 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 2004774:	e0bff617 	ldw	r2,-40(fp)
 2004778:	1004c03a 	cmpne	r2,r2,zero
 200477c:	1000051e 	bne	r2,zero,2004794 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 2004780:	e0c00217 	ldw	r3,8(fp)
 2004784:	00800104 	movi	r2,4
 2004788:	18800005 	stb	r2,0(r3)
        return (0);
 200478c:	e03fff15 	stw	zero,-4(fp)
 2004790:	00019106 	br	2004dd8 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 2004794:	e0bff717 	ldw	r2,-36(fp)
 2004798:	1004c03a 	cmpne	r2,r2,zero
 200479c:	1000051e 	bne	r2,zero,20047b4 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 20047a0:	e0c00217 	ldw	r3,8(fp)
 20047a4:	00800104 	movi	r2,4
 20047a8:	18800005 	stb	r2,0(r3)
        return (0);
 20047ac:	e03fff15 	stw	zero,-4(fp)
 20047b0:	00018906 	br	2004dd8 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 20047b4:	e0bff817 	ldw	r2,-32(fp)
 20047b8:	1004c03a 	cmpne	r2,r2,zero
 20047bc:	1000051e 	bne	r2,zero,20047d4 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 20047c0:	e0c00217 	ldw	r3,8(fp)
 20047c4:	00800104 	movi	r2,4
 20047c8:	18800005 	stb	r2,0(r3)
        return (0);
 20047cc:	e03fff15 	stw	zero,-4(fp)
 20047d0:	00018106 	br	2004dd8 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 20047d4:	e0bff717 	ldw	r2,-36(fp)
 20047d8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 20047dc:	e0bff617 	ldw	r2,-40(fp)
 20047e0:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 20047e4:	e0bff517 	ldw	r2,-44(fp)
 20047e8:	10800017 	ldw	r2,0(r2)
 20047ec:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 20047f0:	00001806 	br	2004854 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 20047f4:	e0bff417 	ldw	r2,-48(fp)
 20047f8:	10800003 	ldbu	r2,0(r2)
 20047fc:	10803fcc 	andi	r2,r2,255
 2004800:	e0bffe15 	stw	r2,-8(fp)
 2004804:	e0fffe17 	ldw	r3,-8(fp)
 2004808:	188000a0 	cmpeqi	r2,r3,2
 200480c:	10000b1e 	bne	r2,zero,200483c <OSEventPendMulti+0x100>
 2004810:	e0fffe17 	ldw	r3,-8(fp)
 2004814:	188000e0 	cmpeqi	r2,r3,3
 2004818:	1000081e 	bne	r2,zero,200483c <OSEventPendMulti+0x100>
 200481c:	e0fffe17 	ldw	r3,-8(fp)
 2004820:	18800060 	cmpeqi	r2,r3,1
 2004824:	1000051e 	bne	r2,zero,200483c <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 2004828:	e0c00217 	ldw	r3,8(fp)
 200482c:	00800044 	movi	r2,1
 2004830:	18800005 	stb	r2,0(r3)
                 return (0);
 2004834:	e03fff15 	stw	zero,-4(fp)
 2004838:	00016706 	br	2004dd8 <OSEventPendMulti+0x69c>
        }
        pevents++;
 200483c:	e0bff517 	ldw	r2,-44(fp)
 2004840:	10800104 	addi	r2,r2,4
 2004844:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 2004848:	e0bff517 	ldw	r2,-44(fp)
 200484c:	10800017 	ldw	r2,0(r2)
 2004850:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 2004854:	e0bff417 	ldw	r2,-48(fp)
 2004858:	1004c03a 	cmpne	r2,r2,zero
 200485c:	103fe51e 	bne	r2,zero,20047f4 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 2004860:	d0a74403 	ldbu	r2,-25328(gp)
 2004864:	10803fcc 	andi	r2,r2,255
 2004868:	1005003a 	cmpeq	r2,r2,zero
 200486c:	1000051e 	bne	r2,zero,2004884 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 2004870:	e0c00217 	ldw	r3,8(fp)
 2004874:	00800084 	movi	r2,2
 2004878:	18800005 	stb	r2,0(r3)
        return (0);
 200487c:	e03fff15 	stw	zero,-4(fp)
 2004880:	00015506 	br	2004dd8 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 2004884:	d0a73603 	ldbu	r2,-25384(gp)
 2004888:	10803fcc 	andi	r2,r2,255
 200488c:	1005003a 	cmpeq	r2,r2,zero
 2004890:	1000051e 	bne	r2,zero,20048a8 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 2004894:	e0c00217 	ldw	r3,8(fp)
 2004898:	00800344 	movi	r2,13
 200489c:	18800005 	stb	r2,0(r3)
        return (0);
 20048a0:	e03fff15 	stw	zero,-4(fp)
 20048a4:	00014c06 	br	2004dd8 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20048a8:	0005303a 	rdctl	r2,status
 20048ac:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20048b0:	e0ffef17 	ldw	r3,-68(fp)
 20048b4:	00bfff84 	movi	r2,-2
 20048b8:	1884703a 	and	r2,r3,r2
 20048bc:	1001703a 	wrctl	status,r2
  
  return context;
 20048c0:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 20048c4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 20048c8:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 20048cc:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 20048d0:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 20048d4:	e0bff617 	ldw	r2,-40(fp)
 20048d8:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 20048dc:	e0bff517 	ldw	r2,-44(fp)
 20048e0:	10800017 	ldw	r2,0(r2)
 20048e4:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 20048e8:	00008f06 	br	2004b28 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 20048ec:	e0bff417 	ldw	r2,-48(fp)
 20048f0:	10800003 	ldbu	r2,0(r2)
 20048f4:	10803fcc 	andi	r2,r2,255
 20048f8:	e0bffd15 	stw	r2,-12(fp)
 20048fc:	e0fffd17 	ldw	r3,-12(fp)
 2004900:	188000a0 	cmpeqi	r2,r3,2
 2004904:	1000441e 	bne	r2,zero,2004a18 <OSEventPendMulti+0x2dc>
 2004908:	e0fffd17 	ldw	r3,-12(fp)
 200490c:	188000e0 	cmpeqi	r2,r3,3
 2004910:	1000041e 	bne	r2,zero,2004924 <OSEventPendMulti+0x1e8>
 2004914:	e0fffd17 	ldw	r3,-12(fp)
 2004918:	18800060 	cmpeqi	r2,r3,1
 200491c:	1000211e 	bne	r2,zero,20049a4 <OSEventPendMulti+0x268>
 2004920:	00006f06 	br	2004ae0 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 2004924:	e0bff417 	ldw	r2,-48(fp)
 2004928:	1080020b 	ldhu	r2,8(r2)
 200492c:	10bfffcc 	andi	r2,r2,65535
 2004930:	1005003a 	cmpeq	r2,r2,zero
 2004934:	1000171e 	bne	r2,zero,2004994 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 2004938:	e0bff417 	ldw	r2,-48(fp)
 200493c:	1080020b 	ldhu	r2,8(r2)
 2004940:	10bfffc4 	addi	r2,r2,-1
 2004944:	1007883a 	mov	r3,r2
 2004948:	e0bff417 	ldw	r2,-48(fp)
 200494c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 2004950:	e0fff717 	ldw	r3,-36(fp)
 2004954:	e0bff417 	ldw	r2,-48(fp)
 2004958:	18800015 	stw	r2,0(r3)
 200495c:	e0bff717 	ldw	r2,-36(fp)
 2004960:	10800104 	addi	r2,r2,4
 2004964:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 2004968:	00800044 	movi	r2,1
 200496c:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 2004970:	e0bff817 	ldw	r2,-32(fp)
 2004974:	10000015 	stw	zero,0(r2)
 2004978:	e0bff817 	ldw	r2,-32(fp)
 200497c:	10800104 	addi	r2,r2,4
 2004980:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 2004984:	e0bff18b 	ldhu	r2,-58(fp)
 2004988:	10800044 	addi	r2,r2,1
 200498c:	e0bff18d 	sth	r2,-58(fp)
 2004990:	00005f06 	br	2004b10 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 2004994:	e0bff103 	ldbu	r2,-60(fp)
 2004998:	10800054 	ori	r2,r2,1
 200499c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 20049a0:	00005b06 	br	2004b10 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 20049a4:	e0bff417 	ldw	r2,-48(fp)
 20049a8:	10800117 	ldw	r2,4(r2)
 20049ac:	1005003a 	cmpeq	r2,r2,zero
 20049b0:	1000151e 	bne	r2,zero,2004a08 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 20049b4:	e0bff417 	ldw	r2,-48(fp)
 20049b8:	10c00117 	ldw	r3,4(r2)
 20049bc:	e0bff817 	ldw	r2,-32(fp)
 20049c0:	10c00015 	stw	r3,0(r2)
 20049c4:	e0bff817 	ldw	r2,-32(fp)
 20049c8:	10800104 	addi	r2,r2,4
 20049cc:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 20049d0:	e0bff417 	ldw	r2,-48(fp)
 20049d4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 20049d8:	e0fff717 	ldw	r3,-36(fp)
 20049dc:	e0bff417 	ldw	r2,-48(fp)
 20049e0:	18800015 	stw	r2,0(r3)
 20049e4:	e0bff717 	ldw	r2,-36(fp)
 20049e8:	10800104 	addi	r2,r2,4
 20049ec:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 20049f0:	00800044 	movi	r2,1
 20049f4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 20049f8:	e0bff18b 	ldhu	r2,-58(fp)
 20049fc:	10800044 	addi	r2,r2,1
 2004a00:	e0bff18d 	sth	r2,-58(fp)
 2004a04:	00004206 	br	2004b10 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 2004a08:	e0bff103 	ldbu	r2,-60(fp)
 2004a0c:	10800094 	ori	r2,r2,2
 2004a10:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 2004a14:	00003e06 	br	2004b10 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 2004a18:	e0bff417 	ldw	r2,-48(fp)
 2004a1c:	10800117 	ldw	r2,4(r2)
 2004a20:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 2004a24:	e0bff317 	ldw	r2,-52(fp)
 2004a28:	1080058b 	ldhu	r2,22(r2)
 2004a2c:	10bfffcc 	andi	r2,r2,65535
 2004a30:	1005003a 	cmpeq	r2,r2,zero
 2004a34:	1000261e 	bne	r2,zero,2004ad0 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 2004a38:	e0bff317 	ldw	r2,-52(fp)
 2004a3c:	11000417 	ldw	r4,16(r2)
 2004a40:	20c00017 	ldw	r3,0(r4)
 2004a44:	e0bff817 	ldw	r2,-32(fp)
 2004a48:	10c00015 	stw	r3,0(r2)
 2004a4c:	e0bff817 	ldw	r2,-32(fp)
 2004a50:	10800104 	addi	r2,r2,4
 2004a54:	e0bff815 	stw	r2,-32(fp)
 2004a58:	20c00104 	addi	r3,r4,4
 2004a5c:	e0bff317 	ldw	r2,-52(fp)
 2004a60:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 2004a64:	e0bff317 	ldw	r2,-52(fp)
 2004a68:	10c00417 	ldw	r3,16(r2)
 2004a6c:	e0bff317 	ldw	r2,-52(fp)
 2004a70:	10800217 	ldw	r2,8(r2)
 2004a74:	1880041e 	bne	r3,r2,2004a88 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 2004a78:	e0bff317 	ldw	r2,-52(fp)
 2004a7c:	10c00117 	ldw	r3,4(r2)
 2004a80:	e0bff317 	ldw	r2,-52(fp)
 2004a84:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 2004a88:	e0bff317 	ldw	r2,-52(fp)
 2004a8c:	1080058b 	ldhu	r2,22(r2)
 2004a90:	10bfffc4 	addi	r2,r2,-1
 2004a94:	1007883a 	mov	r3,r2
 2004a98:	e0bff317 	ldw	r2,-52(fp)
 2004a9c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 2004aa0:	e0fff717 	ldw	r3,-36(fp)
 2004aa4:	e0bff417 	ldw	r2,-48(fp)
 2004aa8:	18800015 	stw	r2,0(r3)
 2004aac:	e0bff717 	ldw	r2,-36(fp)
 2004ab0:	10800104 	addi	r2,r2,4
 2004ab4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 2004ab8:	00800044 	movi	r2,1
 2004abc:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 2004ac0:	e0bff18b 	ldhu	r2,-58(fp)
 2004ac4:	10800044 	addi	r2,r2,1
 2004ac8:	e0bff18d 	sth	r2,-58(fp)
 2004acc:	00001006 	br	2004b10 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 2004ad0:	e0bff103 	ldbu	r2,-60(fp)
 2004ad4:	10800114 	ori	r2,r2,4
 2004ad8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 2004adc:	00000c06 	br	2004b10 <OSEventPendMulti+0x3d4>
 2004ae0:	e0bff017 	ldw	r2,-64(fp)
 2004ae4:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004ae8:	e0bfee17 	ldw	r2,-72(fp)
 2004aec:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 2004af0:	e0bff717 	ldw	r2,-36(fp)
 2004af4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 2004af8:	e0c00217 	ldw	r3,8(fp)
 2004afc:	00800044 	movi	r2,1
 2004b00:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 2004b04:	e0bff18b 	ldhu	r2,-58(fp)
 2004b08:	e0bfff15 	stw	r2,-4(fp)
 2004b0c:	0000b206 	br	2004dd8 <OSEventPendMulti+0x69c>
        }
        pevents++;
 2004b10:	e0bff517 	ldw	r2,-44(fp)
 2004b14:	10800104 	addi	r2,r2,4
 2004b18:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 2004b1c:	e0bff517 	ldw	r2,-44(fp)
 2004b20:	10800017 	ldw	r2,0(r2)
 2004b24:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 2004b28:	e0bff417 	ldw	r2,-48(fp)
 2004b2c:	1004c03a 	cmpne	r2,r2,zero
 2004b30:	103f6e1e 	bne	r2,zero,20048ec <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 2004b34:	e0bff203 	ldbu	r2,-56(fp)
 2004b38:	10800058 	cmpnei	r2,r2,1
 2004b3c:	10000b1e 	bne	r2,zero,2004b6c <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 2004b40:	e0bff717 	ldw	r2,-36(fp)
 2004b44:	10000015 	stw	zero,0(r2)
 2004b48:	e0bff017 	ldw	r2,-64(fp)
 2004b4c:	e0bfed15 	stw	r2,-76(fp)
 2004b50:	e0bfed17 	ldw	r2,-76(fp)
 2004b54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 2004b58:	e0800217 	ldw	r2,8(fp)
 2004b5c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 2004b60:	e0fff18b 	ldhu	r3,-58(fp)
 2004b64:	e0ffff15 	stw	r3,-4(fp)
 2004b68:	00009b06 	br	2004dd8 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 2004b6c:	d1274517 	ldw	r4,-25324(gp)
 2004b70:	d0a74517 	ldw	r2,-25324(gp)
 2004b74:	10c00c03 	ldbu	r3,48(r2)
 2004b78:	e0bff103 	ldbu	r2,-60(fp)
 2004b7c:	1884b03a 	or	r2,r3,r2
 2004b80:	1007883a 	mov	r3,r2
 2004b84:	00bfe004 	movi	r2,-128
 2004b88:	1884b03a 	or	r2,r3,r2
 2004b8c:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2004b90:	d0a74517 	ldw	r2,-25324(gp)
 2004b94:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 2004b98:	d0e74517 	ldw	r3,-25324(gp)
 2004b9c:	e0bff90b 	ldhu	r2,-28(fp)
 2004ba0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 2004ba4:	e13ff617 	ldw	r4,-40(fp)
 2004ba8:	200576c0 	call	200576c <OS_EventTaskWaitMulti>
 2004bac:	e0bff017 	ldw	r2,-64(fp)
 2004bb0:	e0bfec15 	stw	r2,-80(fp)
 2004bb4:	e0bfec17 	ldw	r2,-80(fp)
 2004bb8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 2004bbc:	2005f080 	call	2005f08 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004bc0:	0005303a 	rdctl	r2,status
 2004bc4:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004bc8:	e0ffeb17 	ldw	r3,-84(fp)
 2004bcc:	00bfff84 	movi	r2,-2
 2004bd0:	1884703a 	and	r2,r3,r2
 2004bd4:	1001703a 	wrctl	status,r2
  
  return context;
 2004bd8:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 2004bdc:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 2004be0:	d0a74517 	ldw	r2,-25324(gp)
 2004be4:	10800c43 	ldbu	r2,49(r2)
 2004be8:	10803fcc 	andi	r2,r2,255
 2004bec:	e0bffc15 	stw	r2,-16(fp)
 2004bf0:	e0fffc17 	ldw	r3,-16(fp)
 2004bf4:	1805003a 	cmpeq	r2,r3,zero
 2004bf8:	1000041e 	bne	r2,zero,2004c0c <OSEventPendMulti+0x4d0>
 2004bfc:	e0fffc17 	ldw	r3,-16(fp)
 2004c00:	188000a0 	cmpeqi	r2,r3,2
 2004c04:	1000011e 	bne	r2,zero,2004c0c <OSEventPendMulti+0x4d0>
 2004c08:	00001906 	br	2004c70 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 2004c0c:	d0a74517 	ldw	r2,-25324(gp)
 2004c10:	10800717 	ldw	r2,28(r2)
 2004c14:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 2004c18:	e0bff417 	ldw	r2,-48(fp)
 2004c1c:	1005003a 	cmpeq	r2,r2,zero
 2004c20:	10000c1e 	bne	r2,zero,2004c54 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 2004c24:	e0fff717 	ldw	r3,-36(fp)
 2004c28:	e0bff417 	ldw	r2,-48(fp)
 2004c2c:	18800015 	stw	r2,0(r3)
 2004c30:	e0bff717 	ldw	r2,-36(fp)
 2004c34:	10800104 	addi	r2,r2,4
 2004c38:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 2004c3c:	e0bff717 	ldw	r2,-36(fp)
 2004c40:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 2004c44:	e0bff18b 	ldhu	r2,-58(fp)
 2004c48:	10800044 	addi	r2,r2,1
 2004c4c:	e0bff18d 	sth	r2,-58(fp)
 2004c50:	00000a06 	br	2004c7c <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 2004c54:	d0a74517 	ldw	r2,-25324(gp)
 2004c58:	00c00044 	movi	r3,1
 2004c5c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2004c60:	d1274517 	ldw	r4,-25324(gp)
 2004c64:	e17ff617 	ldw	r5,-40(fp)
 2004c68:	20059780 	call	2005978 <OS_EventTaskRemoveMulti>
             }
			 break;
 2004c6c:	00000306 	br	2004c7c <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 2004c70:	d1274517 	ldw	r4,-25324(gp)
 2004c74:	e17ff617 	ldw	r5,-40(fp)
 2004c78:	20059780 	call	2005978 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 2004c7c:	d0a74517 	ldw	r2,-25324(gp)
 2004c80:	10800c43 	ldbu	r2,49(r2)
 2004c84:	10803fcc 	andi	r2,r2,255
 2004c88:	e0bffb15 	stw	r2,-20(fp)
 2004c8c:	e0fffb17 	ldw	r3,-20(fp)
 2004c90:	1805003a 	cmpeq	r2,r3,zero
 2004c94:	1000041e 	bne	r2,zero,2004ca8 <OSEventPendMulti+0x56c>
 2004c98:	e0fffb17 	ldw	r3,-20(fp)
 2004c9c:	188000a0 	cmpeqi	r2,r3,2
 2004ca0:	10002c1e 	bne	r2,zero,2004d54 <OSEventPendMulti+0x618>
 2004ca4:	00003406 	br	2004d78 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 2004ca8:	e0bff417 	ldw	r2,-48(fp)
 2004cac:	10800003 	ldbu	r2,0(r2)
 2004cb0:	10803fcc 	andi	r2,r2,255
 2004cb4:	e0bffa15 	stw	r2,-24(fp)
 2004cb8:	e0fffa17 	ldw	r3,-24(fp)
 2004cbc:	18800050 	cmplti	r2,r3,1
 2004cc0:	1000151e 	bne	r2,zero,2004d18 <OSEventPendMulti+0x5dc>
 2004cc4:	e0fffa17 	ldw	r3,-24(fp)
 2004cc8:	188000d0 	cmplti	r2,r3,3
 2004ccc:	10000a1e 	bne	r2,zero,2004cf8 <OSEventPendMulti+0x5bc>
 2004cd0:	e0fffa17 	ldw	r3,-24(fp)
 2004cd4:	188000e0 	cmpeqi	r2,r3,3
 2004cd8:	1000011e 	bne	r2,zero,2004ce0 <OSEventPendMulti+0x5a4>
 2004cdc:	00000e06 	br	2004d18 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 2004ce0:	e0bff817 	ldw	r2,-32(fp)
 2004ce4:	10000015 	stw	zero,0(r2)
 2004ce8:	e0bff817 	ldw	r2,-32(fp)
 2004cec:	10800104 	addi	r2,r2,4
 2004cf0:	e0bff815 	stw	r2,-32(fp)
                      break;
 2004cf4:	00001406 	br	2004d48 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 2004cf8:	d0a74517 	ldw	r2,-25324(gp)
 2004cfc:	10c00917 	ldw	r3,36(r2)
 2004d00:	e0bff817 	ldw	r2,-32(fp)
 2004d04:	10c00015 	stw	r3,0(r2)
 2004d08:	e0bff817 	ldw	r2,-32(fp)
 2004d0c:	10800104 	addi	r2,r2,4
 2004d10:	e0bff815 	stw	r2,-32(fp)
                      break;
 2004d14:	00000c06 	br	2004d48 <OSEventPendMulti+0x60c>
 2004d18:	e0bff017 	ldw	r2,-64(fp)
 2004d1c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004d20:	e0bfea17 	ldw	r2,-88(fp)
 2004d24:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 2004d28:	e0bff717 	ldw	r2,-36(fp)
 2004d2c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 2004d30:	e0c00217 	ldw	r3,8(fp)
 2004d34:	00800044 	movi	r2,1
 2004d38:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 2004d3c:	e0bff18b 	ldhu	r2,-58(fp)
 2004d40:	e0bfff15 	stw	r2,-4(fp)
 2004d44:	00002406 	br	2004dd8 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 2004d48:	e0800217 	ldw	r2,8(fp)
 2004d4c:	10000005 	stb	zero,0(r2)
             break;
 2004d50:	00001106 	br	2004d98 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 2004d54:	e0bff817 	ldw	r2,-32(fp)
 2004d58:	10000015 	stw	zero,0(r2)
 2004d5c:	e0bff817 	ldw	r2,-32(fp)
 2004d60:	10800104 	addi	r2,r2,4
 2004d64:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 2004d68:	e0c00217 	ldw	r3,8(fp)
 2004d6c:	00800384 	movi	r2,14
 2004d70:	18800005 	stb	r2,0(r3)
             break;
 2004d74:	00000806 	br	2004d98 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 2004d78:	e0bff817 	ldw	r2,-32(fp)
 2004d7c:	10000015 	stw	zero,0(r2)
 2004d80:	e0bff817 	ldw	r2,-32(fp)
 2004d84:	10800104 	addi	r2,r2,4
 2004d88:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 2004d8c:	e0c00217 	ldw	r3,8(fp)
 2004d90:	00800284 	movi	r2,10
 2004d94:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 2004d98:	d0a74517 	ldw	r2,-25324(gp)
 2004d9c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 2004da0:	d0a74517 	ldw	r2,-25324(gp)
 2004da4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 2004da8:	d0a74517 	ldw	r2,-25324(gp)
 2004dac:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2004db0:	d0a74517 	ldw	r2,-25324(gp)
 2004db4:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 2004db8:	d0a74517 	ldw	r2,-25324(gp)
 2004dbc:	10000915 	stw	zero,36(r2)
 2004dc0:	e0bff017 	ldw	r2,-64(fp)
 2004dc4:	e0bfe915 	stw	r2,-92(fp)
 2004dc8:	e0bfe917 	ldw	r2,-92(fp)
 2004dcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 2004dd0:	e0fff18b 	ldhu	r3,-58(fp)
 2004dd4:	e0ffff15 	stw	r3,-4(fp)
 2004dd8:	e0bfff17 	ldw	r2,-4(fp)
}
 2004ddc:	e037883a 	mov	sp,fp
 2004de0:	dfc00117 	ldw	ra,4(sp)
 2004de4:	df000017 	ldw	fp,0(sp)
 2004de8:	dec00204 	addi	sp,sp,8
 2004dec:	f800283a 	ret

02004df0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 2004df0:	defffe04 	addi	sp,sp,-8
 2004df4:	dfc00115 	stw	ra,4(sp)
 2004df8:	df000015 	stw	fp,0(sp)
 2004dfc:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 2004e00:	200f9040 	call	200f904 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 2004e04:	2005bc00 	call	2005bc0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 2004e08:	2005c040 	call	2005c04 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 2004e0c:	2005d680 	call	2005d68 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 2004e10:	2005ae40 	call	2005ae4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 2004e14:	2007e180 	call	2007e18 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 2004e18:	20087f00 	call	20087f0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 2004e1c:	2009b480 	call	2009b48 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 2004e20:	2005c700 	call	2005c70 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 2004e24:	2005cec0 	call	2005cec <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 2004e28:	200f9200 	call	200f920 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 2004e2c:	20065f00 	call	20065f0 <OSDebugInit>
#endif
}
 2004e30:	e037883a 	mov	sp,fp
 2004e34:	dfc00117 	ldw	ra,4(sp)
 2004e38:	df000017 	ldw	fp,0(sp)
 2004e3c:	dec00204 	addi	sp,sp,8
 2004e40:	f800283a 	ret

02004e44 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 2004e44:	defffc04 	addi	sp,sp,-16
 2004e48:	df000315 	stw	fp,12(sp)
 2004e4c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2004e50:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 2004e54:	d0a73643 	ldbu	r2,-25383(gp)
 2004e58:	10803fcc 	andi	r2,r2,255
 2004e5c:	10800058 	cmpnei	r2,r2,1
 2004e60:	1000131e 	bne	r2,zero,2004eb0 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004e64:	0005303a 	rdctl	r2,status
 2004e68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004e6c:	e0fffe17 	ldw	r3,-8(fp)
 2004e70:	00bfff84 	movi	r2,-2
 2004e74:	1884703a 	and	r2,r3,r2
 2004e78:	1001703a 	wrctl	status,r2
  
  return context;
 2004e7c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2004e80:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 2004e84:	d0a74403 	ldbu	r2,-25328(gp)
 2004e88:	10803fcc 	andi	r2,r2,255
 2004e8c:	10803fe0 	cmpeqi	r2,r2,255
 2004e90:	1000031e 	bne	r2,zero,2004ea0 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 2004e94:	d0a74403 	ldbu	r2,-25328(gp)
 2004e98:	10800044 	addi	r2,r2,1
 2004e9c:	d0a74405 	stb	r2,-25328(gp)
 2004ea0:	e0bfff17 	ldw	r2,-4(fp)
 2004ea4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004ea8:	e0bffd17 	ldw	r2,-12(fp)
 2004eac:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 2004eb0:	e037883a 	mov	sp,fp
 2004eb4:	df000017 	ldw	fp,0(sp)
 2004eb8:	dec00104 	addi	sp,sp,4
 2004ebc:	f800283a 	ret

02004ec0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 2004ec0:	defffb04 	addi	sp,sp,-20
 2004ec4:	dfc00415 	stw	ra,16(sp)
 2004ec8:	df000315 	stw	fp,12(sp)
 2004ecc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2004ed0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 2004ed4:	d0a73643 	ldbu	r2,-25383(gp)
 2004ed8:	10803fcc 	andi	r2,r2,255
 2004edc:	10800058 	cmpnei	r2,r2,1
 2004ee0:	1000321e 	bne	r2,zero,2004fac <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004ee4:	0005303a 	rdctl	r2,status
 2004ee8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004eec:	e0fffe17 	ldw	r3,-8(fp)
 2004ef0:	00bfff84 	movi	r2,-2
 2004ef4:	1884703a 	and	r2,r3,r2
 2004ef8:	1001703a 	wrctl	status,r2
  
  return context;
 2004efc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2004f00:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 2004f04:	d0a74403 	ldbu	r2,-25328(gp)
 2004f08:	10803fcc 	andi	r2,r2,255
 2004f0c:	1005003a 	cmpeq	r2,r2,zero
 2004f10:	1000031e 	bne	r2,zero,2004f20 <OSIntExit+0x60>
            OSIntNesting--;
 2004f14:	d0a74403 	ldbu	r2,-25328(gp)
 2004f18:	10bfffc4 	addi	r2,r2,-1
 2004f1c:	d0a74405 	stb	r2,-25328(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 2004f20:	d0a74403 	ldbu	r2,-25328(gp)
 2004f24:	10803fcc 	andi	r2,r2,255
 2004f28:	1004c03a 	cmpne	r2,r2,zero
 2004f2c:	10001b1e 	bne	r2,zero,2004f9c <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 2004f30:	d0a73603 	ldbu	r2,-25384(gp)
 2004f34:	10803fcc 	andi	r2,r2,255
 2004f38:	1004c03a 	cmpne	r2,r2,zero
 2004f3c:	1000171e 	bne	r2,zero,2004f9c <OSIntExit+0xdc>
                OS_SchedNew();
 2004f40:	2005fdc0 	call	2005fdc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 2004f44:	d0a73803 	ldbu	r2,-25376(gp)
 2004f48:	d0e73843 	ldbu	r3,-25375(gp)
 2004f4c:	11003fcc 	andi	r4,r2,255
 2004f50:	18803fcc 	andi	r2,r3,255
 2004f54:	20801126 	beq	r4,r2,2004f9c <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 2004f58:	d0a73803 	ldbu	r2,-25376(gp)
 2004f5c:	10803fcc 	andi	r2,r2,255
 2004f60:	00c080b4 	movhi	r3,514
 2004f64:	18e46304 	addi	r3,r3,-28276
 2004f68:	1085883a 	add	r2,r2,r2
 2004f6c:	1085883a 	add	r2,r2,r2
 2004f70:	10c5883a 	add	r2,r2,r3
 2004f74:	10800017 	ldw	r2,0(r2)
 2004f78:	d0a74015 	stw	r2,-25344(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 2004f7c:	d0e74017 	ldw	r3,-25344(gp)
 2004f80:	18800e17 	ldw	r2,56(r3)
 2004f84:	10800044 	addi	r2,r2,1
 2004f88:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 2004f8c:	d0a73b17 	ldw	r2,-25364(gp)
 2004f90:	10800044 	addi	r2,r2,1
 2004f94:	d0a73b15 	stw	r2,-25364(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 2004f98:	200f4900 	call	200f490 <OSCtxSw>
 2004f9c:	e0bfff17 	ldw	r2,-4(fp)
 2004fa0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004fa4:	e0bffd17 	ldw	r2,-12(fp)
 2004fa8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2004fac:	e037883a 	mov	sp,fp
 2004fb0:	dfc00117 	ldw	ra,4(sp)
 2004fb4:	df000017 	ldw	fp,0(sp)
 2004fb8:	dec00204 	addi	sp,sp,8
 2004fbc:	f800283a 	ret

02004fc0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2004fc0:	defffc04 	addi	sp,sp,-16
 2004fc4:	df000315 	stw	fp,12(sp)
 2004fc8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2004fcc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2004fd0:	d0a73643 	ldbu	r2,-25383(gp)
 2004fd4:	10803fcc 	andi	r2,r2,255
 2004fd8:	10800058 	cmpnei	r2,r2,1
 2004fdc:	1000171e 	bne	r2,zero,200503c <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004fe0:	0005303a 	rdctl	r2,status
 2004fe4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004fe8:	e0fffe17 	ldw	r3,-8(fp)
 2004fec:	00bfff84 	movi	r2,-2
 2004ff0:	1884703a 	and	r2,r3,r2
 2004ff4:	1001703a 	wrctl	status,r2
  
  return context;
 2004ff8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2004ffc:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2005000:	d0a74403 	ldbu	r2,-25328(gp)
 2005004:	10803fcc 	andi	r2,r2,255
 2005008:	1004c03a 	cmpne	r2,r2,zero
 200500c:	1000071e 	bne	r2,zero,200502c <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2005010:	d0a73603 	ldbu	r2,-25384(gp)
 2005014:	10803fcc 	andi	r2,r2,255
 2005018:	10803fe0 	cmpeqi	r2,r2,255
 200501c:	1000031e 	bne	r2,zero,200502c <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 2005020:	d0a73603 	ldbu	r2,-25384(gp)
 2005024:	10800044 	addi	r2,r2,1
 2005028:	d0a73605 	stb	r2,-25384(gp)
 200502c:	e0bfff17 	ldw	r2,-4(fp)
 2005030:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005034:	e0bffd17 	ldw	r2,-12(fp)
 2005038:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 200503c:	e037883a 	mov	sp,fp
 2005040:	df000017 	ldw	fp,0(sp)
 2005044:	dec00104 	addi	sp,sp,4
 2005048:	f800283a 	ret

0200504c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 200504c:	defff804 	addi	sp,sp,-32
 2005050:	dfc00715 	stw	ra,28(sp)
 2005054:	df000615 	stw	fp,24(sp)
 2005058:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 200505c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 2005060:	d0a73643 	ldbu	r2,-25383(gp)
 2005064:	10803fcc 	andi	r2,r2,255
 2005068:	10800058 	cmpnei	r2,r2,1
 200506c:	10002b1e 	bne	r2,zero,200511c <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005070:	0005303a 	rdctl	r2,status
 2005074:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005078:	e0fffe17 	ldw	r3,-8(fp)
 200507c:	00bfff84 	movi	r2,-2
 2005080:	1884703a 	and	r2,r3,r2
 2005084:	1001703a 	wrctl	status,r2
  
  return context;
 2005088:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 200508c:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 2005090:	d0a73603 	ldbu	r2,-25384(gp)
 2005094:	10803fcc 	andi	r2,r2,255
 2005098:	1005003a 	cmpeq	r2,r2,zero
 200509c:	10001b1e 	bne	r2,zero,200510c <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 20050a0:	d0a73603 	ldbu	r2,-25384(gp)
 20050a4:	10bfffc4 	addi	r2,r2,-1
 20050a8:	d0a73605 	stb	r2,-25384(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 20050ac:	d0a73603 	ldbu	r2,-25384(gp)
 20050b0:	10803fcc 	andi	r2,r2,255
 20050b4:	1004c03a 	cmpne	r2,r2,zero
 20050b8:	10000f1e 	bne	r2,zero,20050f8 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 20050bc:	d0a74403 	ldbu	r2,-25328(gp)
 20050c0:	10803fcc 	andi	r2,r2,255
 20050c4:	1004c03a 	cmpne	r2,r2,zero
 20050c8:	1000061e 	bne	r2,zero,20050e4 <OSSchedUnlock+0x98>
 20050cc:	e0bfff17 	ldw	r2,-4(fp)
 20050d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20050d4:	e0bffd17 	ldw	r2,-12(fp)
 20050d8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 20050dc:	2005f080 	call	2005f08 <OS_Sched>
 20050e0:	00000e06 	br	200511c <OSSchedUnlock+0xd0>
 20050e4:	e0bfff17 	ldw	r2,-4(fp)
 20050e8:	e0bffc15 	stw	r2,-16(fp)
 20050ec:	e0bffc17 	ldw	r2,-16(fp)
 20050f0:	1001703a 	wrctl	status,r2
 20050f4:	00000906 	br	200511c <OSSchedUnlock+0xd0>
 20050f8:	e0bfff17 	ldw	r2,-4(fp)
 20050fc:	e0bffb15 	stw	r2,-20(fp)
 2005100:	e0bffb17 	ldw	r2,-20(fp)
 2005104:	1001703a 	wrctl	status,r2
 2005108:	00000406 	br	200511c <OSSchedUnlock+0xd0>
 200510c:	e0bfff17 	ldw	r2,-4(fp)
 2005110:	e0bffa15 	stw	r2,-24(fp)
 2005114:	e0bffa17 	ldw	r2,-24(fp)
 2005118:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 200511c:	e037883a 	mov	sp,fp
 2005120:	dfc00117 	ldw	ra,4(sp)
 2005124:	df000017 	ldw	fp,0(sp)
 2005128:	dec00204 	addi	sp,sp,8
 200512c:	f800283a 	ret

02005130 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 2005130:	defffe04 	addi	sp,sp,-8
 2005134:	dfc00115 	stw	ra,4(sp)
 2005138:	df000015 	stw	fp,0(sp)
 200513c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 2005140:	d0a73643 	ldbu	r2,-25383(gp)
 2005144:	10803fcc 	andi	r2,r2,255
 2005148:	1004c03a 	cmpne	r2,r2,zero
 200514c:	10000f1e 	bne	r2,zero,200518c <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 2005150:	2005fdc0 	call	2005fdc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 2005154:	d0a73803 	ldbu	r2,-25376(gp)
 2005158:	d0a73845 	stb	r2,-25375(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 200515c:	d0a73803 	ldbu	r2,-25376(gp)
 2005160:	10803fcc 	andi	r2,r2,255
 2005164:	00c080b4 	movhi	r3,514
 2005168:	18e46304 	addi	r3,r3,-28276
 200516c:	1085883a 	add	r2,r2,r2
 2005170:	1085883a 	add	r2,r2,r2
 2005174:	10c5883a 	add	r2,r2,r3
 2005178:	10800017 	ldw	r2,0(r2)
 200517c:	d0a74015 	stw	r2,-25344(gp)
        OSTCBCur      = OSTCBHighRdy;
 2005180:	d0a74017 	ldw	r2,-25344(gp)
 2005184:	d0a74515 	stw	r2,-25324(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 2005188:	200f51c0 	call	200f51c <OSStartHighRdy>
    }
}
 200518c:	e037883a 	mov	sp,fp
 2005190:	dfc00117 	ldw	ra,4(sp)
 2005194:	df000017 	ldw	fp,0(sp)
 2005198:	dec00204 	addi	sp,sp,8
 200519c:	f800283a 	ret

020051a0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 20051a0:	defff904 	addi	sp,sp,-28
 20051a4:	dfc00615 	stw	ra,24(sp)
 20051a8:	df000515 	stw	fp,20(sp)
 20051ac:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20051b0:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 20051b4:	01000084 	movi	r4,2
 20051b8:	200c1fc0 	call	200c1fc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20051bc:	0005303a 	rdctl	r2,status
 20051c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20051c4:	e0fffe17 	ldw	r3,-8(fp)
 20051c8:	00bfff84 	movi	r2,-2
 20051cc:	1884703a 	and	r2,r3,r2
 20051d0:	1001703a 	wrctl	status,r2
  
  return context;
 20051d4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 20051d8:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 20051dc:	d0273715 	stw	zero,-25380(gp)
 20051e0:	e0bfff17 	ldw	r2,-4(fp)
 20051e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20051e8:	e0bffd17 	ldw	r2,-12(fp)
 20051ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 20051f0:	01001904 	movi	r4,100
 20051f4:	200c1fc0 	call	200c1fc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20051f8:	0005303a 	rdctl	r2,status
 20051fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005200:	e0fffc17 	ldw	r3,-16(fp)
 2005204:	00bfff84 	movi	r2,-2
 2005208:	1884703a 	and	r2,r3,r2
 200520c:	1001703a 	wrctl	status,r2
  
  return context;
 2005210:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2005214:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 2005218:	d0a73717 	ldw	r2,-25380(gp)
 200521c:	d0a73c15 	stw	r2,-25360(gp)
    OSStatRdy    = OS_TRUE;
 2005220:	00800044 	movi	r2,1
 2005224:	d0a74805 	stb	r2,-25312(gp)
 2005228:	e0bfff17 	ldw	r2,-4(fp)
 200522c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005230:	e0bffb17 	ldw	r2,-20(fp)
 2005234:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2005238:	e037883a 	mov	sp,fp
 200523c:	dfc00117 	ldw	ra,4(sp)
 2005240:	df000017 	ldw	fp,0(sp)
 2005244:	dec00204 	addi	sp,sp,8
 2005248:	f800283a 	ret

0200524c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 200524c:	defff604 	addi	sp,sp,-40
 2005250:	dfc00915 	stw	ra,36(sp)
 2005254:	df000815 	stw	fp,32(sp)
 2005258:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 200525c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 2005260:	200f8e80 	call	200f8e8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005264:	0005303a 	rdctl	r2,status
 2005268:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200526c:	e0fffb17 	ldw	r3,-20(fp)
 2005270:	00bfff84 	movi	r2,-2
 2005274:	1884703a 	and	r2,r3,r2
 2005278:	1001703a 	wrctl	status,r2
  
  return context;
 200527c:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 2005280:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 2005284:	d0a74617 	ldw	r2,-25320(gp)
 2005288:	10800044 	addi	r2,r2,1
 200528c:	d0a74615 	stw	r2,-25320(gp)
 2005290:	e0bffc17 	ldw	r2,-16(fp)
 2005294:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005298:	e0bffa17 	ldw	r2,-24(fp)
 200529c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 20052a0:	d0a73643 	ldbu	r2,-25383(gp)
 20052a4:	10803fcc 	andi	r2,r2,255
 20052a8:	10800058 	cmpnei	r2,r2,1
 20052ac:	1000721e 	bne	r2,zero,2005478 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 20052b0:	d0a73a03 	ldbu	r2,-25368(gp)
 20052b4:	10803fcc 	andi	r2,r2,255
 20052b8:	e0bfff15 	stw	r2,-4(fp)
 20052bc:	e0ffff17 	ldw	r3,-4(fp)
 20052c0:	18800060 	cmpeqi	r2,r3,1
 20052c4:	10000a1e 	bne	r2,zero,20052f0 <OSTimeTick+0xa4>
 20052c8:	e0ffff17 	ldw	r3,-4(fp)
 20052cc:	188000a0 	cmpeqi	r2,r3,2
 20052d0:	1000091e 	bne	r2,zero,20052f8 <OSTimeTick+0xac>
 20052d4:	e0ffff17 	ldw	r3,-4(fp)
 20052d8:	1805003a 	cmpeq	r2,r3,zero
 20052dc:	1000011e 	bne	r2,zero,20052e4 <OSTimeTick+0x98>
 20052e0:	00000a06 	br	200530c <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 20052e4:	00800044 	movi	r2,1
 20052e8:	e0bffd05 	stb	r2,-12(fp)
                 break;
 20052ec:	00000a06 	br	2005318 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 20052f0:	e03ffd05 	stb	zero,-12(fp)
                 break;
 20052f4:	00000806 	br	2005318 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 20052f8:	00800044 	movi	r2,1
 20052fc:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2005300:	00800044 	movi	r2,1
 2005304:	d0a73a05 	stb	r2,-25368(gp)
                 break;
 2005308:	00000306 	br	2005318 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 200530c:	00800044 	movi	r2,1
 2005310:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2005314:	d0273a05 	stb	zero,-25368(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 2005318:	e0bffd03 	ldbu	r2,-12(fp)
 200531c:	1005003a 	cmpeq	r2,r2,zero
 2005320:	1000551e 	bne	r2,zero,2005478 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2005324:	d0a73917 	ldw	r2,-25372(gp)
 2005328:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 200532c:	00004d06 	br	2005464 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005330:	0005303a 	rdctl	r2,status
 2005334:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005338:	e0fff917 	ldw	r3,-28(fp)
 200533c:	00bfff84 	movi	r2,-2
 2005340:	1884703a 	and	r2,r3,r2
 2005344:	1001703a 	wrctl	status,r2
  
  return context;
 2005348:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 200534c:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 2005350:	e0bffe17 	ldw	r2,-8(fp)
 2005354:	10800b8b 	ldhu	r2,46(r2)
 2005358:	10bfffcc 	andi	r2,r2,65535
 200535c:	1005003a 	cmpeq	r2,r2,zero
 2005360:	1000391e 	bne	r2,zero,2005448 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 2005364:	e0bffe17 	ldw	r2,-8(fp)
 2005368:	10800b8b 	ldhu	r2,46(r2)
 200536c:	10bfffc4 	addi	r2,r2,-1
 2005370:	1007883a 	mov	r3,r2
 2005374:	e0bffe17 	ldw	r2,-8(fp)
 2005378:	10c00b8d 	sth	r3,46(r2)
 200537c:	e0bffe17 	ldw	r2,-8(fp)
 2005380:	10800b8b 	ldhu	r2,46(r2)
 2005384:	10bfffcc 	andi	r2,r2,65535
 2005388:	1004c03a 	cmpne	r2,r2,zero
 200538c:	10002e1e 	bne	r2,zero,2005448 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2005390:	e0bffe17 	ldw	r2,-8(fp)
 2005394:	10800c03 	ldbu	r2,48(r2)
 2005398:	10803fcc 	andi	r2,r2,255
 200539c:	10800dcc 	andi	r2,r2,55
 20053a0:	1005003a 	cmpeq	r2,r2,zero
 20053a4:	10000b1e 	bne	r2,zero,20053d4 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 20053a8:	e0bffe17 	ldw	r2,-8(fp)
 20053ac:	10c00c03 	ldbu	r3,48(r2)
 20053b0:	00bff204 	movi	r2,-56
 20053b4:	1884703a 	and	r2,r3,r2
 20053b8:	1007883a 	mov	r3,r2
 20053bc:	e0bffe17 	ldw	r2,-8(fp)
 20053c0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 20053c4:	e0fffe17 	ldw	r3,-8(fp)
 20053c8:	00800044 	movi	r2,1
 20053cc:	18800c45 	stb	r2,49(r3)
 20053d0:	00000206 	br	20053dc <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 20053d4:	e0bffe17 	ldw	r2,-8(fp)
 20053d8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 20053dc:	e0bffe17 	ldw	r2,-8(fp)
 20053e0:	10800c03 	ldbu	r2,48(r2)
 20053e4:	10803fcc 	andi	r2,r2,255
 20053e8:	1080020c 	andi	r2,r2,8
 20053ec:	1004c03a 	cmpne	r2,r2,zero
 20053f0:	1000151e 	bne	r2,zero,2005448 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 20053f4:	e0bffe17 	ldw	r2,-8(fp)
 20053f8:	10c00d83 	ldbu	r3,54(r2)
 20053fc:	d0a74203 	ldbu	r2,-25336(gp)
 2005400:	1884b03a 	or	r2,r3,r2
 2005404:	d0a74205 	stb	r2,-25336(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2005408:	e0bffe17 	ldw	r2,-8(fp)
 200540c:	10800d03 	ldbu	r2,52(r2)
 2005410:	11003fcc 	andi	r4,r2,255
 2005414:	e0bffe17 	ldw	r2,-8(fp)
 2005418:	10800d03 	ldbu	r2,52(r2)
 200541c:	10c03fcc 	andi	r3,r2,255
 2005420:	d0a74244 	addi	r2,gp,-25335
 2005424:	1885883a 	add	r2,r3,r2
 2005428:	10c00003 	ldbu	r3,0(r2)
 200542c:	e0bffe17 	ldw	r2,-8(fp)
 2005430:	10800d43 	ldbu	r2,53(r2)
 2005434:	1884b03a 	or	r2,r3,r2
 2005438:	1007883a 	mov	r3,r2
 200543c:	d0a74244 	addi	r2,gp,-25335
 2005440:	2085883a 	add	r2,r4,r2
 2005444:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 2005448:	e0bffe17 	ldw	r2,-8(fp)
 200544c:	10800517 	ldw	r2,20(r2)
 2005450:	e0bffe15 	stw	r2,-8(fp)
 2005454:	e0bffc17 	ldw	r2,-16(fp)
 2005458:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200545c:	e0bff817 	ldw	r2,-32(fp)
 2005460:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2005464:	e0bffe17 	ldw	r2,-8(fp)
 2005468:	10800c83 	ldbu	r2,50(r2)
 200546c:	10803fcc 	andi	r2,r2,255
 2005470:	10800518 	cmpnei	r2,r2,20
 2005474:	103fae1e 	bne	r2,zero,2005330 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 2005478:	e037883a 	mov	sp,fp
 200547c:	dfc00117 	ldw	ra,4(sp)
 2005480:	df000017 	ldw	fp,0(sp)
 2005484:	dec00204 	addi	sp,sp,8
 2005488:	f800283a 	ret

0200548c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 200548c:	deffff04 	addi	sp,sp,-4
 2005490:	df000015 	stw	fp,0(sp)
 2005494:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 2005498:	00804784 	movi	r2,286
}
 200549c:	e037883a 	mov	sp,fp
 20054a0:	df000017 	ldw	fp,0(sp)
 20054a4:	dec00104 	addi	sp,sp,4
 20054a8:	f800283a 	ret

020054ac <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 20054ac:	deffff04 	addi	sp,sp,-4
 20054b0:	df000015 	stw	fp,0(sp)
 20054b4:	d839883a 	mov	fp,sp
}
 20054b8:	e037883a 	mov	sp,fp
 20054bc:	df000017 	ldw	fp,0(sp)
 20054c0:	dec00104 	addi	sp,sp,4
 20054c4:	f800283a 	ret

020054c8 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 20054c8:	defff804 	addi	sp,sp,-32
 20054cc:	dfc00715 	stw	ra,28(sp)
 20054d0:	df000615 	stw	fp,24(sp)
 20054d4:	df000604 	addi	fp,sp,24
 20054d8:	e13ffc15 	stw	r4,-16(fp)
 20054dc:	e17ffd15 	stw	r5,-12(fp)
 20054e0:	e1bffe05 	stb	r6,-8(fp)
 20054e4:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 20054e8:	e0bffc17 	ldw	r2,-16(fp)
 20054ec:	10800283 	ldbu	r2,10(r2)
 20054f0:	10c03fcc 	andi	r3,r2,255
 20054f4:	00808074 	movhi	r2,513
 20054f8:	10817704 	addi	r2,r2,1500
 20054fc:	10c5883a 	add	r2,r2,r3
 2005500:	10800003 	ldbu	r2,0(r2)
 2005504:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 2005508:	e0fffa83 	ldbu	r3,-22(fp)
 200550c:	e0bffc17 	ldw	r2,-16(fp)
 2005510:	1885883a 	add	r2,r3,r2
 2005514:	10800204 	addi	r2,r2,8
 2005518:	108000c3 	ldbu	r2,3(r2)
 200551c:	10c03fcc 	andi	r3,r2,255
 2005520:	00808074 	movhi	r2,513
 2005524:	10817704 	addi	r2,r2,1500
 2005528:	10c5883a 	add	r2,r2,r3
 200552c:	10800003 	ldbu	r2,0(r2)
 2005530:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 2005534:	e0bffa83 	ldbu	r2,-22(fp)
 2005538:	100490fa 	slli	r2,r2,3
 200553c:	1007883a 	mov	r3,r2
 2005540:	e0bffa43 	ldbu	r2,-23(fp)
 2005544:	1885883a 	add	r2,r3,r2
 2005548:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 200554c:	e0bffa03 	ldbu	r2,-24(fp)
 2005550:	00c080b4 	movhi	r3,514
 2005554:	18e46304 	addi	r3,r3,-28276
 2005558:	1085883a 	add	r2,r2,r2
 200555c:	1085883a 	add	r2,r2,r2
 2005560:	10c5883a 	add	r2,r2,r3
 2005564:	10800017 	ldw	r2,0(r2)
 2005568:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 200556c:	e0bffb17 	ldw	r2,-20(fp)
 2005570:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 2005574:	e0fffb17 	ldw	r3,-20(fp)
 2005578:	e0bffd17 	ldw	r2,-12(fp)
 200557c:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 2005580:	e0bffb17 	ldw	r2,-20(fp)
 2005584:	10800c03 	ldbu	r2,48(r2)
 2005588:	1007883a 	mov	r3,r2
 200558c:	e0bffe03 	ldbu	r2,-8(fp)
 2005590:	0084303a 	nor	r2,zero,r2
 2005594:	1884703a 	and	r2,r3,r2
 2005598:	1007883a 	mov	r3,r2
 200559c:	e0bffb17 	ldw	r2,-20(fp)
 20055a0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 20055a4:	e0fffb17 	ldw	r3,-20(fp)
 20055a8:	e0bfff03 	ldbu	r2,-4(fp)
 20055ac:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 20055b0:	e0bffb17 	ldw	r2,-20(fp)
 20055b4:	10800c03 	ldbu	r2,48(r2)
 20055b8:	10803fcc 	andi	r2,r2,255
 20055bc:	1080020c 	andi	r2,r2,8
 20055c0:	1004c03a 	cmpne	r2,r2,zero
 20055c4:	1000111e 	bne	r2,zero,200560c <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 20055c8:	e0bffb17 	ldw	r2,-20(fp)
 20055cc:	10c00d83 	ldbu	r3,54(r2)
 20055d0:	d0a74203 	ldbu	r2,-25336(gp)
 20055d4:	1884b03a 	or	r2,r3,r2
 20055d8:	d0a74205 	stb	r2,-25336(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 20055dc:	e13ffa83 	ldbu	r4,-22(fp)
 20055e0:	e0fffa83 	ldbu	r3,-22(fp)
 20055e4:	d0a74244 	addi	r2,gp,-25335
 20055e8:	1885883a 	add	r2,r3,r2
 20055ec:	10c00003 	ldbu	r3,0(r2)
 20055f0:	e0bffb17 	ldw	r2,-20(fp)
 20055f4:	10800d43 	ldbu	r2,53(r2)
 20055f8:	1884b03a 	or	r2,r3,r2
 20055fc:	1007883a 	mov	r3,r2
 2005600:	d0a74244 	addi	r2,gp,-25335
 2005604:	2085883a 	add	r2,r4,r2
 2005608:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 200560c:	e13ffb17 	ldw	r4,-20(fp)
 2005610:	e17ffc17 	ldw	r5,-16(fp)
 2005614:	20058c00 	call	20058c0 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 2005618:	e0bffb17 	ldw	r2,-20(fp)
 200561c:	10800817 	ldw	r2,32(r2)
 2005620:	1005003a 	cmpeq	r2,r2,zero
 2005624:	1000071e 	bne	r2,zero,2005644 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2005628:	e0bffb17 	ldw	r2,-20(fp)
 200562c:	11400817 	ldw	r5,32(r2)
 2005630:	e13ffb17 	ldw	r4,-20(fp)
 2005634:	20059780 	call	2005978 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 2005638:	e0fffb17 	ldw	r3,-20(fp)
 200563c:	e0bffc17 	ldw	r2,-16(fp)
 2005640:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 2005644:	e0bffa03 	ldbu	r2,-24(fp)
}
 2005648:	e037883a 	mov	sp,fp
 200564c:	dfc00117 	ldw	ra,4(sp)
 2005650:	df000017 	ldw	fp,0(sp)
 2005654:	dec00204 	addi	sp,sp,8
 2005658:	f800283a 	ret

0200565c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 200565c:	defffd04 	addi	sp,sp,-12
 2005660:	df000215 	stw	fp,8(sp)
 2005664:	df000204 	addi	fp,sp,8
 2005668:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 200566c:	d0e74517 	ldw	r3,-25324(gp)
 2005670:	e0bfff17 	ldw	r2,-4(fp)
 2005674:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 2005678:	d0a74517 	ldw	r2,-25324(gp)
 200567c:	10800d03 	ldbu	r2,52(r2)
 2005680:	11003fcc 	andi	r4,r2,255
 2005684:	d0a74517 	ldw	r2,-25324(gp)
 2005688:	10800d03 	ldbu	r2,52(r2)
 200568c:	10c03fcc 	andi	r3,r2,255
 2005690:	e0bfff17 	ldw	r2,-4(fp)
 2005694:	1885883a 	add	r2,r3,r2
 2005698:	10800204 	addi	r2,r2,8
 200569c:	10c000c3 	ldbu	r3,3(r2)
 20056a0:	d0a74517 	ldw	r2,-25324(gp)
 20056a4:	10800d43 	ldbu	r2,53(r2)
 20056a8:	1884b03a 	or	r2,r3,r2
 20056ac:	1007883a 	mov	r3,r2
 20056b0:	e0bfff17 	ldw	r2,-4(fp)
 20056b4:	2085883a 	add	r2,r4,r2
 20056b8:	10800204 	addi	r2,r2,8
 20056bc:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 20056c0:	e0bfff17 	ldw	r2,-4(fp)
 20056c4:	10c00283 	ldbu	r3,10(r2)
 20056c8:	d0a74517 	ldw	r2,-25324(gp)
 20056cc:	10800d83 	ldbu	r2,54(r2)
 20056d0:	1884b03a 	or	r2,r3,r2
 20056d4:	1007883a 	mov	r3,r2
 20056d8:	e0bfff17 	ldw	r2,-4(fp)
 20056dc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 20056e0:	d0a74517 	ldw	r2,-25324(gp)
 20056e4:	10800d03 	ldbu	r2,52(r2)
 20056e8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 20056ec:	e13ffe03 	ldbu	r4,-8(fp)
 20056f0:	e0fffe03 	ldbu	r3,-8(fp)
 20056f4:	d0a74244 	addi	r2,gp,-25335
 20056f8:	1885883a 	add	r2,r3,r2
 20056fc:	10800003 	ldbu	r2,0(r2)
 2005700:	1007883a 	mov	r3,r2
 2005704:	d0a74517 	ldw	r2,-25324(gp)
 2005708:	10800d43 	ldbu	r2,53(r2)
 200570c:	0084303a 	nor	r2,zero,r2
 2005710:	1884703a 	and	r2,r3,r2
 2005714:	1007883a 	mov	r3,r2
 2005718:	d0a74244 	addi	r2,gp,-25335
 200571c:	2085883a 	add	r2,r4,r2
 2005720:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 2005724:	e0fffe03 	ldbu	r3,-8(fp)
 2005728:	d0a74244 	addi	r2,gp,-25335
 200572c:	1885883a 	add	r2,r3,r2
 2005730:	10800003 	ldbu	r2,0(r2)
 2005734:	10803fcc 	andi	r2,r2,255
 2005738:	1004c03a 	cmpne	r2,r2,zero
 200573c:	1000071e 	bne	r2,zero,200575c <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2005740:	d0a74517 	ldw	r2,-25324(gp)
 2005744:	10800d83 	ldbu	r2,54(r2)
 2005748:	0084303a 	nor	r2,zero,r2
 200574c:	1007883a 	mov	r3,r2
 2005750:	d0a74203 	ldbu	r2,-25336(gp)
 2005754:	1884703a 	and	r2,r3,r2
 2005758:	d0a74205 	stb	r2,-25336(gp)
    }
}
 200575c:	e037883a 	mov	sp,fp
 2005760:	df000017 	ldw	fp,0(sp)
 2005764:	dec00104 	addi	sp,sp,4
 2005768:	f800283a 	ret

0200576c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 200576c:	defffb04 	addi	sp,sp,-20
 2005770:	df000415 	stw	fp,16(sp)
 2005774:	df000404 	addi	fp,sp,16
 2005778:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 200577c:	d0a74517 	ldw	r2,-25324(gp)
 2005780:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 2005784:	d0e74517 	ldw	r3,-25324(gp)
 2005788:	e0bfff17 	ldw	r2,-4(fp)
 200578c:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 2005790:	e0bfff17 	ldw	r2,-4(fp)
 2005794:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 2005798:	e0bffe17 	ldw	r2,-8(fp)
 200579c:	10800017 	ldw	r2,0(r2)
 20057a0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 20057a4:	00002006 	br	2005828 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 20057a8:	d0a74517 	ldw	r2,-25324(gp)
 20057ac:	10800d03 	ldbu	r2,52(r2)
 20057b0:	11003fcc 	andi	r4,r2,255
 20057b4:	d0a74517 	ldw	r2,-25324(gp)
 20057b8:	10800d03 	ldbu	r2,52(r2)
 20057bc:	10c03fcc 	andi	r3,r2,255
 20057c0:	e0bffd17 	ldw	r2,-12(fp)
 20057c4:	1885883a 	add	r2,r3,r2
 20057c8:	10800204 	addi	r2,r2,8
 20057cc:	10c000c3 	ldbu	r3,3(r2)
 20057d0:	d0a74517 	ldw	r2,-25324(gp)
 20057d4:	10800d43 	ldbu	r2,53(r2)
 20057d8:	1884b03a 	or	r2,r3,r2
 20057dc:	1007883a 	mov	r3,r2
 20057e0:	e0bffd17 	ldw	r2,-12(fp)
 20057e4:	2085883a 	add	r2,r4,r2
 20057e8:	10800204 	addi	r2,r2,8
 20057ec:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 20057f0:	e0bffd17 	ldw	r2,-12(fp)
 20057f4:	10c00283 	ldbu	r3,10(r2)
 20057f8:	d0a74517 	ldw	r2,-25324(gp)
 20057fc:	10800d83 	ldbu	r2,54(r2)
 2005800:	1884b03a 	or	r2,r3,r2
 2005804:	1007883a 	mov	r3,r2
 2005808:	e0bffd17 	ldw	r2,-12(fp)
 200580c:	10c00285 	stb	r3,10(r2)
        pevents++;
 2005810:	e0bffe17 	ldw	r2,-8(fp)
 2005814:	10800104 	addi	r2,r2,4
 2005818:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 200581c:	e0bffe17 	ldw	r2,-8(fp)
 2005820:	10800017 	ldw	r2,0(r2)
 2005824:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2005828:	e0bffd17 	ldw	r2,-12(fp)
 200582c:	1004c03a 	cmpne	r2,r2,zero
 2005830:	103fdd1e 	bne	r2,zero,20057a8 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2005834:	d0a74517 	ldw	r2,-25324(gp)
 2005838:	10800d03 	ldbu	r2,52(r2)
 200583c:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2005840:	e13ffc03 	ldbu	r4,-16(fp)
 2005844:	e0fffc03 	ldbu	r3,-16(fp)
 2005848:	d0a74244 	addi	r2,gp,-25335
 200584c:	1885883a 	add	r2,r3,r2
 2005850:	10800003 	ldbu	r2,0(r2)
 2005854:	1007883a 	mov	r3,r2
 2005858:	d0a74517 	ldw	r2,-25324(gp)
 200585c:	10800d43 	ldbu	r2,53(r2)
 2005860:	0084303a 	nor	r2,zero,r2
 2005864:	1884703a 	and	r2,r3,r2
 2005868:	1007883a 	mov	r3,r2
 200586c:	d0a74244 	addi	r2,gp,-25335
 2005870:	2085883a 	add	r2,r4,r2
 2005874:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 2005878:	e0fffc03 	ldbu	r3,-16(fp)
 200587c:	d0a74244 	addi	r2,gp,-25335
 2005880:	1885883a 	add	r2,r3,r2
 2005884:	10800003 	ldbu	r2,0(r2)
 2005888:	10803fcc 	andi	r2,r2,255
 200588c:	1004c03a 	cmpne	r2,r2,zero
 2005890:	1000071e 	bne	r2,zero,20058b0 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 2005894:	d0a74517 	ldw	r2,-25324(gp)
 2005898:	10800d83 	ldbu	r2,54(r2)
 200589c:	0084303a 	nor	r2,zero,r2
 20058a0:	1007883a 	mov	r3,r2
 20058a4:	d0a74203 	ldbu	r2,-25336(gp)
 20058a8:	1884703a 	and	r2,r3,r2
 20058ac:	d0a74205 	stb	r2,-25336(gp)
    }
}
 20058b0:	e037883a 	mov	sp,fp
 20058b4:	df000017 	ldw	fp,0(sp)
 20058b8:	dec00104 	addi	sp,sp,4
 20058bc:	f800283a 	ret

020058c0 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 20058c0:	defffc04 	addi	sp,sp,-16
 20058c4:	df000315 	stw	fp,12(sp)
 20058c8:	df000304 	addi	fp,sp,12
 20058cc:	e13ffe15 	stw	r4,-8(fp)
 20058d0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 20058d4:	e0bffe17 	ldw	r2,-8(fp)
 20058d8:	10800d03 	ldbu	r2,52(r2)
 20058dc:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 20058e0:	e13ffd03 	ldbu	r4,-12(fp)
 20058e4:	e0fffd03 	ldbu	r3,-12(fp)
 20058e8:	e0bfff17 	ldw	r2,-4(fp)
 20058ec:	1885883a 	add	r2,r3,r2
 20058f0:	10800204 	addi	r2,r2,8
 20058f4:	108000c3 	ldbu	r2,3(r2)
 20058f8:	1007883a 	mov	r3,r2
 20058fc:	e0bffe17 	ldw	r2,-8(fp)
 2005900:	10800d43 	ldbu	r2,53(r2)
 2005904:	0084303a 	nor	r2,zero,r2
 2005908:	1884703a 	and	r2,r3,r2
 200590c:	1007883a 	mov	r3,r2
 2005910:	e0bfff17 	ldw	r2,-4(fp)
 2005914:	2085883a 	add	r2,r4,r2
 2005918:	10800204 	addi	r2,r2,8
 200591c:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 2005920:	e0fffd03 	ldbu	r3,-12(fp)
 2005924:	e0bfff17 	ldw	r2,-4(fp)
 2005928:	1885883a 	add	r2,r3,r2
 200592c:	10800204 	addi	r2,r2,8
 2005930:	108000c3 	ldbu	r2,3(r2)
 2005934:	10803fcc 	andi	r2,r2,255
 2005938:	1004c03a 	cmpne	r2,r2,zero
 200593c:	10000a1e 	bne	r2,zero,2005968 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 2005940:	e0bfff17 	ldw	r2,-4(fp)
 2005944:	10800283 	ldbu	r2,10(r2)
 2005948:	1007883a 	mov	r3,r2
 200594c:	e0bffe17 	ldw	r2,-8(fp)
 2005950:	10800d83 	ldbu	r2,54(r2)
 2005954:	0084303a 	nor	r2,zero,r2
 2005958:	1884703a 	and	r2,r3,r2
 200595c:	1007883a 	mov	r3,r2
 2005960:	e0bfff17 	ldw	r2,-4(fp)
 2005964:	10c00285 	stb	r3,10(r2)
    }
}
 2005968:	e037883a 	mov	sp,fp
 200596c:	df000017 	ldw	fp,0(sp)
 2005970:	dec00104 	addi	sp,sp,4
 2005974:	f800283a 	ret

02005978 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 2005978:	defffa04 	addi	sp,sp,-24
 200597c:	df000515 	stw	fp,20(sp)
 2005980:	df000504 	addi	fp,sp,20
 2005984:	e13ffe15 	stw	r4,-8(fp)
 2005988:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 200598c:	e0bffe17 	ldw	r2,-8(fp)
 2005990:	10800d03 	ldbu	r2,52(r2)
 2005994:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 2005998:	e0bffe17 	ldw	r2,-8(fp)
 200599c:	10800d83 	ldbu	r2,54(r2)
 20059a0:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 20059a4:	e0bffe17 	ldw	r2,-8(fp)
 20059a8:	10800d43 	ldbu	r2,53(r2)
 20059ac:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 20059b0:	e0bfff17 	ldw	r2,-4(fp)
 20059b4:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 20059b8:	e0bffd17 	ldw	r2,-12(fp)
 20059bc:	10800017 	ldw	r2,0(r2)
 20059c0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 20059c4:	00002606 	br	2005a60 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 20059c8:	e13ffb83 	ldbu	r4,-18(fp)
 20059cc:	e0fffb83 	ldbu	r3,-18(fp)
 20059d0:	e0bffc17 	ldw	r2,-16(fp)
 20059d4:	1885883a 	add	r2,r3,r2
 20059d8:	10800204 	addi	r2,r2,8
 20059dc:	108000c3 	ldbu	r2,3(r2)
 20059e0:	1007883a 	mov	r3,r2
 20059e4:	e0bffb03 	ldbu	r2,-20(fp)
 20059e8:	0084303a 	nor	r2,zero,r2
 20059ec:	1884703a 	and	r2,r3,r2
 20059f0:	1007883a 	mov	r3,r2
 20059f4:	e0bffc17 	ldw	r2,-16(fp)
 20059f8:	2085883a 	add	r2,r4,r2
 20059fc:	10800204 	addi	r2,r2,8
 2005a00:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 2005a04:	e0fffb83 	ldbu	r3,-18(fp)
 2005a08:	e0bffc17 	ldw	r2,-16(fp)
 2005a0c:	1885883a 	add	r2,r3,r2
 2005a10:	10800204 	addi	r2,r2,8
 2005a14:	108000c3 	ldbu	r2,3(r2)
 2005a18:	10803fcc 	andi	r2,r2,255
 2005a1c:	1004c03a 	cmpne	r2,r2,zero
 2005a20:	1000091e 	bne	r2,zero,2005a48 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 2005a24:	e0bffc17 	ldw	r2,-16(fp)
 2005a28:	10800283 	ldbu	r2,10(r2)
 2005a2c:	1007883a 	mov	r3,r2
 2005a30:	e0bffb43 	ldbu	r2,-19(fp)
 2005a34:	0084303a 	nor	r2,zero,r2
 2005a38:	1884703a 	and	r2,r3,r2
 2005a3c:	1007883a 	mov	r3,r2
 2005a40:	e0bffc17 	ldw	r2,-16(fp)
 2005a44:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 2005a48:	e0bffd17 	ldw	r2,-12(fp)
 2005a4c:	10800104 	addi	r2,r2,4
 2005a50:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 2005a54:	e0bffd17 	ldw	r2,-12(fp)
 2005a58:	10800017 	ldw	r2,0(r2)
 2005a5c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2005a60:	e0bffc17 	ldw	r2,-16(fp)
 2005a64:	1004c03a 	cmpne	r2,r2,zero
 2005a68:	103fd71e 	bne	r2,zero,20059c8 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 2005a6c:	e037883a 	mov	sp,fp
 2005a70:	df000017 	ldw	fp,0(sp)
 2005a74:	dec00104 	addi	sp,sp,4
 2005a78:	f800283a 	ret

02005a7c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 2005a7c:	defffc04 	addi	sp,sp,-16
 2005a80:	df000315 	stw	fp,12(sp)
 2005a84:	df000304 	addi	fp,sp,12
 2005a88:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 2005a8c:	e0bfff17 	ldw	r2,-4(fp)
 2005a90:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 2005a94:	e0bfff17 	ldw	r2,-4(fp)
 2005a98:	108002c4 	addi	r2,r2,11
 2005a9c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2005aa0:	e03ffd05 	stb	zero,-12(fp)
 2005aa4:	00000806 	br	2005ac8 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 2005aa8:	e0bffe17 	ldw	r2,-8(fp)
 2005aac:	10000005 	stb	zero,0(r2)
 2005ab0:	e0bffe17 	ldw	r2,-8(fp)
 2005ab4:	10800044 	addi	r2,r2,1
 2005ab8:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2005abc:	e0bffd03 	ldbu	r2,-12(fp)
 2005ac0:	10800044 	addi	r2,r2,1
 2005ac4:	e0bffd05 	stb	r2,-12(fp)
 2005ac8:	e0bffd03 	ldbu	r2,-12(fp)
 2005acc:	108000f0 	cmpltui	r2,r2,3
 2005ad0:	103ff51e 	bne	r2,zero,2005aa8 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2005ad4:	e037883a 	mov	sp,fp
 2005ad8:	df000017 	ldw	fp,0(sp)
 2005adc:	dec00104 	addi	sp,sp,4
 2005ae0:	f800283a 	ret

02005ae4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2005ae4:	defffb04 	addi	sp,sp,-20
 2005ae8:	dfc00415 	stw	ra,16(sp)
 2005aec:	df000315 	stw	fp,12(sp)
 2005af0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2005af4:	010080b4 	movhi	r4,514
 2005af8:	21204f04 	addi	r4,r4,-32452
 2005afc:	0142d004 	movi	r5,2880
 2005b00:	2005e480 	call	2005e48 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 2005b04:	008080b4 	movhi	r2,514
 2005b08:	10a04f04 	addi	r2,r2,-32452
 2005b0c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 2005b10:	008080b4 	movhi	r2,514
 2005b14:	10a05b04 	addi	r2,r2,-32404
 2005b18:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2005b1c:	e03fff0d 	sth	zero,-4(fp)
 2005b20:	00001306 	br	2005b70 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2005b24:	e0bffe17 	ldw	r2,-8(fp)
 2005b28:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 2005b2c:	e0fffe17 	ldw	r3,-8(fp)
 2005b30:	e0bffd17 	ldw	r2,-12(fp)
 2005b34:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 2005b38:	e0fffe17 	ldw	r3,-8(fp)
 2005b3c:	00800fc4 	movi	r2,63
 2005b40:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 2005b44:	e0bffe17 	ldw	r2,-8(fp)
 2005b48:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 2005b4c:	e0bffe17 	ldw	r2,-8(fp)
 2005b50:	10800c04 	addi	r2,r2,48
 2005b54:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 2005b58:	e0bffd17 	ldw	r2,-12(fp)
 2005b5c:	10800c04 	addi	r2,r2,48
 2005b60:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2005b64:	e0bfff0b 	ldhu	r2,-4(fp)
 2005b68:	10800044 	addi	r2,r2,1
 2005b6c:	e0bfff0d 	sth	r2,-4(fp)
 2005b70:	e0bfff0b 	ldhu	r2,-4(fp)
 2005b74:	10800ef0 	cmpltui	r2,r2,59
 2005b78:	103fea1e 	bne	r2,zero,2005b24 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 2005b7c:	e0bffe17 	ldw	r2,-8(fp)
 2005b80:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 2005b84:	e0bffe17 	ldw	r2,-8(fp)
 2005b88:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 2005b8c:	e0fffe17 	ldw	r3,-8(fp)
 2005b90:	00800fc4 	movi	r2,63
 2005b94:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 2005b98:	e0bffe17 	ldw	r2,-8(fp)
 2005b9c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2005ba0:	008080b4 	movhi	r2,514
 2005ba4:	10a04f04 	addi	r2,r2,-32452
 2005ba8:	d0a74315 	stw	r2,-25332(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2005bac:	e037883a 	mov	sp,fp
 2005bb0:	dfc00117 	ldw	ra,4(sp)
 2005bb4:	df000017 	ldw	fp,0(sp)
 2005bb8:	dec00204 	addi	sp,sp,8
 2005bbc:	f800283a 	ret

02005bc0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2005bc0:	deffff04 	addi	sp,sp,-4
 2005bc4:	df000015 	stw	fp,0(sp)
 2005bc8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 2005bcc:	d0274615 	stw	zero,-25320(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2005bd0:	d0274405 	stb	zero,-25328(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2005bd4:	d0273605 	stb	zero,-25384(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 2005bd8:	d0273e45 	stb	zero,-25351(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 2005bdc:	d0273645 	stb	zero,-25383(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2005be0:	d0273b15 	stw	zero,-25364(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2005be4:	d0273715 	stw	zero,-25380(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 2005be8:	d0274915 	stw	zero,-25308(gp)
    OSIdleCtrMax  = 0L;
 2005bec:	d0273c15 	stw	zero,-25360(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2005bf0:	d0274805 	stb	zero,-25312(gp)
#endif
}
 2005bf4:	e037883a 	mov	sp,fp
 2005bf8:	df000017 	ldw	fp,0(sp)
 2005bfc:	dec00104 	addi	sp,sp,4
 2005c00:	f800283a 	ret

02005c04 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 2005c04:	defffd04 	addi	sp,sp,-12
 2005c08:	df000215 	stw	fp,8(sp)
 2005c0c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 2005c10:	d0274205 	stb	zero,-25336(gp)
    prdytbl       = &OSRdyTbl[0];
 2005c14:	d0a74244 	addi	r2,gp,-25335
 2005c18:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2005c1c:	e03fff05 	stb	zero,-4(fp)
 2005c20:	00000806 	br	2005c44 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 2005c24:	e0bffe17 	ldw	r2,-8(fp)
 2005c28:	10000005 	stb	zero,0(r2)
 2005c2c:	e0bffe17 	ldw	r2,-8(fp)
 2005c30:	10800044 	addi	r2,r2,1
 2005c34:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2005c38:	e0bfff03 	ldbu	r2,-4(fp)
 2005c3c:	10800044 	addi	r2,r2,1
 2005c40:	e0bfff05 	stb	r2,-4(fp)
 2005c44:	e0bfff03 	ldbu	r2,-4(fp)
 2005c48:	108000f0 	cmpltui	r2,r2,3
 2005c4c:	103ff51e 	bne	r2,zero,2005c24 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 2005c50:	d0273845 	stb	zero,-25375(gp)
    OSPrioHighRdy = 0;
 2005c54:	d0273805 	stb	zero,-25376(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 2005c58:	d0274015 	stw	zero,-25344(gp)
    OSTCBCur      = (OS_TCB *)0;
 2005c5c:	d0274515 	stw	zero,-25324(gp)
}
 2005c60:	e037883a 	mov	sp,fp
 2005c64:	df000017 	ldw	fp,0(sp)
 2005c68:	dec00104 	addi	sp,sp,4
 2005c6c:	f800283a 	ret

02005c70 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 2005c70:	defff804 	addi	sp,sp,-32
 2005c74:	dfc00715 	stw	ra,28(sp)
 2005c78:	df000615 	stw	fp,24(sp)
 2005c7c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 2005c80:	018080b4 	movhi	r6,514
 2005c84:	31a04e04 	addi	r6,r6,-32456
 2005c88:	00bfffd4 	movui	r2,65535
 2005c8c:	d8800015 	stw	r2,0(sp)
 2005c90:	00808074 	movhi	r2,513
 2005c94:	109e4f04 	addi	r2,r2,31036
 2005c98:	d8800115 	stw	r2,4(sp)
 2005c9c:	00808004 	movi	r2,512
 2005ca0:	d8800215 	stw	r2,8(sp)
 2005ca4:	d8000315 	stw	zero,12(sp)
 2005ca8:	008000c4 	movi	r2,3
 2005cac:	d8800415 	stw	r2,16(sp)
 2005cb0:	01008034 	movhi	r4,512
 2005cb4:	21184904 	addi	r4,r4,24868
 2005cb8:	000b883a 	mov	r5,zero
 2005cbc:	01c00504 	movi	r7,20
 2005cc0:	200af040 	call	200af04 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 2005cc4:	01408074 	movhi	r5,513
 2005cc8:	2941b704 	addi	r5,r5,1756
 2005ccc:	01000504 	movi	r4,20
 2005cd0:	e1bfff04 	addi	r6,fp,-4
 2005cd4:	200b8380 	call	200b838 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 2005cd8:	e037883a 	mov	sp,fp
 2005cdc:	dfc00117 	ldw	ra,4(sp)
 2005ce0:	df000017 	ldw	fp,0(sp)
 2005ce4:	dec00204 	addi	sp,sp,8
 2005ce8:	f800283a 	ret

02005cec <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 2005cec:	defff804 	addi	sp,sp,-32
 2005cf0:	dfc00715 	stw	ra,28(sp)
 2005cf4:	df000615 	stw	fp,24(sp)
 2005cf8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 2005cfc:	01808074 	movhi	r6,513
 2005d00:	319dd604 	addi	r6,r6,30552
 2005d04:	00bfff94 	movui	r2,65534
 2005d08:	d8800015 	stw	r2,0(sp)
 2005d0c:	00808074 	movhi	r2,513
 2005d10:	109bd704 	addi	r2,r2,28508
 2005d14:	d8800115 	stw	r2,4(sp)
 2005d18:	00808004 	movi	r2,512
 2005d1c:	d8800215 	stw	r2,8(sp)
 2005d20:	d8000315 	stw	zero,12(sp)
 2005d24:	008000c4 	movi	r2,3
 2005d28:	d8800415 	stw	r2,16(sp)
 2005d2c:	01008034 	movhi	r4,512
 2005d30:	21186004 	addi	r4,r4,24960
 2005d34:	000b883a 	mov	r5,zero
 2005d38:	01c004c4 	movi	r7,19
 2005d3c:	200af040 	call	200af04 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 2005d40:	01408074 	movhi	r5,513
 2005d44:	2941bb04 	addi	r5,r5,1772
 2005d48:	010004c4 	movi	r4,19
 2005d4c:	e1bfff04 	addi	r6,fp,-4
 2005d50:	200b8380 	call	200b838 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 2005d54:	e037883a 	mov	sp,fp
 2005d58:	dfc00117 	ldw	ra,4(sp)
 2005d5c:	df000017 	ldw	fp,0(sp)
 2005d60:	dec00204 	addi	sp,sp,8
 2005d64:	f800283a 	ret

02005d68 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 2005d68:	defffb04 	addi	sp,sp,-20
 2005d6c:	dfc00415 	stw	ra,16(sp)
 2005d70:	df000315 	stw	fp,12(sp)
 2005d74:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 2005d78:	010080b4 	movhi	r4,514
 2005d7c:	21231f04 	addi	r4,r4,-29572
 2005d80:	01414404 	movi	r5,1296
 2005d84:	2005e480 	call	2005e48 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 2005d88:	010080b4 	movhi	r4,514
 2005d8c:	21246304 	addi	r4,r4,-28276
 2005d90:	01401504 	movi	r5,84
 2005d94:	2005e480 	call	2005e48 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 2005d98:	008080b4 	movhi	r2,514
 2005d9c:	10a31f04 	addi	r2,r2,-29572
 2005da0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2005da4:	008080b4 	movhi	r2,514
 2005da8:	10a33a04 	addi	r2,r2,-29464
 2005dac:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2005db0:	e03fff05 	stb	zero,-4(fp)
 2005db4:	00001106 	br	2005dfc <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2005db8:	e0fffe17 	ldw	r3,-8(fp)
 2005dbc:	e0bffd17 	ldw	r2,-12(fp)
 2005dc0:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2005dc4:	e0fffe17 	ldw	r3,-8(fp)
 2005dc8:	00800fc4 	movi	r2,63
 2005dcc:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2005dd0:	e0bffe17 	ldw	r2,-8(fp)
 2005dd4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 2005dd8:	e0bffe17 	ldw	r2,-8(fp)
 2005ddc:	10801b04 	addi	r2,r2,108
 2005de0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2005de4:	e0bffd17 	ldw	r2,-12(fp)
 2005de8:	10801b04 	addi	r2,r2,108
 2005dec:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2005df0:	e0bfff03 	ldbu	r2,-4(fp)
 2005df4:	10800044 	addi	r2,r2,1
 2005df8:	e0bfff05 	stb	r2,-4(fp)
 2005dfc:	e0bfff03 	ldbu	r2,-4(fp)
 2005e00:	108002f0 	cmpltui	r2,r2,11
 2005e04:	103fec1e 	bne	r2,zero,2005db8 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 2005e08:	e0bffe17 	ldw	r2,-8(fp)
 2005e0c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 2005e10:	e0fffe17 	ldw	r3,-8(fp)
 2005e14:	00800fc4 	movi	r2,63
 2005e18:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2005e1c:	e0bffe17 	ldw	r2,-8(fp)
 2005e20:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 2005e24:	d0273915 	stw	zero,-25372(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 2005e28:	008080b4 	movhi	r2,514
 2005e2c:	10a31f04 	addi	r2,r2,-29572
 2005e30:	d0a73d15 	stw	r2,-25356(gp)
}
 2005e34:	e037883a 	mov	sp,fp
 2005e38:	dfc00117 	ldw	ra,4(sp)
 2005e3c:	df000017 	ldw	fp,0(sp)
 2005e40:	dec00204 	addi	sp,sp,8
 2005e44:	f800283a 	ret

02005e48 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 2005e48:	defffd04 	addi	sp,sp,-12
 2005e4c:	df000215 	stw	fp,8(sp)
 2005e50:	df000204 	addi	fp,sp,8
 2005e54:	e13ffe15 	stw	r4,-8(fp)
 2005e58:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 2005e5c:	00000806 	br	2005e80 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 2005e60:	e0bffe17 	ldw	r2,-8(fp)
 2005e64:	10000005 	stb	zero,0(r2)
 2005e68:	e0bffe17 	ldw	r2,-8(fp)
 2005e6c:	10800044 	addi	r2,r2,1
 2005e70:	e0bffe15 	stw	r2,-8(fp)
        size--;
 2005e74:	e0bfff0b 	ldhu	r2,-4(fp)
 2005e78:	10bfffc4 	addi	r2,r2,-1
 2005e7c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 2005e80:	e0bfff0b 	ldhu	r2,-4(fp)
 2005e84:	1004c03a 	cmpne	r2,r2,zero
 2005e88:	103ff51e 	bne	r2,zero,2005e60 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 2005e8c:	e037883a 	mov	sp,fp
 2005e90:	df000017 	ldw	fp,0(sp)
 2005e94:	dec00104 	addi	sp,sp,4
 2005e98:	f800283a 	ret

02005e9c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2005e9c:	defffc04 	addi	sp,sp,-16
 2005ea0:	df000315 	stw	fp,12(sp)
 2005ea4:	df000304 	addi	fp,sp,12
 2005ea8:	e13ffd15 	stw	r4,-12(fp)
 2005eac:	e17ffe15 	stw	r5,-8(fp)
 2005eb0:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 2005eb4:	00000d06 	br	2005eec <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 2005eb8:	e0bffe17 	ldw	r2,-8(fp)
 2005ebc:	10c00003 	ldbu	r3,0(r2)
 2005ec0:	e0bffd17 	ldw	r2,-12(fp)
 2005ec4:	10c00005 	stb	r3,0(r2)
 2005ec8:	e0bffd17 	ldw	r2,-12(fp)
 2005ecc:	10800044 	addi	r2,r2,1
 2005ed0:	e0bffd15 	stw	r2,-12(fp)
 2005ed4:	e0bffe17 	ldw	r2,-8(fp)
 2005ed8:	10800044 	addi	r2,r2,1
 2005edc:	e0bffe15 	stw	r2,-8(fp)
        size--;
 2005ee0:	e0bfff0b 	ldhu	r2,-4(fp)
 2005ee4:	10bfffc4 	addi	r2,r2,-1
 2005ee8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 2005eec:	e0bfff0b 	ldhu	r2,-4(fp)
 2005ef0:	1004c03a 	cmpne	r2,r2,zero
 2005ef4:	103ff01e 	bne	r2,zero,2005eb8 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 2005ef8:	e037883a 	mov	sp,fp
 2005efc:	df000017 	ldw	fp,0(sp)
 2005f00:	dec00104 	addi	sp,sp,4
 2005f04:	f800283a 	ret

02005f08 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 2005f08:	defffb04 	addi	sp,sp,-20
 2005f0c:	dfc00415 	stw	ra,16(sp)
 2005f10:	df000315 	stw	fp,12(sp)
 2005f14:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2005f18:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2005f1c:	0005303a 	rdctl	r2,status
 2005f20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005f24:	e0fffe17 	ldw	r3,-8(fp)
 2005f28:	00bfff84 	movi	r2,-2
 2005f2c:	1884703a 	and	r2,r3,r2
 2005f30:	1001703a 	wrctl	status,r2
  
  return context;
 2005f34:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2005f38:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 2005f3c:	d0a74403 	ldbu	r2,-25328(gp)
 2005f40:	10803fcc 	andi	r2,r2,255
 2005f44:	1004c03a 	cmpne	r2,r2,zero
 2005f48:	10001b1e 	bne	r2,zero,2005fb8 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 2005f4c:	d0a73603 	ldbu	r2,-25384(gp)
 2005f50:	10803fcc 	andi	r2,r2,255
 2005f54:	1004c03a 	cmpne	r2,r2,zero
 2005f58:	1000171e 	bne	r2,zero,2005fb8 <OS_Sched+0xb0>
            OS_SchedNew();
 2005f5c:	2005fdc0 	call	2005fdc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 2005f60:	d0a73803 	ldbu	r2,-25376(gp)
 2005f64:	d0e73843 	ldbu	r3,-25375(gp)
 2005f68:	11003fcc 	andi	r4,r2,255
 2005f6c:	18803fcc 	andi	r2,r3,255
 2005f70:	20801126 	beq	r4,r2,2005fb8 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 2005f74:	d0a73803 	ldbu	r2,-25376(gp)
 2005f78:	10803fcc 	andi	r2,r2,255
 2005f7c:	00c080b4 	movhi	r3,514
 2005f80:	18e46304 	addi	r3,r3,-28276
 2005f84:	1085883a 	add	r2,r2,r2
 2005f88:	1085883a 	add	r2,r2,r2
 2005f8c:	10c5883a 	add	r2,r2,r3
 2005f90:	10800017 	ldw	r2,0(r2)
 2005f94:	d0a74015 	stw	r2,-25344(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2005f98:	d0e74017 	ldw	r3,-25344(gp)
 2005f9c:	18800e17 	ldw	r2,56(r3)
 2005fa0:	10800044 	addi	r2,r2,1
 2005fa4:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2005fa8:	d0a73b17 	ldw	r2,-25364(gp)
 2005fac:	10800044 	addi	r2,r2,1
 2005fb0:	d0a73b15 	stw	r2,-25364(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2005fb4:	200f4900 	call	200f490 <OSCtxSw>
 2005fb8:	e0bfff17 	ldw	r2,-4(fp)
 2005fbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005fc0:	e0bffd17 	ldw	r2,-12(fp)
 2005fc4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 2005fc8:	e037883a 	mov	sp,fp
 2005fcc:	dfc00117 	ldw	ra,4(sp)
 2005fd0:	df000017 	ldw	fp,0(sp)
 2005fd4:	dec00204 	addi	sp,sp,8
 2005fd8:	f800283a 	ret

02005fdc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 2005fdc:	defffe04 	addi	sp,sp,-8
 2005fe0:	df000115 	stw	fp,4(sp)
 2005fe4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 2005fe8:	d0a74203 	ldbu	r2,-25336(gp)
 2005fec:	10c03fcc 	andi	r3,r2,255
 2005ff0:	00808074 	movhi	r2,513
 2005ff4:	10817704 	addi	r2,r2,1500
 2005ff8:	10c5883a 	add	r2,r2,r3
 2005ffc:	10800003 	ldbu	r2,0(r2)
 2006000:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2006004:	e0bfff03 	ldbu	r2,-4(fp)
 2006008:	100490fa 	slli	r2,r2,3
 200600c:	1009883a 	mov	r4,r2
 2006010:	e0ffff03 	ldbu	r3,-4(fp)
 2006014:	d0a74244 	addi	r2,gp,-25335
 2006018:	1885883a 	add	r2,r3,r2
 200601c:	10800003 	ldbu	r2,0(r2)
 2006020:	10c03fcc 	andi	r3,r2,255
 2006024:	00808074 	movhi	r2,513
 2006028:	10817704 	addi	r2,r2,1500
 200602c:	10c5883a 	add	r2,r2,r3
 2006030:	10800003 	ldbu	r2,0(r2)
 2006034:	2085883a 	add	r2,r4,r2
 2006038:	d0a73805 	stb	r2,-25376(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 200603c:	e037883a 	mov	sp,fp
 2006040:	df000017 	ldw	fp,0(sp)
 2006044:	dec00104 	addi	sp,sp,4
 2006048:	f800283a 	ret

0200604c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 200604c:	defffc04 	addi	sp,sp,-16
 2006050:	df000315 	stw	fp,12(sp)
 2006054:	df000304 	addi	fp,sp,12
 2006058:	e13ffe15 	stw	r4,-8(fp)
 200605c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 2006060:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 2006064:	00000d06 	br	200609c <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 2006068:	e0bfff17 	ldw	r2,-4(fp)
 200606c:	10c00003 	ldbu	r3,0(r2)
 2006070:	e0bffe17 	ldw	r2,-8(fp)
 2006074:	10c00005 	stb	r3,0(r2)
 2006078:	e0bffe17 	ldw	r2,-8(fp)
 200607c:	10800044 	addi	r2,r2,1
 2006080:	e0bffe15 	stw	r2,-8(fp)
 2006084:	e0bfff17 	ldw	r2,-4(fp)
 2006088:	10800044 	addi	r2,r2,1
 200608c:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2006090:	e0bffd03 	ldbu	r2,-12(fp)
 2006094:	10800044 	addi	r2,r2,1
 2006098:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 200609c:	e0bfff17 	ldw	r2,-4(fp)
 20060a0:	10800003 	ldbu	r2,0(r2)
 20060a4:	10803fcc 	andi	r2,r2,255
 20060a8:	1004c03a 	cmpne	r2,r2,zero
 20060ac:	103fee1e 	bne	r2,zero,2006068 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 20060b0:	e0bffe17 	ldw	r2,-8(fp)
 20060b4:	10000005 	stb	zero,0(r2)
    return (len);
 20060b8:	e0bffd03 	ldbu	r2,-12(fp)
}
 20060bc:	e037883a 	mov	sp,fp
 20060c0:	df000017 	ldw	fp,0(sp)
 20060c4:	dec00104 	addi	sp,sp,4
 20060c8:	f800283a 	ret

020060cc <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 20060cc:	defffd04 	addi	sp,sp,-12
 20060d0:	df000215 	stw	fp,8(sp)
 20060d4:	df000204 	addi	fp,sp,8
 20060d8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 20060dc:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 20060e0:	00000606 	br	20060fc <OS_StrLen+0x30>
        psrc++;
 20060e4:	e0bfff17 	ldw	r2,-4(fp)
 20060e8:	10800044 	addi	r2,r2,1
 20060ec:	e0bfff15 	stw	r2,-4(fp)
        len++;
 20060f0:	e0bffe03 	ldbu	r2,-8(fp)
 20060f4:	10800044 	addi	r2,r2,1
 20060f8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 20060fc:	e0bfff17 	ldw	r2,-4(fp)
 2006100:	10800003 	ldbu	r2,0(r2)
 2006104:	10803fcc 	andi	r2,r2,255
 2006108:	1004c03a 	cmpne	r2,r2,zero
 200610c:	103ff51e 	bne	r2,zero,20060e4 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 2006110:	e0bffe03 	ldbu	r2,-8(fp)
}
 2006114:	e037883a 	mov	sp,fp
 2006118:	df000017 	ldw	fp,0(sp)
 200611c:	dec00104 	addi	sp,sp,4
 2006120:	f800283a 	ret

02006124 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2006124:	defffa04 	addi	sp,sp,-24
 2006128:	dfc00515 	stw	ra,20(sp)
 200612c:	df000415 	stw	fp,16(sp)
 2006130:	df000404 	addi	fp,sp,16
 2006134:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2006138:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200613c:	0005303a 	rdctl	r2,status
 2006140:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006144:	e0fffd17 	ldw	r3,-12(fp)
 2006148:	00bfff84 	movi	r2,-2
 200614c:	1884703a 	and	r2,r3,r2
 2006150:	1001703a 	wrctl	status,r2
  
  return context;
 2006154:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 2006158:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 200615c:	d0a73717 	ldw	r2,-25380(gp)
 2006160:	10800044 	addi	r2,r2,1
 2006164:	d0a73715 	stw	r2,-25380(gp)
 2006168:	e0bffe17 	ldw	r2,-8(fp)
 200616c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006170:	e0bffc17 	ldw	r2,-16(fp)
 2006174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 2006178:	200f93c0 	call	200f93c <OSTaskIdleHook>
    }
 200617c:	003fef06 	br	200613c <OS_TaskIdle+0x18>

02006180 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 2006180:	defffa04 	addi	sp,sp,-24
 2006184:	dfc00515 	stw	ra,20(sp)
 2006188:	df000415 	stw	fp,16(sp)
 200618c:	df000404 	addi	fp,sp,16
 2006190:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2006194:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2006198:	00000206 	br	20061a4 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 200619c:	01003204 	movi	r4,200
 20061a0:	200c1fc0 	call	200c1fc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 20061a4:	d0a74803 	ldbu	r2,-25312(gp)
 20061a8:	10803fcc 	andi	r2,r2,255
 20061ac:	1005003a 	cmpeq	r2,r2,zero
 20061b0:	103ffa1e 	bne	r2,zero,200619c <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 20061b4:	d1273c17 	ldw	r4,-25360(gp)
 20061b8:	01401904 	movi	r5,100
 20061bc:	20103cc0 	call	20103cc <__udivsi3>
 20061c0:	d0a73c15 	stw	r2,-25360(gp)
    if (OSIdleCtrMax == 0L) {
 20061c4:	d0a73c17 	ldw	r2,-25360(gp)
 20061c8:	1004c03a 	cmpne	r2,r2,zero
 20061cc:	1000031e 	bne	r2,zero,20061dc <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 20061d0:	d0273e05 	stb	zero,-25352(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 20061d4:	01003fc4 	movi	r4,255
 20061d8:	200be100 	call	200be10 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20061dc:	0005303a 	rdctl	r2,status
 20061e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20061e4:	e0fffd17 	ldw	r3,-12(fp)
 20061e8:	00bfff84 	movi	r2,-2
 20061ec:	1884703a 	and	r2,r3,r2
 20061f0:	1001703a 	wrctl	status,r2
  
  return context;
 20061f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 20061f8:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 20061fc:	d0a73717 	ldw	r2,-25380(gp)
 2006200:	d0a74915 	stw	r2,-25308(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2006204:	d0273715 	stw	zero,-25380(gp)
 2006208:	e0bffe17 	ldw	r2,-8(fp)
 200620c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006210:	e0bffc17 	ldw	r2,-16(fp)
 2006214:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 2006218:	d1274917 	ldw	r4,-25308(gp)
 200621c:	d1673c17 	ldw	r5,-25360(gp)
 2006220:	20103cc0 	call	20103cc <__udivsi3>
 2006224:	1007883a 	mov	r3,r2
 2006228:	00801904 	movi	r2,100
 200622c:	10c5c83a 	sub	r2,r2,r3
 2006230:	d0a73e05 	stb	r2,-25352(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2006234:	200f8cc0 	call	200f8cc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 2006238:	20062480 	call	2006248 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 200623c:	01001904 	movi	r4,100
 2006240:	200c1fc0 	call	200c1fc <OSTimeDly>
    }
 2006244:	003fe506 	br	20061dc <OS_TaskStat+0x5c>

02006248 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 2006248:	defffa04 	addi	sp,sp,-24
 200624c:	dfc00515 	stw	ra,20(sp)
 2006250:	df000415 	stw	fp,16(sp)
 2006254:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2006258:	e03ffc05 	stb	zero,-16(fp)
 200625c:	00002406 	br	20062f0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 2006260:	e13ffc03 	ldbu	r4,-16(fp)
 2006264:	e17ffe04 	addi	r5,fp,-8
 2006268:	200bc140 	call	200bc14 <OSTaskStkChk>
 200626c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 2006270:	e0bffc43 	ldbu	r2,-15(fp)
 2006274:	1004c03a 	cmpne	r2,r2,zero
 2006278:	10001a1e 	bne	r2,zero,20062e4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 200627c:	e0bffc03 	ldbu	r2,-16(fp)
 2006280:	00c080b4 	movhi	r3,514
 2006284:	18e46304 	addi	r3,r3,-28276
 2006288:	1085883a 	add	r2,r2,r2
 200628c:	1085883a 	add	r2,r2,r2
 2006290:	10c5883a 	add	r2,r2,r3
 2006294:	10800017 	ldw	r2,0(r2)
 2006298:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 200629c:	e0bffd17 	ldw	r2,-12(fp)
 20062a0:	1005003a 	cmpeq	r2,r2,zero
 20062a4:	10000f1e 	bne	r2,zero,20062e4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 20062a8:	e0bffd17 	ldw	r2,-12(fp)
 20062ac:	10800060 	cmpeqi	r2,r2,1
 20062b0:	10000c1e 	bne	r2,zero,20062e4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 20062b4:	e0bffd17 	ldw	r2,-12(fp)
 20062b8:	10c00217 	ldw	r3,8(r2)
 20062bc:	e0bffd17 	ldw	r2,-12(fp)
 20062c0:	10800317 	ldw	r2,12(r2)
 20062c4:	1085883a 	add	r2,r2,r2
 20062c8:	1085883a 	add	r2,r2,r2
 20062cc:	1887883a 	add	r3,r3,r2
 20062d0:	e0bffd17 	ldw	r2,-12(fp)
 20062d4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 20062d8:	e0ffff17 	ldw	r3,-4(fp)
 20062dc:	e0bffd17 	ldw	r2,-12(fp)
 20062e0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 20062e4:	e0bffc03 	ldbu	r2,-16(fp)
 20062e8:	10800044 	addi	r2,r2,1
 20062ec:	e0bffc05 	stb	r2,-16(fp)
 20062f0:	e0bffc03 	ldbu	r2,-16(fp)
 20062f4:	10800570 	cmpltui	r2,r2,21
 20062f8:	103fd91e 	bne	r2,zero,2006260 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 20062fc:	e037883a 	mov	sp,fp
 2006300:	dfc00117 	ldw	ra,4(sp)
 2006304:	df000017 	ldw	fp,0(sp)
 2006308:	dec00204 	addi	sp,sp,8
 200630c:	f800283a 	ret

02006310 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2006310:	defff104 	addi	sp,sp,-60
 2006314:	dfc00e15 	stw	ra,56(sp)
 2006318:	df000d15 	stw	fp,52(sp)
 200631c:	df000d04 	addi	fp,sp,52
 2006320:	e17ffb15 	stw	r5,-20(fp)
 2006324:	e1bffc15 	stw	r6,-16(fp)
 2006328:	e0800417 	ldw	r2,16(fp)
 200632c:	e13ffa05 	stb	r4,-24(fp)
 2006330:	e1fffd0d 	sth	r7,-12(fp)
 2006334:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2006338:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200633c:	0005303a 	rdctl	r2,status
 2006340:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006344:	e0fff717 	ldw	r3,-36(fp)
 2006348:	00bfff84 	movi	r2,-2
 200634c:	1884703a 	and	r2,r3,r2
 2006350:	1001703a 	wrctl	status,r2
  
  return context;
 2006354:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 2006358:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 200635c:	d0a73d17 	ldw	r2,-25356(gp)
 2006360:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 2006364:	e0bff917 	ldw	r2,-28(fp)
 2006368:	1005003a 	cmpeq	r2,r2,zero
 200636c:	1000941e 	bne	r2,zero,20065c0 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2006370:	e0bff917 	ldw	r2,-28(fp)
 2006374:	10800517 	ldw	r2,20(r2)
 2006378:	d0a73d15 	stw	r2,-25356(gp)
 200637c:	e0bff817 	ldw	r2,-32(fp)
 2006380:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006384:	e0bff617 	ldw	r2,-40(fp)
 2006388:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 200638c:	e0fff917 	ldw	r3,-28(fp)
 2006390:	e0bffb17 	ldw	r2,-20(fp)
 2006394:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2006398:	e0fff917 	ldw	r3,-28(fp)
 200639c:	e0bffa03 	ldbu	r2,-24(fp)
 20063a0:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 20063a4:	e0bff917 	ldw	r2,-28(fp)
 20063a8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 20063ac:	e0bff917 	ldw	r2,-28(fp)
 20063b0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 20063b4:	e0bff917 	ldw	r2,-28(fp)
 20063b8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 20063bc:	e0fff917 	ldw	r3,-28(fp)
 20063c0:	e0800317 	ldw	r2,12(fp)
 20063c4:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 20063c8:	e0fff917 	ldw	r3,-28(fp)
 20063cc:	e0800217 	ldw	r2,8(fp)
 20063d0:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 20063d4:	e0fff917 	ldw	r3,-28(fp)
 20063d8:	e0bffc17 	ldw	r2,-16(fp)
 20063dc:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 20063e0:	e0fff917 	ldw	r3,-28(fp)
 20063e4:	e0bffe0b 	ldhu	r2,-8(fp)
 20063e8:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 20063ec:	e0fff917 	ldw	r3,-28(fp)
 20063f0:	e0bffd0b 	ldhu	r2,-12(fp)
 20063f4:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 20063f8:	e0bff917 	ldw	r2,-28(fp)
 20063fc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2006400:	e0bffa03 	ldbu	r2,-24(fp)
 2006404:	1004d0fa 	srli	r2,r2,3
 2006408:	1007883a 	mov	r3,r2
 200640c:	e0bff917 	ldw	r2,-28(fp)
 2006410:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2006414:	e0bffa03 	ldbu	r2,-24(fp)
 2006418:	108001cc 	andi	r2,r2,7
 200641c:	1007883a 	mov	r3,r2
 2006420:	e0bff917 	ldw	r2,-28(fp)
 2006424:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2006428:	e0bff917 	ldw	r2,-28(fp)
 200642c:	10800d03 	ldbu	r2,52(r2)
 2006430:	10c03fcc 	andi	r3,r2,255
 2006434:	00800044 	movi	r2,1
 2006438:	10c4983a 	sll	r2,r2,r3
 200643c:	1007883a 	mov	r3,r2
 2006440:	e0bff917 	ldw	r2,-28(fp)
 2006444:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 2006448:	e0bff917 	ldw	r2,-28(fp)
 200644c:	10800cc3 	ldbu	r2,51(r2)
 2006450:	10c03fcc 	andi	r3,r2,255
 2006454:	00800044 	movi	r2,1
 2006458:	10c4983a 	sll	r2,r2,r3
 200645c:	1007883a 	mov	r3,r2
 2006460:	e0bff917 	ldw	r2,-28(fp)
 2006464:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2006468:	e0bff917 	ldw	r2,-28(fp)
 200646c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2006470:	e0bff917 	ldw	r2,-28(fp)
 2006474:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2006478:	e0bff917 	ldw	r2,-28(fp)
 200647c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2006480:	e0bff917 	ldw	r2,-28(fp)
 2006484:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2006488:	e0bff917 	ldw	r2,-28(fp)
 200648c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2006490:	e0bff917 	ldw	r2,-28(fp)
 2006494:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2006498:	e0bff917 	ldw	r2,-28(fp)
 200649c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 20064a0:	e0bff917 	ldw	r2,-28(fp)
 20064a4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 20064a8:	e0bff917 	ldw	r2,-28(fp)
 20064ac:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 20064b0:	e0fff917 	ldw	r3,-28(fp)
 20064b4:	00800fc4 	movi	r2,63
 20064b8:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 20064bc:	e0bff917 	ldw	r2,-28(fp)
 20064c0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 20064c4:	e13ff917 	ldw	r4,-28(fp)
 20064c8:	200f9580 	call	200f958 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 20064cc:	e13ff917 	ldw	r4,-28(fp)
 20064d0:	200f8700 	call	200f870 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20064d4:	0005303a 	rdctl	r2,status
 20064d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20064dc:	e0fff517 	ldw	r3,-44(fp)
 20064e0:	00bfff84 	movi	r2,-2
 20064e4:	1884703a 	and	r2,r3,r2
 20064e8:	1001703a 	wrctl	status,r2
  
  return context;
 20064ec:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 20064f0:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 20064f4:	e0bffa03 	ldbu	r2,-24(fp)
 20064f8:	00c080b4 	movhi	r3,514
 20064fc:	18e46304 	addi	r3,r3,-28276
 2006500:	1085883a 	add	r2,r2,r2
 2006504:	1085883a 	add	r2,r2,r2
 2006508:	10c7883a 	add	r3,r2,r3
 200650c:	e0bff917 	ldw	r2,-28(fp)
 2006510:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2006514:	d0e73917 	ldw	r3,-25372(gp)
 2006518:	e0bff917 	ldw	r2,-28(fp)
 200651c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2006520:	e0bff917 	ldw	r2,-28(fp)
 2006524:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 2006528:	d0a73917 	ldw	r2,-25372(gp)
 200652c:	1005003a 	cmpeq	r2,r2,zero
 2006530:	1000031e 	bne	r2,zero,2006540 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 2006534:	d0e73917 	ldw	r3,-25372(gp)
 2006538:	e0bff917 	ldw	r2,-28(fp)
 200653c:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 2006540:	e0bff917 	ldw	r2,-28(fp)
 2006544:	d0a73915 	stw	r2,-25372(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 2006548:	e0bff917 	ldw	r2,-28(fp)
 200654c:	10c00d83 	ldbu	r3,54(r2)
 2006550:	d0a74203 	ldbu	r2,-25336(gp)
 2006554:	1884b03a 	or	r2,r3,r2
 2006558:	d0a74205 	stb	r2,-25336(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 200655c:	e0bff917 	ldw	r2,-28(fp)
 2006560:	10800d03 	ldbu	r2,52(r2)
 2006564:	11003fcc 	andi	r4,r2,255
 2006568:	e0bff917 	ldw	r2,-28(fp)
 200656c:	10800d03 	ldbu	r2,52(r2)
 2006570:	10c03fcc 	andi	r3,r2,255
 2006574:	d0a74244 	addi	r2,gp,-25335
 2006578:	1885883a 	add	r2,r3,r2
 200657c:	10c00003 	ldbu	r3,0(r2)
 2006580:	e0bff917 	ldw	r2,-28(fp)
 2006584:	10800d43 	ldbu	r2,53(r2)
 2006588:	1884b03a 	or	r2,r3,r2
 200658c:	1007883a 	mov	r3,r2
 2006590:	d0a74244 	addi	r2,gp,-25335
 2006594:	2085883a 	add	r2,r4,r2
 2006598:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 200659c:	d0a73e43 	ldbu	r2,-25351(gp)
 20065a0:	10800044 	addi	r2,r2,1
 20065a4:	d0a73e45 	stb	r2,-25351(gp)
 20065a8:	e0bff817 	ldw	r2,-32(fp)
 20065ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20065b0:	e0bff417 	ldw	r2,-48(fp)
 20065b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 20065b8:	e03fff15 	stw	zero,-4(fp)
 20065bc:	00000606 	br	20065d8 <OS_TCBInit+0x2c8>
 20065c0:	e0bff817 	ldw	r2,-32(fp)
 20065c4:	e0bff315 	stw	r2,-52(fp)
 20065c8:	e0bff317 	ldw	r2,-52(fp)
 20065cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 20065d0:	00801084 	movi	r2,66
 20065d4:	e0bfff15 	stw	r2,-4(fp)
 20065d8:	e0bfff17 	ldw	r2,-4(fp)
}
 20065dc:	e037883a 	mov	sp,fp
 20065e0:	dfc00117 	ldw	ra,4(sp)
 20065e4:	df000017 	ldw	fp,0(sp)
 20065e8:	dec00204 	addi	sp,sp,8
 20065ec:	f800283a 	ret

020065f0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 20065f0:	defffe04 	addi	sp,sp,-8
 20065f4:	df000115 	stw	fp,4(sp)
 20065f8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 20065fc:	d0a01104 	addi	r2,gp,-32700
 2006600:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2006604:	d0a01204 	addi	r2,gp,-32696
 2006608:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 200660c:	d0a01384 	addi	r2,gp,-32690
 2006610:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2006614:	d0a01404 	addi	r2,gp,-32688
 2006618:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 200661c:	d0a01304 	addi	r2,gp,-32692
 2006620:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2006624:	d0a01484 	addi	r2,gp,-32686
 2006628:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 200662c:	d0a01504 	addi	r2,gp,-32684
 2006630:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2006634:	d0a01584 	addi	r2,gp,-32682
 2006638:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 200663c:	d0a01604 	addi	r2,gp,-32680
 2006640:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 2006644:	d0a01684 	addi	r2,gp,-32678
 2006648:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 200664c:	d0a01704 	addi	r2,gp,-32676
 2006650:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 2006654:	d0a01784 	addi	r2,gp,-32674
 2006658:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 200665c:	d0a01804 	addi	r2,gp,-32672
 2006660:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 2006664:	d0a01884 	addi	r2,gp,-32670
 2006668:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 200666c:	d0a01904 	addi	r2,gp,-32668
 2006670:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 2006674:	d0a01984 	addi	r2,gp,-32666
 2006678:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 200667c:	d0a01a04 	addi	r2,gp,-32664
 2006680:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 2006684:	d0a01a84 	addi	r2,gp,-32662
 2006688:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 200668c:	d0a01b04 	addi	r2,gp,-32660
 2006690:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2006694:	d0a01b84 	addi	r2,gp,-32658
 2006698:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 200669c:	d0a01c04 	addi	r2,gp,-32656
 20066a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 20066a4:	d0a01c84 	addi	r2,gp,-32654
 20066a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 20066ac:	d0a01d04 	addi	r2,gp,-32652
 20066b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 20066b4:	d0a01d84 	addi	r2,gp,-32650
 20066b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 20066bc:	d0a01e04 	addi	r2,gp,-32648
 20066c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 20066c4:	d0a01e84 	addi	r2,gp,-32646
 20066c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 20066cc:	d0a01f04 	addi	r2,gp,-32644
 20066d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 20066d4:	d0a01f84 	addi	r2,gp,-32642
 20066d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 20066dc:	d0a02004 	addi	r2,gp,-32640
 20066e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 20066e4:	d0a02084 	addi	r2,gp,-32638
 20066e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 20066ec:	d0a02104 	addi	r2,gp,-32636
 20066f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 20066f4:	d0a02184 	addi	r2,gp,-32634
 20066f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 20066fc:	d0a02204 	addi	r2,gp,-32632
 2006700:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2006704:	d0a02284 	addi	r2,gp,-32630
 2006708:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 200670c:	d0a02304 	addi	r2,gp,-32628
 2006710:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2006714:	d0a02384 	addi	r2,gp,-32626
 2006718:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 200671c:	d0a02404 	addi	r2,gp,-32624
 2006720:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2006724:	d0a02484 	addi	r2,gp,-32622
 2006728:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 200672c:	d0a02504 	addi	r2,gp,-32620
 2006730:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 2006734:	d0a02584 	addi	r2,gp,-32618
 2006738:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 200673c:	d0a02604 	addi	r2,gp,-32616
 2006740:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 2006744:	d0a02684 	addi	r2,gp,-32614
 2006748:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 200674c:	d0a02704 	addi	r2,gp,-32612
 2006750:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 2006754:	d0a02784 	addi	r2,gp,-32610
 2006758:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 200675c:	d0a02804 	addi	r2,gp,-32608
 2006760:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 2006764:	d0a02d04 	addi	r2,gp,-32588
 2006768:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 200676c:	e037883a 	mov	sp,fp
 2006770:	df000017 	ldw	fp,0(sp)
 2006774:	dec00104 	addi	sp,sp,4
 2006778:	f800283a 	ret

0200677c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 200677c:	defff104 	addi	sp,sp,-60
 2006780:	df000e15 	stw	fp,56(sp)
 2006784:	df000e04 	addi	fp,sp,56
 2006788:	e13ffa15 	stw	r4,-24(fp)
 200678c:	e1fffd15 	stw	r7,-12(fp)
 2006790:	e17ffb0d 	sth	r5,-20(fp)
 2006794:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2006798:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 200679c:	e0bffd17 	ldw	r2,-12(fp)
 20067a0:	1004c03a 	cmpne	r2,r2,zero
 20067a4:	1000021e 	bne	r2,zero,20067b0 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 20067a8:	e03fff15 	stw	zero,-4(fp)
 20067ac:	0000bb06 	br	2006a9c <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 20067b0:	e0bffa17 	ldw	r2,-24(fp)
 20067b4:	1004c03a 	cmpne	r2,r2,zero
 20067b8:	1000051e 	bne	r2,zero,20067d0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20067bc:	e0fffd17 	ldw	r3,-12(fp)
 20067c0:	00801b84 	movi	r2,110
 20067c4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 20067c8:	e03fff15 	stw	zero,-4(fp)
 20067cc:	0000b306 	br	2006a9c <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 20067d0:	e0bffa17 	ldw	r2,-24(fp)
 20067d4:	10800003 	ldbu	r2,0(r2)
 20067d8:	10803fcc 	andi	r2,r2,255
 20067dc:	10800160 	cmpeqi	r2,r2,5
 20067e0:	1000051e 	bne	r2,zero,20067f8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 20067e4:	e0fffd17 	ldw	r3,-12(fp)
 20067e8:	00800044 	movi	r2,1
 20067ec:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 20067f0:	e03fff15 	stw	zero,-4(fp)
 20067f4:	0000a906 	br	2006a9c <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 20067f8:	e0fffc03 	ldbu	r3,-16(fp)
 20067fc:	00bfe004 	movi	r2,-128
 2006800:	1884703a 	and	r2,r3,r2
 2006804:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2006808:	e0bff943 	ldbu	r2,-27(fp)
 200680c:	1005003a 	cmpeq	r2,r2,zero
 2006810:	1000061e 	bne	r2,zero,200682c <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 2006814:	e0bffc03 	ldbu	r2,-16(fp)
 2006818:	10801fcc 	andi	r2,r2,127
 200681c:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 2006820:	00800044 	movi	r2,1
 2006824:	e0bff905 	stb	r2,-28(fp)
 2006828:	00000106 	br	2006830 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 200682c:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2006830:	e0bffd17 	ldw	r2,-12(fp)
 2006834:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006838:	0005303a 	rdctl	r2,status
 200683c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006840:	e0fff717 	ldw	r3,-36(fp)
 2006844:	00bfff84 	movi	r2,-2
 2006848:	1884703a 	and	r2,r3,r2
 200684c:	1001703a 	wrctl	status,r2
  
  return context;
 2006850:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 2006854:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 2006858:	e0bffc03 	ldbu	r2,-16(fp)
 200685c:	e0bffe15 	stw	r2,-8(fp)
 2006860:	e0fffe17 	ldw	r3,-8(fp)
 2006864:	18800060 	cmpeqi	r2,r3,1
 2006868:	1000651e 	bne	r2,zero,2006a00 <OSFlagAccept+0x284>
 200686c:	e0fffe17 	ldw	r3,-8(fp)
 2006870:	18800088 	cmpgei	r2,r3,2
 2006874:	1000041e 	bne	r2,zero,2006888 <OSFlagAccept+0x10c>
 2006878:	e0fffe17 	ldw	r3,-8(fp)
 200687c:	1805003a 	cmpeq	r2,r3,zero
 2006880:	1000421e 	bne	r2,zero,200698c <OSFlagAccept+0x210>
 2006884:	00007b06 	br	2006a74 <OSFlagAccept+0x2f8>
 2006888:	e0fffe17 	ldw	r3,-8(fp)
 200688c:	188000a0 	cmpeqi	r2,r3,2
 2006890:	1000041e 	bne	r2,zero,20068a4 <OSFlagAccept+0x128>
 2006894:	e0fffe17 	ldw	r3,-8(fp)
 2006898:	188000e0 	cmpeqi	r2,r3,3
 200689c:	10001e1e 	bne	r2,zero,2006918 <OSFlagAccept+0x19c>
 20068a0:	00007406 	br	2006a74 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 20068a4:	e0bffa17 	ldw	r2,-24(fp)
 20068a8:	10c0020b 	ldhu	r3,8(r2)
 20068ac:	e0bffb0b 	ldhu	r2,-20(fp)
 20068b0:	1884703a 	and	r2,r3,r2
 20068b4:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20068b8:	e0fff98b 	ldhu	r3,-26(fp)
 20068bc:	e0bffb0b 	ldhu	r2,-20(fp)
 20068c0:	18800d1e 	bne	r3,r2,20068f8 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20068c4:	e0bff903 	ldbu	r2,-28(fp)
 20068c8:	10800058 	cmpnei	r2,r2,1
 20068cc:	10000d1e 	bne	r2,zero,2006904 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 20068d0:	e0bffa17 	ldw	r2,-24(fp)
 20068d4:	1080020b 	ldhu	r2,8(r2)
 20068d8:	1007883a 	mov	r3,r2
 20068dc:	e0bff98b 	ldhu	r2,-26(fp)
 20068e0:	0084303a 	nor	r2,zero,r2
 20068e4:	1884703a 	and	r2,r3,r2
 20068e8:	1007883a 	mov	r3,r2
 20068ec:	e0bffa17 	ldw	r2,-24(fp)
 20068f0:	10c0020d 	sth	r3,8(r2)
 20068f4:	00000306 	br	2006904 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20068f8:	e0fffd17 	ldw	r3,-12(fp)
 20068fc:	00801c04 	movi	r2,112
 2006900:	18800005 	stb	r2,0(r3)
 2006904:	e0bff817 	ldw	r2,-32(fp)
 2006908:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200690c:	e0bff617 	ldw	r2,-40(fp)
 2006910:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2006914:	00005f06 	br	2006a94 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2006918:	e0bffa17 	ldw	r2,-24(fp)
 200691c:	10c0020b 	ldhu	r3,8(r2)
 2006920:	e0bffb0b 	ldhu	r2,-20(fp)
 2006924:	1884703a 	and	r2,r3,r2
 2006928:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 200692c:	e0bff98b 	ldhu	r2,-26(fp)
 2006930:	1005003a 	cmpeq	r2,r2,zero
 2006934:	10000d1e 	bne	r2,zero,200696c <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2006938:	e0bff903 	ldbu	r2,-28(fp)
 200693c:	10800058 	cmpnei	r2,r2,1
 2006940:	10000d1e 	bne	r2,zero,2006978 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2006944:	e0bffa17 	ldw	r2,-24(fp)
 2006948:	1080020b 	ldhu	r2,8(r2)
 200694c:	1007883a 	mov	r3,r2
 2006950:	e0bff98b 	ldhu	r2,-26(fp)
 2006954:	0084303a 	nor	r2,zero,r2
 2006958:	1884703a 	and	r2,r3,r2
 200695c:	1007883a 	mov	r3,r2
 2006960:	e0bffa17 	ldw	r2,-24(fp)
 2006964:	10c0020d 	sth	r3,8(r2)
 2006968:	00000306 	br	2006978 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 200696c:	e0fffd17 	ldw	r3,-12(fp)
 2006970:	00801c04 	movi	r2,112
 2006974:	18800005 	stb	r2,0(r3)
 2006978:	e0bff817 	ldw	r2,-32(fp)
 200697c:	e0bff515 	stw	r2,-44(fp)
 2006980:	e0bff517 	ldw	r2,-44(fp)
 2006984:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2006988:	00004206 	br	2006a94 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 200698c:	e0bffa17 	ldw	r2,-24(fp)
 2006990:	1080020b 	ldhu	r2,8(r2)
 2006994:	0084303a 	nor	r2,zero,r2
 2006998:	1007883a 	mov	r3,r2
 200699c:	e0bffb0b 	ldhu	r2,-20(fp)
 20069a0:	1884703a 	and	r2,r3,r2
 20069a4:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20069a8:	e0fff98b 	ldhu	r3,-26(fp)
 20069ac:	e0bffb0b 	ldhu	r2,-20(fp)
 20069b0:	18800b1e 	bne	r3,r2,20069e0 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20069b4:	e0bff903 	ldbu	r2,-28(fp)
 20069b8:	10800058 	cmpnei	r2,r2,1
 20069bc:	10000b1e 	bne	r2,zero,20069ec <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 20069c0:	e0bffa17 	ldw	r2,-24(fp)
 20069c4:	10c0020b 	ldhu	r3,8(r2)
 20069c8:	e0bff98b 	ldhu	r2,-26(fp)
 20069cc:	1884b03a 	or	r2,r3,r2
 20069d0:	1007883a 	mov	r3,r2
 20069d4:	e0bffa17 	ldw	r2,-24(fp)
 20069d8:	10c0020d 	sth	r3,8(r2)
 20069dc:	00000306 	br	20069ec <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20069e0:	e0fffd17 	ldw	r3,-12(fp)
 20069e4:	00801c04 	movi	r2,112
 20069e8:	18800005 	stb	r2,0(r3)
 20069ec:	e0bff817 	ldw	r2,-32(fp)
 20069f0:	e0bff415 	stw	r2,-48(fp)
 20069f4:	e0bff417 	ldw	r2,-48(fp)
 20069f8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20069fc:	00002506 	br	2006a94 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2006a00:	e0bffa17 	ldw	r2,-24(fp)
 2006a04:	1080020b 	ldhu	r2,8(r2)
 2006a08:	0084303a 	nor	r2,zero,r2
 2006a0c:	1007883a 	mov	r3,r2
 2006a10:	e0bffb0b 	ldhu	r2,-20(fp)
 2006a14:	1884703a 	and	r2,r3,r2
 2006a18:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2006a1c:	e0bff98b 	ldhu	r2,-26(fp)
 2006a20:	1005003a 	cmpeq	r2,r2,zero
 2006a24:	10000b1e 	bne	r2,zero,2006a54 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2006a28:	e0bff903 	ldbu	r2,-28(fp)
 2006a2c:	10800058 	cmpnei	r2,r2,1
 2006a30:	10000b1e 	bne	r2,zero,2006a60 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2006a34:	e0bffa17 	ldw	r2,-24(fp)
 2006a38:	10c0020b 	ldhu	r3,8(r2)
 2006a3c:	e0bff98b 	ldhu	r2,-26(fp)
 2006a40:	1884b03a 	or	r2,r3,r2
 2006a44:	1007883a 	mov	r3,r2
 2006a48:	e0bffa17 	ldw	r2,-24(fp)
 2006a4c:	10c0020d 	sth	r3,8(r2)
 2006a50:	00000306 	br	2006a60 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2006a54:	e0fffd17 	ldw	r3,-12(fp)
 2006a58:	00801c04 	movi	r2,112
 2006a5c:	18800005 	stb	r2,0(r3)
 2006a60:	e0bff817 	ldw	r2,-32(fp)
 2006a64:	e0bff315 	stw	r2,-52(fp)
 2006a68:	e0bff317 	ldw	r2,-52(fp)
 2006a6c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2006a70:	00000806 	br	2006a94 <OSFlagAccept+0x318>
 2006a74:	e0bff817 	ldw	r2,-32(fp)
 2006a78:	e0bff215 	stw	r2,-56(fp)
 2006a7c:	e0bff217 	ldw	r2,-56(fp)
 2006a80:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2006a84:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 2006a88:	e0fffd17 	ldw	r3,-12(fp)
 2006a8c:	00801bc4 	movi	r2,111
 2006a90:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 2006a94:	e0bff98b 	ldhu	r2,-26(fp)
 2006a98:	e0bfff15 	stw	r2,-4(fp)
 2006a9c:	e0bfff17 	ldw	r2,-4(fp)
}
 2006aa0:	e037883a 	mov	sp,fp
 2006aa4:	df000017 	ldw	fp,0(sp)
 2006aa8:	dec00104 	addi	sp,sp,4
 2006aac:	f800283a 	ret

02006ab0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 2006ab0:	defff704 	addi	sp,sp,-36
 2006ab4:	df000815 	stw	fp,32(sp)
 2006ab8:	df000804 	addi	fp,sp,32
 2006abc:	e17ffe15 	stw	r5,-8(fp)
 2006ac0:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2006ac4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 2006ac8:	e0bffe17 	ldw	r2,-8(fp)
 2006acc:	1004c03a 	cmpne	r2,r2,zero
 2006ad0:	1000021e 	bne	r2,zero,2006adc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 2006ad4:	e03fff15 	stw	zero,-4(fp)
 2006ad8:	00003f06 	br	2006bd8 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 2006adc:	00808074 	movhi	r2,513
 2006ae0:	108fd804 	addi	r2,r2,16224
 2006ae4:	10800003 	ldbu	r2,0(r2)
 2006ae8:	10803fcc 	andi	r2,r2,255
 2006aec:	1005003a 	cmpeq	r2,r2,zero
 2006af0:	1000051e 	bne	r2,zero,2006b08 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2006af4:	e0fffe17 	ldw	r3,-8(fp)
 2006af8:	00800404 	movi	r2,16
 2006afc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 2006b00:	e03fff15 	stw	zero,-4(fp)
 2006b04:	00003406 	br	2006bd8 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006b08:	0005303a 	rdctl	r2,status
 2006b0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006b10:	e0fffa17 	ldw	r3,-24(fp)
 2006b14:	00bfff84 	movi	r2,-2
 2006b18:	1884703a 	and	r2,r3,r2
 2006b1c:	1001703a 	wrctl	status,r2
  
  return context;
 2006b20:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2006b24:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 2006b28:	00808074 	movhi	r2,513
 2006b2c:	108fdb04 	addi	r2,r2,16236
 2006b30:	10800017 	ldw	r2,0(r2)
 2006b34:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 2006b38:	e0bffc17 	ldw	r2,-16(fp)
 2006b3c:	1005003a 	cmpeq	r2,r2,zero
 2006b40:	10001c1e 	bne	r2,zero,2006bb4 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 2006b44:	00808074 	movhi	r2,513
 2006b48:	108fdb04 	addi	r2,r2,16236
 2006b4c:	10800017 	ldw	r2,0(r2)
 2006b50:	10800117 	ldw	r2,4(r2)
 2006b54:	1007883a 	mov	r3,r2
 2006b58:	00808074 	movhi	r2,513
 2006b5c:	108fdb04 	addi	r2,r2,16236
 2006b60:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2006b64:	e0fffc17 	ldw	r3,-16(fp)
 2006b68:	00800144 	movi	r2,5
 2006b6c:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 2006b70:	e0fffc17 	ldw	r3,-16(fp)
 2006b74:	e0bffd0b 	ldhu	r2,-12(fp)
 2006b78:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 2006b7c:	e0bffc17 	ldw	r2,-16(fp)
 2006b80:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 2006b84:	e0fffc17 	ldw	r3,-16(fp)
 2006b88:	00800fc4 	movi	r2,63
 2006b8c:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2006b90:	e0bffc17 	ldw	r2,-16(fp)
 2006b94:	100002c5 	stb	zero,11(r2)
 2006b98:	e0bffb17 	ldw	r2,-20(fp)
 2006b9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006ba0:	e0bff917 	ldw	r2,-28(fp)
 2006ba4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 2006ba8:	e0bffe17 	ldw	r2,-8(fp)
 2006bac:	10000005 	stb	zero,0(r2)
 2006bb0:	00000706 	br	2006bd0 <OSFlagCreate+0x120>
 2006bb4:	e0bffb17 	ldw	r2,-20(fp)
 2006bb8:	e0bff815 	stw	r2,-32(fp)
 2006bbc:	e0bff817 	ldw	r2,-32(fp)
 2006bc0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 2006bc4:	e0fffe17 	ldw	r3,-8(fp)
 2006bc8:	00801c84 	movi	r2,114
 2006bcc:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 2006bd0:	e0bffc17 	ldw	r2,-16(fp)
 2006bd4:	e0bfff15 	stw	r2,-4(fp)
 2006bd8:	e0bfff17 	ldw	r2,-4(fp)
}
 2006bdc:	e037883a 	mov	sp,fp
 2006be0:	df000017 	ldw	fp,0(sp)
 2006be4:	dec00104 	addi	sp,sp,4
 2006be8:	f800283a 	ret

02006bec <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 2006bec:	defff004 	addi	sp,sp,-64
 2006bf0:	dfc00f15 	stw	ra,60(sp)
 2006bf4:	df000e15 	stw	fp,56(sp)
 2006bf8:	df000e04 	addi	fp,sp,56
 2006bfc:	e13ffb15 	stw	r4,-20(fp)
 2006c00:	e1bffd15 	stw	r6,-12(fp)
 2006c04:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2006c08:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2006c0c:	e0bffd17 	ldw	r2,-12(fp)
 2006c10:	1004c03a 	cmpne	r2,r2,zero
 2006c14:	1000031e 	bne	r2,zero,2006c24 <OSFlagDel+0x38>
        return (pgrp);
 2006c18:	e0bffb17 	ldw	r2,-20(fp)
 2006c1c:	e0bfff15 	stw	r2,-4(fp)
 2006c20:	00009606 	br	2006e7c <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2006c24:	e0bffb17 	ldw	r2,-20(fp)
 2006c28:	1004c03a 	cmpne	r2,r2,zero
 2006c2c:	1000061e 	bne	r2,zero,2006c48 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2006c30:	e0fffd17 	ldw	r3,-12(fp)
 2006c34:	00801b84 	movi	r2,110
 2006c38:	18800005 	stb	r2,0(r3)
        return (pgrp);
 2006c3c:	e0fffb17 	ldw	r3,-20(fp)
 2006c40:	e0ffff15 	stw	r3,-4(fp)
 2006c44:	00008d06 	br	2006e7c <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2006c48:	00808074 	movhi	r2,513
 2006c4c:	108fd804 	addi	r2,r2,16224
 2006c50:	10800003 	ldbu	r2,0(r2)
 2006c54:	10803fcc 	andi	r2,r2,255
 2006c58:	1005003a 	cmpeq	r2,r2,zero
 2006c5c:	1000061e 	bne	r2,zero,2006c78 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2006c60:	e0fffd17 	ldw	r3,-12(fp)
 2006c64:	008003c4 	movi	r2,15
 2006c68:	18800005 	stb	r2,0(r3)
        return (pgrp);
 2006c6c:	e0bffb17 	ldw	r2,-20(fp)
 2006c70:	e0bfff15 	stw	r2,-4(fp)
 2006c74:	00008106 	br	2006e7c <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2006c78:	e0bffb17 	ldw	r2,-20(fp)
 2006c7c:	10800003 	ldbu	r2,0(r2)
 2006c80:	10803fcc 	andi	r2,r2,255
 2006c84:	10800160 	cmpeqi	r2,r2,5
 2006c88:	1000061e 	bne	r2,zero,2006ca4 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 2006c8c:	e0fffd17 	ldw	r3,-12(fp)
 2006c90:	00800044 	movi	r2,1
 2006c94:	18800005 	stb	r2,0(r3)
        return (pgrp);
 2006c98:	e0fffb17 	ldw	r3,-20(fp)
 2006c9c:	e0ffff15 	stw	r3,-4(fp)
 2006ca0:	00007606 	br	2006e7c <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006ca4:	0005303a 	rdctl	r2,status
 2006ca8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006cac:	e0fff617 	ldw	r3,-40(fp)
 2006cb0:	00bfff84 	movi	r2,-2
 2006cb4:	1884703a 	and	r2,r3,r2
 2006cb8:	1001703a 	wrctl	status,r2
  
  return context;
 2006cbc:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 2006cc0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 2006cc4:	e0bffb17 	ldw	r2,-20(fp)
 2006cc8:	10800117 	ldw	r2,4(r2)
 2006ccc:	1005003a 	cmpeq	r2,r2,zero
 2006cd0:	1000031e 	bne	r2,zero,2006ce0 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2006cd4:	00800044 	movi	r2,1
 2006cd8:	e0bffa05 	stb	r2,-24(fp)
 2006cdc:	00000106 	br	2006ce4 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2006ce0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 2006ce4:	e0bffc03 	ldbu	r2,-16(fp)
 2006ce8:	e0bffe15 	stw	r2,-8(fp)
 2006cec:	e0fffe17 	ldw	r3,-8(fp)
 2006cf0:	1805003a 	cmpeq	r2,r3,zero
 2006cf4:	1000041e 	bne	r2,zero,2006d08 <OSFlagDel+0x11c>
 2006cf8:	e0fffe17 	ldw	r3,-8(fp)
 2006cfc:	18800060 	cmpeqi	r2,r3,1
 2006d00:	1000281e 	bne	r2,zero,2006da4 <OSFlagDel+0x1b8>
 2006d04:	00005206 	br	2006e50 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 2006d08:	e0bffa03 	ldbu	r2,-24(fp)
 2006d0c:	1004c03a 	cmpne	r2,r2,zero
 2006d10:	10001a1e 	bne	r2,zero,2006d7c <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 2006d14:	e0fffb17 	ldw	r3,-20(fp)
 2006d18:	00800fc4 	movi	r2,63
 2006d1c:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2006d20:	e0bffb17 	ldw	r2,-20(fp)
 2006d24:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2006d28:	e0bffb17 	ldw	r2,-20(fp)
 2006d2c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 2006d30:	00808074 	movhi	r2,513
 2006d34:	108fdb04 	addi	r2,r2,16236
 2006d38:	10c00017 	ldw	r3,0(r2)
 2006d3c:	e0bffb17 	ldw	r2,-20(fp)
 2006d40:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2006d44:	e0bffb17 	ldw	r2,-20(fp)
 2006d48:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2006d4c:	00c08074 	movhi	r3,513
 2006d50:	18cfdb04 	addi	r3,r3,16236
 2006d54:	e0bffb17 	ldw	r2,-20(fp)
 2006d58:	18800015 	stw	r2,0(r3)
 2006d5c:	e0bff717 	ldw	r2,-36(fp)
 2006d60:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006d64:	e0bff517 	ldw	r2,-44(fp)
 2006d68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2006d6c:	e0bffd17 	ldw	r2,-12(fp)
 2006d70:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2006d74:	e03ff815 	stw	zero,-32(fp)
 2006d78:	00003e06 	br	2006e74 <OSFlagDel+0x288>
 2006d7c:	e0bff717 	ldw	r2,-36(fp)
 2006d80:	e0bff415 	stw	r2,-48(fp)
 2006d84:	e0bff417 	ldw	r2,-48(fp)
 2006d88:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 2006d8c:	e0fffd17 	ldw	r3,-12(fp)
 2006d90:	00801244 	movi	r2,73
 2006d94:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 2006d98:	e0bffb17 	ldw	r2,-20(fp)
 2006d9c:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 2006da0:	00003406 	br	2006e74 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2006da4:	e0bffb17 	ldw	r2,-20(fp)
 2006da8:	10800117 	ldw	r2,4(r2)
 2006dac:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2006db0:	00000606 	br	2006dcc <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 2006db4:	e13ff917 	ldw	r4,-28(fp)
 2006db8:	000b883a 	mov	r5,zero
 2006dbc:	2007efc0 	call	2007efc <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2006dc0:	e0bff917 	ldw	r2,-28(fp)
 2006dc4:	10800017 	ldw	r2,0(r2)
 2006dc8:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2006dcc:	e0bff917 	ldw	r2,-28(fp)
 2006dd0:	1004c03a 	cmpne	r2,r2,zero
 2006dd4:	103ff71e 	bne	r2,zero,2006db4 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 2006dd8:	e0fffb17 	ldw	r3,-20(fp)
 2006ddc:	00800fc4 	movi	r2,63
 2006de0:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2006de4:	e0bffb17 	ldw	r2,-20(fp)
 2006de8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2006dec:	e0bffb17 	ldw	r2,-20(fp)
 2006df0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 2006df4:	00808074 	movhi	r2,513
 2006df8:	108fdb04 	addi	r2,r2,16236
 2006dfc:	10c00017 	ldw	r3,0(r2)
 2006e00:	e0bffb17 	ldw	r2,-20(fp)
 2006e04:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2006e08:	e0bffb17 	ldw	r2,-20(fp)
 2006e0c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 2006e10:	00c08074 	movhi	r3,513
 2006e14:	18cfdb04 	addi	r3,r3,16236
 2006e18:	e0bffb17 	ldw	r2,-20(fp)
 2006e1c:	18800015 	stw	r2,0(r3)
 2006e20:	e0bff717 	ldw	r2,-36(fp)
 2006e24:	e0bff315 	stw	r2,-52(fp)
 2006e28:	e0bff317 	ldw	r2,-52(fp)
 2006e2c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2006e30:	e0bffa03 	ldbu	r2,-24(fp)
 2006e34:	10800058 	cmpnei	r2,r2,1
 2006e38:	1000011e 	bne	r2,zero,2006e40 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2006e3c:	2005f080 	call	2005f08 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 2006e40:	e0bffd17 	ldw	r2,-12(fp)
 2006e44:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 2006e48:	e03ff815 	stw	zero,-32(fp)
             break;
 2006e4c:	00000906 	br	2006e74 <OSFlagDel+0x288>
 2006e50:	e0bff717 	ldw	r2,-36(fp)
 2006e54:	e0bff215 	stw	r2,-56(fp)
 2006e58:	e0bff217 	ldw	r2,-56(fp)
 2006e5c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2006e60:	e0fffd17 	ldw	r3,-12(fp)
 2006e64:	008001c4 	movi	r2,7
 2006e68:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 2006e6c:	e0bffb17 	ldw	r2,-20(fp)
 2006e70:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 2006e74:	e0bff817 	ldw	r2,-32(fp)
 2006e78:	e0bfff15 	stw	r2,-4(fp)
 2006e7c:	e0bfff17 	ldw	r2,-4(fp)
}
 2006e80:	e037883a 	mov	sp,fp
 2006e84:	dfc00117 	ldw	ra,4(sp)
 2006e88:	df000017 	ldw	fp,0(sp)
 2006e8c:	dec00204 	addi	sp,sp,8
 2006e90:	f800283a 	ret

02006e94 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2006e94:	defff504 	addi	sp,sp,-44
 2006e98:	dfc00a15 	stw	ra,40(sp)
 2006e9c:	df000915 	stw	fp,36(sp)
 2006ea0:	df000904 	addi	fp,sp,36
 2006ea4:	e13ffc15 	stw	r4,-16(fp)
 2006ea8:	e17ffd15 	stw	r5,-12(fp)
 2006eac:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2006eb0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2006eb4:	e0bffe17 	ldw	r2,-8(fp)
 2006eb8:	1004c03a 	cmpne	r2,r2,zero
 2006ebc:	1000021e 	bne	r2,zero,2006ec8 <OSFlagNameGet+0x34>
        return (0);
 2006ec0:	e03fff15 	stw	zero,-4(fp)
 2006ec4:	00003e06 	br	2006fc0 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2006ec8:	e0bffc17 	ldw	r2,-16(fp)
 2006ecc:	1004c03a 	cmpne	r2,r2,zero
 2006ed0:	1000051e 	bne	r2,zero,2006ee8 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2006ed4:	e0fffe17 	ldw	r3,-8(fp)
 2006ed8:	00801b84 	movi	r2,110
 2006edc:	18800005 	stb	r2,0(r3)
        return (0);
 2006ee0:	e03fff15 	stw	zero,-4(fp)
 2006ee4:	00003606 	br	2006fc0 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2006ee8:	e0bffd17 	ldw	r2,-12(fp)
 2006eec:	1004c03a 	cmpne	r2,r2,zero
 2006ef0:	1000051e 	bne	r2,zero,2006f08 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 2006ef4:	e0fffe17 	ldw	r3,-8(fp)
 2006ef8:	00800304 	movi	r2,12
 2006efc:	18800005 	stb	r2,0(r3)
        return (0);
 2006f00:	e03fff15 	stw	zero,-4(fp)
 2006f04:	00002e06 	br	2006fc0 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2006f08:	00808074 	movhi	r2,513
 2006f0c:	108fd804 	addi	r2,r2,16224
 2006f10:	10800003 	ldbu	r2,0(r2)
 2006f14:	10803fcc 	andi	r2,r2,255
 2006f18:	1005003a 	cmpeq	r2,r2,zero
 2006f1c:	1000051e 	bne	r2,zero,2006f34 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 2006f20:	e0fffe17 	ldw	r3,-8(fp)
 2006f24:	00800444 	movi	r2,17
 2006f28:	18800005 	stb	r2,0(r3)
        return (0);
 2006f2c:	e03fff15 	stw	zero,-4(fp)
 2006f30:	00002306 	br	2006fc0 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2006f34:	0005303a 	rdctl	r2,status
 2006f38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2006f3c:	e0fff917 	ldw	r3,-28(fp)
 2006f40:	00bfff84 	movi	r2,-2
 2006f44:	1884703a 	and	r2,r3,r2
 2006f48:	1001703a 	wrctl	status,r2
  
  return context;
 2006f4c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2006f50:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2006f54:	e0bffc17 	ldw	r2,-16(fp)
 2006f58:	10800003 	ldbu	r2,0(r2)
 2006f5c:	10803fcc 	andi	r2,r2,255
 2006f60:	10800160 	cmpeqi	r2,r2,5
 2006f64:	1000091e 	bne	r2,zero,2006f8c <OSFlagNameGet+0xf8>
 2006f68:	e0bffa17 	ldw	r2,-24(fp)
 2006f6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2006f70:	e0bff817 	ldw	r2,-32(fp)
 2006f74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2006f78:	e0fffe17 	ldw	r3,-8(fp)
 2006f7c:	00800044 	movi	r2,1
 2006f80:	18800005 	stb	r2,0(r3)
        return (0);
 2006f84:	e03fff15 	stw	zero,-4(fp)
 2006f88:	00000d06 	br	2006fc0 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2006f8c:	e0bffc17 	ldw	r2,-16(fp)
 2006f90:	11400284 	addi	r5,r2,10
 2006f94:	e13ffd17 	ldw	r4,-12(fp)
 2006f98:	200604c0 	call	200604c <OS_StrCopy>
 2006f9c:	e0bffb05 	stb	r2,-20(fp)
 2006fa0:	e0bffa17 	ldw	r2,-24(fp)
 2006fa4:	e0bff715 	stw	r2,-36(fp)
 2006fa8:	e0bff717 	ldw	r2,-36(fp)
 2006fac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2006fb0:	e0bffe17 	ldw	r2,-8(fp)
 2006fb4:	10000005 	stb	zero,0(r2)
    return (len);
 2006fb8:	e0bffb03 	ldbu	r2,-20(fp)
 2006fbc:	e0bfff15 	stw	r2,-4(fp)
 2006fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 2006fc4:	e037883a 	mov	sp,fp
 2006fc8:	dfc00117 	ldw	ra,4(sp)
 2006fcc:	df000017 	ldw	fp,0(sp)
 2006fd0:	dec00204 	addi	sp,sp,8
 2006fd4:	f800283a 	ret

02006fd8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2006fd8:	defff504 	addi	sp,sp,-44
 2006fdc:	dfc00a15 	stw	ra,40(sp)
 2006fe0:	df000915 	stw	fp,36(sp)
 2006fe4:	df000904 	addi	fp,sp,36
 2006fe8:	e13ffd15 	stw	r4,-12(fp)
 2006fec:	e17ffe15 	stw	r5,-8(fp)
 2006ff0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2006ff4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2006ff8:	e0bfff17 	ldw	r2,-4(fp)
 2006ffc:	1005003a 	cmpeq	r2,r2,zero
 2007000:	1000451e 	bne	r2,zero,2007118 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2007004:	e0bffd17 	ldw	r2,-12(fp)
 2007008:	1004c03a 	cmpne	r2,r2,zero
 200700c:	1000041e 	bne	r2,zero,2007020 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2007010:	e0ffff17 	ldw	r3,-4(fp)
 2007014:	00801b84 	movi	r2,110
 2007018:	18800005 	stb	r2,0(r3)
        return;
 200701c:	00003e06 	br	2007118 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2007020:	e0bffe17 	ldw	r2,-8(fp)
 2007024:	1004c03a 	cmpne	r2,r2,zero
 2007028:	1000041e 	bne	r2,zero,200703c <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 200702c:	e0ffff17 	ldw	r3,-4(fp)
 2007030:	00800304 	movi	r2,12
 2007034:	18800005 	stb	r2,0(r3)
        return;
 2007038:	00003706 	br	2007118 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200703c:	00808074 	movhi	r2,513
 2007040:	108fd804 	addi	r2,r2,16224
 2007044:	10800003 	ldbu	r2,0(r2)
 2007048:	10803fcc 	andi	r2,r2,255
 200704c:	1005003a 	cmpeq	r2,r2,zero
 2007050:	1000041e 	bne	r2,zero,2007064 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 2007054:	e0ffff17 	ldw	r3,-4(fp)
 2007058:	00800484 	movi	r2,18
 200705c:	18800005 	stb	r2,0(r3)
        return;
 2007060:	00002d06 	br	2007118 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007064:	0005303a 	rdctl	r2,status
 2007068:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200706c:	e0fffa17 	ldw	r3,-24(fp)
 2007070:	00bfff84 	movi	r2,-2
 2007074:	1884703a 	and	r2,r3,r2
 2007078:	1001703a 	wrctl	status,r2
  
  return context;
 200707c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2007080:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2007084:	e0bffd17 	ldw	r2,-12(fp)
 2007088:	10800003 	ldbu	r2,0(r2)
 200708c:	10803fcc 	andi	r2,r2,255
 2007090:	10800160 	cmpeqi	r2,r2,5
 2007094:	1000081e 	bne	r2,zero,20070b8 <OSFlagNameSet+0xe0>
 2007098:	e0bffb17 	ldw	r2,-20(fp)
 200709c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20070a0:	e0bff917 	ldw	r2,-28(fp)
 20070a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 20070a8:	e0ffff17 	ldw	r3,-4(fp)
 20070ac:	00800044 	movi	r2,1
 20070b0:	18800005 	stb	r2,0(r3)
        return;
 20070b4:	00001806 	br	2007118 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 20070b8:	e13ffe17 	ldw	r4,-8(fp)
 20070bc:	20060cc0 	call	20060cc <OS_StrLen>
 20070c0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 20070c4:	e0bffc03 	ldbu	r2,-16(fp)
 20070c8:	10800830 	cmpltui	r2,r2,32
 20070cc:	1000081e 	bne	r2,zero,20070f0 <OSFlagNameSet+0x118>
 20070d0:	e0bffb17 	ldw	r2,-20(fp)
 20070d4:	e0bff815 	stw	r2,-32(fp)
 20070d8:	e0bff817 	ldw	r2,-32(fp)
 20070dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 20070e0:	e0ffff17 	ldw	r3,-4(fp)
 20070e4:	00801cc4 	movi	r2,115
 20070e8:	18800005 	stb	r2,0(r3)
        return;
 20070ec:	00000a06 	br	2007118 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 20070f0:	e0bffd17 	ldw	r2,-12(fp)
 20070f4:	11000284 	addi	r4,r2,10
 20070f8:	e17ffe17 	ldw	r5,-8(fp)
 20070fc:	200604c0 	call	200604c <OS_StrCopy>
 2007100:	e0bffb17 	ldw	r2,-20(fp)
 2007104:	e0bff715 	stw	r2,-36(fp)
 2007108:	e0bff717 	ldw	r2,-36(fp)
 200710c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2007110:	e0bfff17 	ldw	r2,-4(fp)
 2007114:	10000005 	stb	zero,0(r2)
    return;
}
 2007118:	e037883a 	mov	sp,fp
 200711c:	dfc00117 	ldw	ra,4(sp)
 2007120:	df000017 	ldw	fp,0(sp)
 2007124:	dec00204 	addi	sp,sp,8
 2007128:	f800283a 	ret

0200712c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 200712c:	deffe004 	addi	sp,sp,-128
 2007130:	dfc01f15 	stw	ra,124(sp)
 2007134:	df001e15 	stw	fp,120(sp)
 2007138:	df001e04 	addi	fp,sp,120
 200713c:	e13ff915 	stw	r4,-28(fp)
 2007140:	e17ffa0d 	sth	r5,-24(fp)
 2007144:	e1bffb05 	stb	r6,-20(fp)
 2007148:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 200714c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2007150:	e0800217 	ldw	r2,8(fp)
 2007154:	1004c03a 	cmpne	r2,r2,zero
 2007158:	1000021e 	bne	r2,zero,2007164 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 200715c:	e03fff15 	stw	zero,-4(fp)
 2007160:	00017d06 	br	2007758 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2007164:	e0bff917 	ldw	r2,-28(fp)
 2007168:	1004c03a 	cmpne	r2,r2,zero
 200716c:	1000051e 	bne	r2,zero,2007184 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2007170:	e0c00217 	ldw	r3,8(fp)
 2007174:	00801b84 	movi	r2,110
 2007178:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 200717c:	e03fff15 	stw	zero,-4(fp)
 2007180:	00017506 	br	2007758 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2007184:	00808074 	movhi	r2,513
 2007188:	108fd804 	addi	r2,r2,16224
 200718c:	10800003 	ldbu	r2,0(r2)
 2007190:	10803fcc 	andi	r2,r2,255
 2007194:	1005003a 	cmpeq	r2,r2,zero
 2007198:	1000051e 	bne	r2,zero,20071b0 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 200719c:	e0c00217 	ldw	r3,8(fp)
 20071a0:	00800084 	movi	r2,2
 20071a4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 20071a8:	e03fff15 	stw	zero,-4(fp)
 20071ac:	00016a06 	br	2007758 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 20071b0:	00808074 	movhi	r2,513
 20071b4:	108fca04 	addi	r2,r2,16168
 20071b8:	10800003 	ldbu	r2,0(r2)
 20071bc:	10803fcc 	andi	r2,r2,255
 20071c0:	1005003a 	cmpeq	r2,r2,zero
 20071c4:	1000051e 	bne	r2,zero,20071dc <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 20071c8:	e0c00217 	ldw	r3,8(fp)
 20071cc:	00800344 	movi	r2,13
 20071d0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 20071d4:	e03fff15 	stw	zero,-4(fp)
 20071d8:	00015f06 	br	2007758 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 20071dc:	e0bff917 	ldw	r2,-28(fp)
 20071e0:	10800003 	ldbu	r2,0(r2)
 20071e4:	10803fcc 	andi	r2,r2,255
 20071e8:	10800160 	cmpeqi	r2,r2,5
 20071ec:	1000051e 	bne	r2,zero,2007204 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 20071f0:	e0c00217 	ldw	r3,8(fp)
 20071f4:	00800044 	movi	r2,1
 20071f8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 20071fc:	e03fff15 	stw	zero,-4(fp)
 2007200:	00015506 	br	2007758 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2007204:	e0fffb03 	ldbu	r3,-20(fp)
 2007208:	00bfe004 	movi	r2,-128
 200720c:	1884703a 	and	r2,r3,r2
 2007210:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2007214:	e0bff283 	ldbu	r2,-54(fp)
 2007218:	1005003a 	cmpeq	r2,r2,zero
 200721c:	1000071e 	bne	r2,zero,200723c <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2007220:	00c01fc4 	movi	r3,127
 2007224:	e0bffb03 	ldbu	r2,-20(fp)
 2007228:	10c4703a 	and	r2,r2,r3
 200722c:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 2007230:	00800044 	movi	r2,1
 2007234:	e0bff205 	stb	r2,-56(fp)
 2007238:	00000106 	br	2007240 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 200723c:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007240:	0005303a 	rdctl	r2,status
 2007244:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007248:	e0fff017 	ldw	r3,-64(fp)
 200724c:	00bfff84 	movi	r2,-2
 2007250:	1884703a 	and	r2,r3,r2
 2007254:	1001703a 	wrctl	status,r2
  
  return context;
 2007258:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 200725c:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 2007260:	e0bffb03 	ldbu	r2,-20(fp)
 2007264:	e0bffe15 	stw	r2,-8(fp)
 2007268:	e0fffe17 	ldw	r3,-8(fp)
 200726c:	18800060 	cmpeqi	r2,r3,1
 2007270:	1000981e 	bne	r2,zero,20074d4 <OSFlagPend+0x3a8>
 2007274:	e0fffe17 	ldw	r3,-8(fp)
 2007278:	18800088 	cmpgei	r2,r3,2
 200727c:	1000041e 	bne	r2,zero,2007290 <OSFlagPend+0x164>
 2007280:	e0fffe17 	ldw	r3,-8(fp)
 2007284:	1805003a 	cmpeq	r2,r3,zero
 2007288:	1000641e 	bne	r2,zero,200741c <OSFlagPend+0x2f0>
 200728c:	0000bf06 	br	200758c <OSFlagPend+0x460>
 2007290:	e0fffe17 	ldw	r3,-8(fp)
 2007294:	188000a0 	cmpeqi	r2,r3,2
 2007298:	1000041e 	bne	r2,zero,20072ac <OSFlagPend+0x180>
 200729c:	e0fffe17 	ldw	r3,-8(fp)
 20072a0:	188000e0 	cmpeqi	r2,r3,3
 20072a4:	10002f1e 	bne	r2,zero,2007364 <OSFlagPend+0x238>
 20072a8:	0000b806 	br	200758c <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 20072ac:	e0bff917 	ldw	r2,-28(fp)
 20072b0:	10c0020b 	ldhu	r3,8(r2)
 20072b4:	e0bffa0b 	ldhu	r2,-24(fp)
 20072b8:	1884703a 	and	r2,r3,r2
 20072bc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20072c0:	e0fff30b 	ldhu	r3,-52(fp)
 20072c4:	e0bffa0b 	ldhu	r2,-24(fp)
 20072c8:	18801a1e 	bne	r3,r2,2007334 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20072cc:	e0bff203 	ldbu	r2,-56(fp)
 20072d0:	10800058 	cmpnei	r2,r2,1
 20072d4:	1000091e 	bne	r2,zero,20072fc <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 20072d8:	e0bff917 	ldw	r2,-28(fp)
 20072dc:	1080020b 	ldhu	r2,8(r2)
 20072e0:	1007883a 	mov	r3,r2
 20072e4:	e0bff30b 	ldhu	r2,-52(fp)
 20072e8:	0084303a 	nor	r2,zero,r2
 20072ec:	1884703a 	and	r2,r3,r2
 20072f0:	1007883a 	mov	r3,r2
 20072f4:	e0bff917 	ldw	r2,-28(fp)
 20072f8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 20072fc:	00808074 	movhi	r2,513
 2007300:	108fd904 	addi	r2,r2,16228
 2007304:	10c00017 	ldw	r3,0(r2)
 2007308:	e0bff30b 	ldhu	r2,-52(fp)
 200730c:	18800b0d 	sth	r2,44(r3)
 2007310:	e0bff117 	ldw	r2,-60(fp)
 2007314:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007318:	e0bfef17 	ldw	r2,-68(fp)
 200731c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2007320:	e0800217 	ldw	r2,8(fp)
 2007324:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2007328:	e0bff30b 	ldhu	r2,-52(fp)
 200732c:	e0bfff15 	stw	r2,-4(fp)
 2007330:	00010906 	br	2007758 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2007334:	e1bffa0b 	ldhu	r6,-24(fp)
 2007338:	e1fffb03 	ldbu	r7,-20(fp)
 200733c:	e0bffc0b 	ldhu	r2,-16(fp)
 2007340:	e17ff404 	addi	r5,fp,-48
 2007344:	d8800015 	stw	r2,0(sp)
 2007348:	e13ff917 	ldw	r4,-28(fp)
 200734c:	2007c540 	call	2007c54 <OS_FlagBlock>
 2007350:	e0bff117 	ldw	r2,-60(fp)
 2007354:	e0bfee15 	stw	r2,-72(fp)
 2007358:	e0bfee17 	ldw	r2,-72(fp)
 200735c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2007360:	00009506 	br	20075b8 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2007364:	e0bff917 	ldw	r2,-28(fp)
 2007368:	10c0020b 	ldhu	r3,8(r2)
 200736c:	e0bffa0b 	ldhu	r2,-24(fp)
 2007370:	1884703a 	and	r2,r3,r2
 2007374:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2007378:	e0bff30b 	ldhu	r2,-52(fp)
 200737c:	1005003a 	cmpeq	r2,r2,zero
 2007380:	10001a1e 	bne	r2,zero,20073ec <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2007384:	e0bff203 	ldbu	r2,-56(fp)
 2007388:	10800058 	cmpnei	r2,r2,1
 200738c:	1000091e 	bne	r2,zero,20073b4 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2007390:	e0bff917 	ldw	r2,-28(fp)
 2007394:	1080020b 	ldhu	r2,8(r2)
 2007398:	1007883a 	mov	r3,r2
 200739c:	e0bff30b 	ldhu	r2,-52(fp)
 20073a0:	0084303a 	nor	r2,zero,r2
 20073a4:	1884703a 	and	r2,r3,r2
 20073a8:	1007883a 	mov	r3,r2
 20073ac:	e0bff917 	ldw	r2,-28(fp)
 20073b0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 20073b4:	00808074 	movhi	r2,513
 20073b8:	108fd904 	addi	r2,r2,16228
 20073bc:	10c00017 	ldw	r3,0(r2)
 20073c0:	e0bff30b 	ldhu	r2,-52(fp)
 20073c4:	18800b0d 	sth	r2,44(r3)
 20073c8:	e0bff117 	ldw	r2,-60(fp)
 20073cc:	e0bfed15 	stw	r2,-76(fp)
 20073d0:	e0bfed17 	ldw	r2,-76(fp)
 20073d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20073d8:	e0800217 	ldw	r2,8(fp)
 20073dc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 20073e0:	e0fff30b 	ldhu	r3,-52(fp)
 20073e4:	e0ffff15 	stw	r3,-4(fp)
 20073e8:	0000db06 	br	2007758 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 20073ec:	e1bffa0b 	ldhu	r6,-24(fp)
 20073f0:	e1fffb03 	ldbu	r7,-20(fp)
 20073f4:	e0bffc0b 	ldhu	r2,-16(fp)
 20073f8:	e17ff404 	addi	r5,fp,-48
 20073fc:	d8800015 	stw	r2,0(sp)
 2007400:	e13ff917 	ldw	r4,-28(fp)
 2007404:	2007c540 	call	2007c54 <OS_FlagBlock>
 2007408:	e0bff117 	ldw	r2,-60(fp)
 200740c:	e0bfec15 	stw	r2,-80(fp)
 2007410:	e0bfec17 	ldw	r2,-80(fp)
 2007414:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2007418:	00006706 	br	20075b8 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 200741c:	e0bff917 	ldw	r2,-28(fp)
 2007420:	1080020b 	ldhu	r2,8(r2)
 2007424:	0084303a 	nor	r2,zero,r2
 2007428:	1007883a 	mov	r3,r2
 200742c:	e0bffa0b 	ldhu	r2,-24(fp)
 2007430:	1884703a 	and	r2,r3,r2
 2007434:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2007438:	e0fff30b 	ldhu	r3,-52(fp)
 200743c:	e0bffa0b 	ldhu	r2,-24(fp)
 2007440:	1880181e 	bne	r3,r2,20074a4 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2007444:	e0bff203 	ldbu	r2,-56(fp)
 2007448:	10800058 	cmpnei	r2,r2,1
 200744c:	1000071e 	bne	r2,zero,200746c <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2007450:	e0bff917 	ldw	r2,-28(fp)
 2007454:	10c0020b 	ldhu	r3,8(r2)
 2007458:	e0bff30b 	ldhu	r2,-52(fp)
 200745c:	1884b03a 	or	r2,r3,r2
 2007460:	1007883a 	mov	r3,r2
 2007464:	e0bff917 	ldw	r2,-28(fp)
 2007468:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 200746c:	00808074 	movhi	r2,513
 2007470:	108fd904 	addi	r2,r2,16228
 2007474:	10c00017 	ldw	r3,0(r2)
 2007478:	e0bff30b 	ldhu	r2,-52(fp)
 200747c:	18800b0d 	sth	r2,44(r3)
 2007480:	e0bff117 	ldw	r2,-60(fp)
 2007484:	e0bfeb15 	stw	r2,-84(fp)
 2007488:	e0bfeb17 	ldw	r2,-84(fp)
 200748c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2007490:	e0800217 	ldw	r2,8(fp)
 2007494:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2007498:	e0bff30b 	ldhu	r2,-52(fp)
 200749c:	e0bfff15 	stw	r2,-4(fp)
 20074a0:	0000ad06 	br	2007758 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 20074a4:	e1bffa0b 	ldhu	r6,-24(fp)
 20074a8:	e1fffb03 	ldbu	r7,-20(fp)
 20074ac:	e0bffc0b 	ldhu	r2,-16(fp)
 20074b0:	e17ff404 	addi	r5,fp,-48
 20074b4:	d8800015 	stw	r2,0(sp)
 20074b8:	e13ff917 	ldw	r4,-28(fp)
 20074bc:	2007c540 	call	2007c54 <OS_FlagBlock>
 20074c0:	e0bff117 	ldw	r2,-60(fp)
 20074c4:	e0bfea15 	stw	r2,-88(fp)
 20074c8:	e0bfea17 	ldw	r2,-88(fp)
 20074cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 20074d0:	00003906 	br	20075b8 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 20074d4:	e0bff917 	ldw	r2,-28(fp)
 20074d8:	1080020b 	ldhu	r2,8(r2)
 20074dc:	0084303a 	nor	r2,zero,r2
 20074e0:	1007883a 	mov	r3,r2
 20074e4:	e0bffa0b 	ldhu	r2,-24(fp)
 20074e8:	1884703a 	and	r2,r3,r2
 20074ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 20074f0:	e0bff30b 	ldhu	r2,-52(fp)
 20074f4:	1005003a 	cmpeq	r2,r2,zero
 20074f8:	1000181e 	bne	r2,zero,200755c <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20074fc:	e0bff203 	ldbu	r2,-56(fp)
 2007500:	10800058 	cmpnei	r2,r2,1
 2007504:	1000071e 	bne	r2,zero,2007524 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2007508:	e0bff917 	ldw	r2,-28(fp)
 200750c:	10c0020b 	ldhu	r3,8(r2)
 2007510:	e0bff30b 	ldhu	r2,-52(fp)
 2007514:	1884b03a 	or	r2,r3,r2
 2007518:	1007883a 	mov	r3,r2
 200751c:	e0bff917 	ldw	r2,-28(fp)
 2007520:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2007524:	00808074 	movhi	r2,513
 2007528:	108fd904 	addi	r2,r2,16228
 200752c:	10c00017 	ldw	r3,0(r2)
 2007530:	e0bff30b 	ldhu	r2,-52(fp)
 2007534:	18800b0d 	sth	r2,44(r3)
 2007538:	e0bff117 	ldw	r2,-60(fp)
 200753c:	e0bfe915 	stw	r2,-92(fp)
 2007540:	e0bfe917 	ldw	r2,-92(fp)
 2007544:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2007548:	e0800217 	ldw	r2,8(fp)
 200754c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2007550:	e0fff30b 	ldhu	r3,-52(fp)
 2007554:	e0ffff15 	stw	r3,-4(fp)
 2007558:	00007f06 	br	2007758 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 200755c:	e1bffa0b 	ldhu	r6,-24(fp)
 2007560:	e1fffb03 	ldbu	r7,-20(fp)
 2007564:	e0bffc0b 	ldhu	r2,-16(fp)
 2007568:	e17ff404 	addi	r5,fp,-48
 200756c:	d8800015 	stw	r2,0(sp)
 2007570:	e13ff917 	ldw	r4,-28(fp)
 2007574:	2007c540 	call	2007c54 <OS_FlagBlock>
 2007578:	e0bff117 	ldw	r2,-60(fp)
 200757c:	e0bfe815 	stw	r2,-96(fp)
 2007580:	e0bfe817 	ldw	r2,-96(fp)
 2007584:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2007588:	00000b06 	br	20075b8 <OSFlagPend+0x48c>
 200758c:	e0bff117 	ldw	r2,-60(fp)
 2007590:	e0bfe715 	stw	r2,-100(fp)
 2007594:	e0bfe717 	ldw	r2,-100(fp)
 2007598:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 200759c:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 20075a0:	e0c00217 	ldw	r3,8(fp)
 20075a4:	00801bc4 	movi	r2,111
 20075a8:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 20075ac:	e0bff30b 	ldhu	r2,-52(fp)
 20075b0:	e0bfff15 	stw	r2,-4(fp)
 20075b4:	00006806 	br	2007758 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 20075b8:	2005f080 	call	2005f08 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20075bc:	0005303a 	rdctl	r2,status
 20075c0:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20075c4:	e0ffe617 	ldw	r3,-104(fp)
 20075c8:	00bfff84 	movi	r2,-2
 20075cc:	1884703a 	and	r2,r3,r2
 20075d0:	1001703a 	wrctl	status,r2
  
  return context;
 20075d4:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 20075d8:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 20075dc:	00808074 	movhi	r2,513
 20075e0:	108fd904 	addi	r2,r2,16228
 20075e4:	10800017 	ldw	r2,0(r2)
 20075e8:	10800c43 	ldbu	r2,49(r2)
 20075ec:	10803fcc 	andi	r2,r2,255
 20075f0:	1005003a 	cmpeq	r2,r2,zero
 20075f4:	1000221e 	bne	r2,zero,2007680 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 20075f8:	00808074 	movhi	r2,513
 20075fc:	108fd904 	addi	r2,r2,16228
 2007600:	10800017 	ldw	r2,0(r2)
 2007604:	10800c43 	ldbu	r2,49(r2)
 2007608:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 200760c:	00808074 	movhi	r2,513
 2007610:	108fd904 	addi	r2,r2,16228
 2007614:	10800017 	ldw	r2,0(r2)
 2007618:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 200761c:	e13ff404 	addi	r4,fp,-48
 2007620:	200800c0 	call	200800c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2007624:	00808074 	movhi	r2,513
 2007628:	108fd904 	addi	r2,r2,16228
 200762c:	10800017 	ldw	r2,0(r2)
 2007630:	10000c05 	stb	zero,48(r2)
 2007634:	e0bff117 	ldw	r2,-60(fp)
 2007638:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200763c:	e0bfe517 	ldw	r2,-108(fp)
 2007640:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2007644:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 2007648:	e0bff243 	ldbu	r2,-55(fp)
 200764c:	108000a0 	cmpeqi	r2,r2,2
 2007650:	1000011e 	bne	r2,zero,2007658 <OSFlagPend+0x52c>
 2007654:	00000406 	br	2007668 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2007658:	e0c00217 	ldw	r3,8(fp)
 200765c:	00800384 	movi	r2,14
 2007660:	18800005 	stb	r2,0(r3)
                 break;
 2007664:	00000306 	br	2007674 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2007668:	e0c00217 	ldw	r3,8(fp)
 200766c:	00800284 	movi	r2,10
 2007670:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 2007674:	e0fff30b 	ldhu	r3,-52(fp)
 2007678:	e0ffff15 	stw	r3,-4(fp)
 200767c:	00003606 	br	2007758 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2007680:	00808074 	movhi	r2,513
 2007684:	108fd904 	addi	r2,r2,16228
 2007688:	10800017 	ldw	r2,0(r2)
 200768c:	10800b0b 	ldhu	r2,44(r2)
 2007690:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 2007694:	e0bff203 	ldbu	r2,-56(fp)
 2007698:	10800058 	cmpnei	r2,r2,1
 200769c:	1000261e 	bne	r2,zero,2007738 <OSFlagPend+0x60c>
        switch (wait_type) {
 20076a0:	e0bffb03 	ldbu	r2,-20(fp)
 20076a4:	e0bffd15 	stw	r2,-12(fp)
 20076a8:	e0fffd17 	ldw	r3,-12(fp)
 20076ac:	1804803a 	cmplt	r2,r3,zero
 20076b0:	1000181e 	bne	r2,zero,2007714 <OSFlagPend+0x5e8>
 20076b4:	e0fffd17 	ldw	r3,-12(fp)
 20076b8:	18800090 	cmplti	r2,r3,2
 20076bc:	10000d1e 	bne	r2,zero,20076f4 <OSFlagPend+0x5c8>
 20076c0:	e0fffd17 	ldw	r3,-12(fp)
 20076c4:	18800108 	cmpgei	r2,r3,4
 20076c8:	1000121e 	bne	r2,zero,2007714 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 20076cc:	e0bff917 	ldw	r2,-28(fp)
 20076d0:	1080020b 	ldhu	r2,8(r2)
 20076d4:	1007883a 	mov	r3,r2
 20076d8:	e0bff30b 	ldhu	r2,-52(fp)
 20076dc:	0084303a 	nor	r2,zero,r2
 20076e0:	1884703a 	and	r2,r3,r2
 20076e4:	1007883a 	mov	r3,r2
 20076e8:	e0bff917 	ldw	r2,-28(fp)
 20076ec:	10c0020d 	sth	r3,8(r2)
                 break;
 20076f0:	00001106 	br	2007738 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 20076f4:	e0bff917 	ldw	r2,-28(fp)
 20076f8:	10c0020b 	ldhu	r3,8(r2)
 20076fc:	e0bff30b 	ldhu	r2,-52(fp)
 2007700:	1884b03a 	or	r2,r3,r2
 2007704:	1007883a 	mov	r3,r2
 2007708:	e0bff917 	ldw	r2,-28(fp)
 200770c:	10c0020d 	sth	r3,8(r2)
                 break;
 2007710:	00000906 	br	2007738 <OSFlagPend+0x60c>
 2007714:	e0bff117 	ldw	r2,-60(fp)
 2007718:	e0bfe415 	stw	r2,-112(fp)
 200771c:	e0bfe417 	ldw	r2,-112(fp)
 2007720:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2007724:	e0c00217 	ldw	r3,8(fp)
 2007728:	00801bc4 	movi	r2,111
 200772c:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 2007730:	e03fff15 	stw	zero,-4(fp)
 2007734:	00000806 	br	2007758 <OSFlagPend+0x62c>
 2007738:	e0bff117 	ldw	r2,-60(fp)
 200773c:	e0bfe315 	stw	r2,-116(fp)
 2007740:	e0bfe317 	ldw	r2,-116(fp)
 2007744:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 2007748:	e0800217 	ldw	r2,8(fp)
 200774c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2007750:	e0bff30b 	ldhu	r2,-52(fp)
 2007754:	e0bfff15 	stw	r2,-4(fp)
 2007758:	e0bfff17 	ldw	r2,-4(fp)
}
 200775c:	e037883a 	mov	sp,fp
 2007760:	dfc00117 	ldw	ra,4(sp)
 2007764:	df000017 	ldw	fp,0(sp)
 2007768:	dec00204 	addi	sp,sp,8
 200776c:	f800283a 	ret

02007770 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 2007770:	defffb04 	addi	sp,sp,-20
 2007774:	df000415 	stw	fp,16(sp)
 2007778:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 200777c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007780:	0005303a 	rdctl	r2,status
 2007784:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007788:	e0fffd17 	ldw	r3,-12(fp)
 200778c:	00bfff84 	movi	r2,-2
 2007790:	1884703a 	and	r2,r3,r2
 2007794:	1001703a 	wrctl	status,r2
  
  return context;
 2007798:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 200779c:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 20077a0:	00808074 	movhi	r2,513
 20077a4:	108fd904 	addi	r2,r2,16228
 20077a8:	10800017 	ldw	r2,0(r2)
 20077ac:	10800b0b 	ldhu	r2,44(r2)
 20077b0:	e0bfff0d 	sth	r2,-4(fp)
 20077b4:	e0bffe17 	ldw	r2,-8(fp)
 20077b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20077bc:	e0bffc17 	ldw	r2,-16(fp)
 20077c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 20077c4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 20077c8:	e037883a 	mov	sp,fp
 20077cc:	df000017 	ldw	fp,0(sp)
 20077d0:	dec00104 	addi	sp,sp,4
 20077d4:	f800283a 	ret

020077d8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 20077d8:	deffed04 	addi	sp,sp,-76
 20077dc:	dfc01215 	stw	ra,72(sp)
 20077e0:	df001115 	stw	fp,68(sp)
 20077e4:	df001104 	addi	fp,sp,68
 20077e8:	e13ff915 	stw	r4,-28(fp)
 20077ec:	e1fffc15 	stw	r7,-16(fp)
 20077f0:	e17ffa0d 	sth	r5,-24(fp)
 20077f4:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 20077f8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 20077fc:	e0bffc17 	ldw	r2,-16(fp)
 2007800:	1004c03a 	cmpne	r2,r2,zero
 2007804:	1000021e 	bne	r2,zero,2007810 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 2007808:	e03fff15 	stw	zero,-4(fp)
 200780c:	0000d606 	br	2007b68 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 2007810:	e0bff917 	ldw	r2,-28(fp)
 2007814:	1004c03a 	cmpne	r2,r2,zero
 2007818:	1000051e 	bne	r2,zero,2007830 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 200781c:	e0fffc17 	ldw	r3,-16(fp)
 2007820:	00801b84 	movi	r2,110
 2007824:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2007828:	e03fff15 	stw	zero,-4(fp)
 200782c:	0000ce06 	br	2007b68 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2007830:	e0bff917 	ldw	r2,-28(fp)
 2007834:	10800003 	ldbu	r2,0(r2)
 2007838:	10803fcc 	andi	r2,r2,255
 200783c:	10800160 	cmpeqi	r2,r2,5
 2007840:	1000051e 	bne	r2,zero,2007858 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2007844:	e0fffc17 	ldw	r3,-16(fp)
 2007848:	00800044 	movi	r2,1
 200784c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2007850:	e03fff15 	stw	zero,-4(fp)
 2007854:	0000c406 	br	2007b68 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007858:	0005303a 	rdctl	r2,status
 200785c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007860:	e0fff417 	ldw	r3,-48(fp)
 2007864:	00bfff84 	movi	r2,-2
 2007868:	1884703a 	and	r2,r3,r2
 200786c:	1001703a 	wrctl	status,r2
  
  return context;
 2007870:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2007874:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 2007878:	e0bffb03 	ldbu	r2,-20(fp)
 200787c:	e0bffe15 	stw	r2,-8(fp)
 2007880:	e0fffe17 	ldw	r3,-8(fp)
 2007884:	1805003a 	cmpeq	r2,r3,zero
 2007888:	1000041e 	bne	r2,zero,200789c <OSFlagPost+0xc4>
 200788c:	e0fffe17 	ldw	r3,-8(fp)
 2007890:	18800060 	cmpeqi	r2,r3,1
 2007894:	10000b1e 	bne	r2,zero,20078c4 <OSFlagPost+0xec>
 2007898:	00001206 	br	20078e4 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 200789c:	e0bff917 	ldw	r2,-28(fp)
 20078a0:	1080020b 	ldhu	r2,8(r2)
 20078a4:	1007883a 	mov	r3,r2
 20078a8:	e0bffa0b 	ldhu	r2,-24(fp)
 20078ac:	0084303a 	nor	r2,zero,r2
 20078b0:	1884703a 	and	r2,r3,r2
 20078b4:	1007883a 	mov	r3,r2
 20078b8:	e0bff917 	ldw	r2,-28(fp)
 20078bc:	10c0020d 	sth	r3,8(r2)
             break;
 20078c0:	00001106 	br	2007908 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 20078c4:	e0bff917 	ldw	r2,-28(fp)
 20078c8:	10c0020b 	ldhu	r3,8(r2)
 20078cc:	e0bffa0b 	ldhu	r2,-24(fp)
 20078d0:	1884b03a 	or	r2,r3,r2
 20078d4:	1007883a 	mov	r3,r2
 20078d8:	e0bff917 	ldw	r2,-28(fp)
 20078dc:	10c0020d 	sth	r3,8(r2)
             break;
 20078e0:	00000906 	br	2007908 <OSFlagPost+0x130>
 20078e4:	e0bff517 	ldw	r2,-44(fp)
 20078e8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20078ec:	e0bff317 	ldw	r2,-52(fp)
 20078f0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 20078f4:	e0fffc17 	ldw	r3,-16(fp)
 20078f8:	00801c44 	movi	r2,113
 20078fc:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 2007900:	e03fff15 	stw	zero,-4(fp)
 2007904:	00009806 	br	2007b68 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 2007908:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 200790c:	e0bff917 	ldw	r2,-28(fp)
 2007910:	10800117 	ldw	r2,4(r2)
 2007914:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2007918:	00007506 	br	2007af0 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 200791c:	e0bff817 	ldw	r2,-32(fp)
 2007920:	10800483 	ldbu	r2,18(r2)
 2007924:	10803fcc 	andi	r2,r2,255
 2007928:	e0bffd15 	stw	r2,-12(fp)
 200792c:	e0fffd17 	ldw	r3,-12(fp)
 2007930:	18800060 	cmpeqi	r2,r3,1
 2007934:	10004d1e 	bne	r2,zero,2007a6c <OSFlagPost+0x294>
 2007938:	e0fffd17 	ldw	r3,-12(fp)
 200793c:	18800088 	cmpgei	r2,r3,2
 2007940:	1000041e 	bne	r2,zero,2007954 <OSFlagPost+0x17c>
 2007944:	e0fffd17 	ldw	r3,-12(fp)
 2007948:	1805003a 	cmpeq	r2,r3,zero
 200794c:	1000301e 	bne	r2,zero,2007a10 <OSFlagPost+0x238>
 2007950:	00005b06 	br	2007ac0 <OSFlagPost+0x2e8>
 2007954:	e0fffd17 	ldw	r3,-12(fp)
 2007958:	188000a0 	cmpeqi	r2,r3,2
 200795c:	1000041e 	bne	r2,zero,2007970 <OSFlagPost+0x198>
 2007960:	e0fffd17 	ldw	r3,-12(fp)
 2007964:	188000e0 	cmpeqi	r2,r3,3
 2007968:	1000161e 	bne	r2,zero,20079c4 <OSFlagPost+0x1ec>
 200796c:	00005406 	br	2007ac0 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2007970:	e0bff917 	ldw	r2,-28(fp)
 2007974:	10c0020b 	ldhu	r3,8(r2)
 2007978:	e0bff817 	ldw	r2,-32(fp)
 200797c:	1080040b 	ldhu	r2,16(r2)
 2007980:	1884703a 	and	r2,r3,r2
 2007984:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2007988:	e0bff817 	ldw	r2,-32(fp)
 200798c:	1080040b 	ldhu	r2,16(r2)
 2007990:	10ffffcc 	andi	r3,r2,65535
 2007994:	e0bff68b 	ldhu	r2,-38(fp)
 2007998:	1880521e 	bne	r3,r2,2007ae4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 200799c:	e17ff68b 	ldhu	r5,-38(fp)
 20079a0:	e13ff817 	ldw	r4,-32(fp)
 20079a4:	2007efc0 	call	2007efc <OS_FlagTaskRdy>
 20079a8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 20079ac:	e0bff603 	ldbu	r2,-40(fp)
 20079b0:	10800058 	cmpnei	r2,r2,1
 20079b4:	10004b1e 	bne	r2,zero,2007ae4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 20079b8:	00800044 	movi	r2,1
 20079bc:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 20079c0:	00004806 	br	2007ae4 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 20079c4:	e0bff917 	ldw	r2,-28(fp)
 20079c8:	10c0020b 	ldhu	r3,8(r2)
 20079cc:	e0bff817 	ldw	r2,-32(fp)
 20079d0:	1080040b 	ldhu	r2,16(r2)
 20079d4:	1884703a 	and	r2,r3,r2
 20079d8:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 20079dc:	e0bff68b 	ldhu	r2,-38(fp)
 20079e0:	1005003a 	cmpeq	r2,r2,zero
 20079e4:	10003f1e 	bne	r2,zero,2007ae4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 20079e8:	e17ff68b 	ldhu	r5,-38(fp)
 20079ec:	e13ff817 	ldw	r4,-32(fp)
 20079f0:	2007efc0 	call	2007efc <OS_FlagTaskRdy>
 20079f4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 20079f8:	e0bff603 	ldbu	r2,-40(fp)
 20079fc:	10800058 	cmpnei	r2,r2,1
 2007a00:	1000381e 	bne	r2,zero,2007ae4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2007a04:	00800044 	movi	r2,1
 2007a08:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 2007a0c:	00003506 	br	2007ae4 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2007a10:	e0bff917 	ldw	r2,-28(fp)
 2007a14:	1080020b 	ldhu	r2,8(r2)
 2007a18:	0084303a 	nor	r2,zero,r2
 2007a1c:	1007883a 	mov	r3,r2
 2007a20:	e0bff817 	ldw	r2,-32(fp)
 2007a24:	1080040b 	ldhu	r2,16(r2)
 2007a28:	1884703a 	and	r2,r3,r2
 2007a2c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2007a30:	e0bff817 	ldw	r2,-32(fp)
 2007a34:	1080040b 	ldhu	r2,16(r2)
 2007a38:	10ffffcc 	andi	r3,r2,65535
 2007a3c:	e0bff68b 	ldhu	r2,-38(fp)
 2007a40:	1880281e 	bne	r3,r2,2007ae4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2007a44:	e17ff68b 	ldhu	r5,-38(fp)
 2007a48:	e13ff817 	ldw	r4,-32(fp)
 2007a4c:	2007efc0 	call	2007efc <OS_FlagTaskRdy>
 2007a50:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 2007a54:	e0bff603 	ldbu	r2,-40(fp)
 2007a58:	10800058 	cmpnei	r2,r2,1
 2007a5c:	1000211e 	bne	r2,zero,2007ae4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2007a60:	00800044 	movi	r2,1
 2007a64:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 2007a68:	00001e06 	br	2007ae4 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2007a6c:	e0bff917 	ldw	r2,-28(fp)
 2007a70:	1080020b 	ldhu	r2,8(r2)
 2007a74:	0084303a 	nor	r2,zero,r2
 2007a78:	1007883a 	mov	r3,r2
 2007a7c:	e0bff817 	ldw	r2,-32(fp)
 2007a80:	1080040b 	ldhu	r2,16(r2)
 2007a84:	1884703a 	and	r2,r3,r2
 2007a88:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2007a8c:	e0bff68b 	ldhu	r2,-38(fp)
 2007a90:	1005003a 	cmpeq	r2,r2,zero
 2007a94:	1000131e 	bne	r2,zero,2007ae4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2007a98:	e17ff68b 	ldhu	r5,-38(fp)
 2007a9c:	e13ff817 	ldw	r4,-32(fp)
 2007aa0:	2007efc0 	call	2007efc <OS_FlagTaskRdy>
 2007aa4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 2007aa8:	e0bff603 	ldbu	r2,-40(fp)
 2007aac:	10800058 	cmpnei	r2,r2,1
 2007ab0:	10000c1e 	bne	r2,zero,2007ae4 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2007ab4:	00800044 	movi	r2,1
 2007ab8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 2007abc:	00000906 	br	2007ae4 <OSFlagPost+0x30c>
 2007ac0:	e0bff517 	ldw	r2,-44(fp)
 2007ac4:	e0bff215 	stw	r2,-56(fp)
 2007ac8:	e0bff217 	ldw	r2,-56(fp)
 2007acc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2007ad0:	e0fffc17 	ldw	r3,-16(fp)
 2007ad4:	00801bc4 	movi	r2,111
 2007ad8:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 2007adc:	e03fff15 	stw	zero,-4(fp)
 2007ae0:	00002106 	br	2007b68 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 2007ae4:	e0bff817 	ldw	r2,-32(fp)
 2007ae8:	10800017 	ldw	r2,0(r2)
 2007aec:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2007af0:	e0bff817 	ldw	r2,-32(fp)
 2007af4:	1004c03a 	cmpne	r2,r2,zero
 2007af8:	103f881e 	bne	r2,zero,200791c <OSFlagPost+0x144>
 2007afc:	e0bff517 	ldw	r2,-44(fp)
 2007b00:	e0bff115 	stw	r2,-60(fp)
 2007b04:	e0bff117 	ldw	r2,-60(fp)
 2007b08:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 2007b0c:	e0bff783 	ldbu	r2,-34(fp)
 2007b10:	10800058 	cmpnei	r2,r2,1
 2007b14:	1000011e 	bne	r2,zero,2007b1c <OSFlagPost+0x344>
        OS_Sched();
 2007b18:	2005f080 	call	2005f08 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007b1c:	0005303a 	rdctl	r2,status
 2007b20:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007b24:	e0fff017 	ldw	r3,-64(fp)
 2007b28:	00bfff84 	movi	r2,-2
 2007b2c:	1884703a 	and	r2,r3,r2
 2007b30:	1001703a 	wrctl	status,r2
  
  return context;
 2007b34:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 2007b38:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 2007b3c:	e0bff917 	ldw	r2,-28(fp)
 2007b40:	1080020b 	ldhu	r2,8(r2)
 2007b44:	e0bff70d 	sth	r2,-36(fp)
 2007b48:	e0bff517 	ldw	r2,-44(fp)
 2007b4c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007b50:	e0bfef17 	ldw	r2,-68(fp)
 2007b54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 2007b58:	e0bffc17 	ldw	r2,-16(fp)
 2007b5c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 2007b60:	e0bff70b 	ldhu	r2,-36(fp)
 2007b64:	e0bfff15 	stw	r2,-4(fp)
 2007b68:	e0bfff17 	ldw	r2,-4(fp)
}
 2007b6c:	e037883a 	mov	sp,fp
 2007b70:	dfc00117 	ldw	ra,4(sp)
 2007b74:	df000017 	ldw	fp,0(sp)
 2007b78:	dec00204 	addi	sp,sp,8
 2007b7c:	f800283a 	ret

02007b80 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 2007b80:	defff804 	addi	sp,sp,-32
 2007b84:	df000715 	stw	fp,28(sp)
 2007b88:	df000704 	addi	fp,sp,28
 2007b8c:	e13ffd15 	stw	r4,-12(fp)
 2007b90:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 2007b94:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 2007b98:	e0bffe17 	ldw	r2,-8(fp)
 2007b9c:	1004c03a 	cmpne	r2,r2,zero
 2007ba0:	1000021e 	bne	r2,zero,2007bac <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 2007ba4:	e03fff15 	stw	zero,-4(fp)
 2007ba8:	00002506 	br	2007c40 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 2007bac:	e0bffd17 	ldw	r2,-12(fp)
 2007bb0:	1004c03a 	cmpne	r2,r2,zero
 2007bb4:	1000051e 	bne	r2,zero,2007bcc <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2007bb8:	e0fffe17 	ldw	r3,-8(fp)
 2007bbc:	00801b84 	movi	r2,110
 2007bc0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2007bc4:	e03fff15 	stw	zero,-4(fp)
 2007bc8:	00001d06 	br	2007c40 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 2007bcc:	e0bffd17 	ldw	r2,-12(fp)
 2007bd0:	10800003 	ldbu	r2,0(r2)
 2007bd4:	10803fcc 	andi	r2,r2,255
 2007bd8:	10800160 	cmpeqi	r2,r2,5
 2007bdc:	1000051e 	bne	r2,zero,2007bf4 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 2007be0:	e0fffe17 	ldw	r3,-8(fp)
 2007be4:	00800044 	movi	r2,1
 2007be8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2007bec:	e03fff15 	stw	zero,-4(fp)
 2007bf0:	00001306 	br	2007c40 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2007bf4:	0005303a 	rdctl	r2,status
 2007bf8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2007bfc:	e0fffa17 	ldw	r3,-24(fp)
 2007c00:	00bfff84 	movi	r2,-2
 2007c04:	1884703a 	and	r2,r3,r2
 2007c08:	1001703a 	wrctl	status,r2
  
  return context;
 2007c0c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2007c10:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 2007c14:	e0bffd17 	ldw	r2,-12(fp)
 2007c18:	1080020b 	ldhu	r2,8(r2)
 2007c1c:	e0bffc0d 	sth	r2,-16(fp)
 2007c20:	e0bffb17 	ldw	r2,-20(fp)
 2007c24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2007c28:	e0bff917 	ldw	r2,-28(fp)
 2007c2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2007c30:	e0bffe17 	ldw	r2,-8(fp)
 2007c34:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 2007c38:	e0bffc0b 	ldhu	r2,-16(fp)
 2007c3c:	e0bfff15 	stw	r2,-4(fp)
 2007c40:	e0bfff17 	ldw	r2,-4(fp)
}
 2007c44:	e037883a 	mov	sp,fp
 2007c48:	df000017 	ldw	fp,0(sp)
 2007c4c:	dec00104 	addi	sp,sp,4
 2007c50:	f800283a 	ret

02007c54 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 2007c54:	defff804 	addi	sp,sp,-32
 2007c58:	df000715 	stw	fp,28(sp)
 2007c5c:	df000704 	addi	fp,sp,28
 2007c60:	e13ffb15 	stw	r4,-20(fp)
 2007c64:	e17ffc15 	stw	r5,-16(fp)
 2007c68:	e0800117 	ldw	r2,4(fp)
 2007c6c:	e1bffd0d 	sth	r6,-12(fp)
 2007c70:	e1fffe05 	stb	r7,-8(fp)
 2007c74:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 2007c78:	00808074 	movhi	r2,513
 2007c7c:	108fd904 	addi	r2,r2,16228
 2007c80:	10c00017 	ldw	r3,0(r2)
 2007c84:	00808074 	movhi	r2,513
 2007c88:	108fd904 	addi	r2,r2,16228
 2007c8c:	10800017 	ldw	r2,0(r2)
 2007c90:	10800c03 	ldbu	r2,48(r2)
 2007c94:	10800814 	ori	r2,r2,32
 2007c98:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 2007c9c:	00808074 	movhi	r2,513
 2007ca0:	108fd904 	addi	r2,r2,16228
 2007ca4:	10800017 	ldw	r2,0(r2)
 2007ca8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 2007cac:	00808074 	movhi	r2,513
 2007cb0:	108fd904 	addi	r2,r2,16228
 2007cb4:	10c00017 	ldw	r3,0(r2)
 2007cb8:	e0bfff0b 	ldhu	r2,-4(fp)
 2007cbc:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 2007cc0:	00808074 	movhi	r2,513
 2007cc4:	108fd904 	addi	r2,r2,16228
 2007cc8:	10c00017 	ldw	r3,0(r2)
 2007ccc:	e0bffc17 	ldw	r2,-16(fp)
 2007cd0:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 2007cd4:	e0fffc17 	ldw	r3,-16(fp)
 2007cd8:	e0bffd0b 	ldhu	r2,-12(fp)
 2007cdc:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 2007ce0:	e0fffc17 	ldw	r3,-16(fp)
 2007ce4:	e0bffe03 	ldbu	r2,-8(fp)
 2007ce8:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 2007cec:	00808074 	movhi	r2,513
 2007cf0:	108fd904 	addi	r2,r2,16228
 2007cf4:	10c00017 	ldw	r3,0(r2)
 2007cf8:	e0bffc17 	ldw	r2,-16(fp)
 2007cfc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 2007d00:	e0bffb17 	ldw	r2,-20(fp)
 2007d04:	10c00117 	ldw	r3,4(r2)
 2007d08:	e0bffc17 	ldw	r2,-16(fp)
 2007d0c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 2007d10:	e0bffc17 	ldw	r2,-16(fp)
 2007d14:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 2007d18:	e0fffc17 	ldw	r3,-16(fp)
 2007d1c:	e0bffb17 	ldw	r2,-20(fp)
 2007d20:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2007d24:	e0bffb17 	ldw	r2,-20(fp)
 2007d28:	10800117 	ldw	r2,4(r2)
 2007d2c:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 2007d30:	e0bffa17 	ldw	r2,-24(fp)
 2007d34:	1005003a 	cmpeq	r2,r2,zero
 2007d38:	1000031e 	bne	r2,zero,2007d48 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 2007d3c:	e0fffa17 	ldw	r3,-24(fp)
 2007d40:	e0bffc17 	ldw	r2,-16(fp)
 2007d44:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 2007d48:	e0fffb17 	ldw	r3,-20(fp)
 2007d4c:	e0bffc17 	ldw	r2,-16(fp)
 2007d50:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 2007d54:	00808074 	movhi	r2,513
 2007d58:	108fd904 	addi	r2,r2,16228
 2007d5c:	10800017 	ldw	r2,0(r2)
 2007d60:	10800d03 	ldbu	r2,52(r2)
 2007d64:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2007d68:	e13ff903 	ldbu	r4,-28(fp)
 2007d6c:	e0fff903 	ldbu	r3,-28(fp)
 2007d70:	00808074 	movhi	r2,513
 2007d74:	108fd644 	addi	r2,r2,16217
 2007d78:	10c5883a 	add	r2,r2,r3
 2007d7c:	10800003 	ldbu	r2,0(r2)
 2007d80:	1007883a 	mov	r3,r2
 2007d84:	00808074 	movhi	r2,513
 2007d88:	108fd904 	addi	r2,r2,16228
 2007d8c:	10800017 	ldw	r2,0(r2)
 2007d90:	10800d43 	ldbu	r2,53(r2)
 2007d94:	0084303a 	nor	r2,zero,r2
 2007d98:	1884703a 	and	r2,r3,r2
 2007d9c:	1007883a 	mov	r3,r2
 2007da0:	00808074 	movhi	r2,513
 2007da4:	108fd644 	addi	r2,r2,16217
 2007da8:	1105883a 	add	r2,r2,r4
 2007dac:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 2007db0:	e0fff903 	ldbu	r3,-28(fp)
 2007db4:	00808074 	movhi	r2,513
 2007db8:	108fd644 	addi	r2,r2,16217
 2007dbc:	10c5883a 	add	r2,r2,r3
 2007dc0:	10800003 	ldbu	r2,0(r2)
 2007dc4:	10803fcc 	andi	r2,r2,255
 2007dc8:	1004c03a 	cmpne	r2,r2,zero
 2007dcc:	10000e1e 	bne	r2,zero,2007e08 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2007dd0:	00808074 	movhi	r2,513
 2007dd4:	108fd904 	addi	r2,r2,16228
 2007dd8:	10800017 	ldw	r2,0(r2)
 2007ddc:	10800d83 	ldbu	r2,54(r2)
 2007de0:	0084303a 	nor	r2,zero,r2
 2007de4:	1007883a 	mov	r3,r2
 2007de8:	00808074 	movhi	r2,513
 2007dec:	108fd604 	addi	r2,r2,16216
 2007df0:	10800003 	ldbu	r2,0(r2)
 2007df4:	1884703a 	and	r2,r3,r2
 2007df8:	1007883a 	mov	r3,r2
 2007dfc:	00808074 	movhi	r2,513
 2007e00:	108fd604 	addi	r2,r2,16216
 2007e04:	10c00005 	stb	r3,0(r2)
    }
}
 2007e08:	e037883a 	mov	sp,fp
 2007e0c:	df000017 	ldw	fp,0(sp)
 2007e10:	dec00104 	addi	sp,sp,4
 2007e14:	f800283a 	ret

02007e18 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 2007e18:	defffb04 	addi	sp,sp,-20
 2007e1c:	dfc00415 	stw	ra,16(sp)
 2007e20:	df000315 	stw	fp,12(sp)
 2007e24:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 2007e28:	01008074 	movhi	r4,513
 2007e2c:	2117ef04 	addi	r4,r4,24508
 2007e30:	0140dc04 	movi	r5,880
 2007e34:	2005e480 	call	2005e48 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 2007e38:	00808074 	movhi	r2,513
 2007e3c:	1097ef04 	addi	r2,r2,24508
 2007e40:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 2007e44:	00808074 	movhi	r2,513
 2007e48:	1097fa04 	addi	r2,r2,24552
 2007e4c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2007e50:	e03fff0d 	sth	zero,-4(fp)
 2007e54:	00001306 	br	2007ea4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2007e58:	e0bffe17 	ldw	r2,-8(fp)
 2007e5c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 2007e60:	e0fffe17 	ldw	r3,-8(fp)
 2007e64:	e0bffd17 	ldw	r2,-12(fp)
 2007e68:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 2007e6c:	e0fffe17 	ldw	r3,-8(fp)
 2007e70:	00800fc4 	movi	r2,63
 2007e74:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2007e78:	e0bffe17 	ldw	r2,-8(fp)
 2007e7c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 2007e80:	e0bffe17 	ldw	r2,-8(fp)
 2007e84:	10800b04 	addi	r2,r2,44
 2007e88:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 2007e8c:	e0bffd17 	ldw	r2,-12(fp)
 2007e90:	10800b04 	addi	r2,r2,44
 2007e94:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2007e98:	e0bfff0b 	ldhu	r2,-4(fp)
 2007e9c:	10800044 	addi	r2,r2,1
 2007ea0:	e0bfff0d 	sth	r2,-4(fp)
 2007ea4:	e0bfff0b 	ldhu	r2,-4(fp)
 2007ea8:	108004f0 	cmpltui	r2,r2,19
 2007eac:	103fea1e 	bne	r2,zero,2007e58 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2007eb0:	e0bffe17 	ldw	r2,-8(fp)
 2007eb4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 2007eb8:	e0bffe17 	ldw	r2,-8(fp)
 2007ebc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 2007ec0:	e0fffe17 	ldw	r3,-8(fp)
 2007ec4:	00800fc4 	movi	r2,63
 2007ec8:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2007ecc:	e0bffe17 	ldw	r2,-8(fp)
 2007ed0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 2007ed4:	00c08074 	movhi	r3,513
 2007ed8:	18cfdb04 	addi	r3,r3,16236
 2007edc:	00808074 	movhi	r2,513
 2007ee0:	1097ef04 	addi	r2,r2,24508
 2007ee4:	18800015 	stw	r2,0(r3)
#endif
}
 2007ee8:	e037883a 	mov	sp,fp
 2007eec:	dfc00117 	ldw	ra,4(sp)
 2007ef0:	df000017 	ldw	fp,0(sp)
 2007ef4:	dec00204 	addi	sp,sp,8
 2007ef8:	f800283a 	ret

02007efc <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 2007efc:	defffa04 	addi	sp,sp,-24
 2007f00:	dfc00515 	stw	ra,20(sp)
 2007f04:	df000415 	stw	fp,16(sp)
 2007f08:	df000404 	addi	fp,sp,16
 2007f0c:	e13ffe15 	stw	r4,-8(fp)
 2007f10:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 2007f14:	e0bffe17 	ldw	r2,-8(fp)
 2007f18:	10800217 	ldw	r2,8(r2)
 2007f1c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 2007f20:	e0bffd17 	ldw	r2,-12(fp)
 2007f24:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 2007f28:	e0fffd17 	ldw	r3,-12(fp)
 2007f2c:	e0bfff0b 	ldhu	r2,-4(fp)
 2007f30:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 2007f34:	e0bffd17 	ldw	r2,-12(fp)
 2007f38:	10c00c03 	ldbu	r3,48(r2)
 2007f3c:	00bff7c4 	movi	r2,-33
 2007f40:	1884703a 	and	r2,r3,r2
 2007f44:	1007883a 	mov	r3,r2
 2007f48:	e0bffd17 	ldw	r2,-12(fp)
 2007f4c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 2007f50:	e0bffd17 	ldw	r2,-12(fp)
 2007f54:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 2007f58:	e0bffd17 	ldw	r2,-12(fp)
 2007f5c:	10800c03 	ldbu	r2,48(r2)
 2007f60:	10803fcc 	andi	r2,r2,255
 2007f64:	1004c03a 	cmpne	r2,r2,zero
 2007f68:	10001f1e 	bne	r2,zero,2007fe8 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 2007f6c:	e0bffd17 	ldw	r2,-12(fp)
 2007f70:	10c00d83 	ldbu	r3,54(r2)
 2007f74:	00808074 	movhi	r2,513
 2007f78:	108fd604 	addi	r2,r2,16216
 2007f7c:	10800003 	ldbu	r2,0(r2)
 2007f80:	1884b03a 	or	r2,r3,r2
 2007f84:	1007883a 	mov	r3,r2
 2007f88:	00808074 	movhi	r2,513
 2007f8c:	108fd604 	addi	r2,r2,16216
 2007f90:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2007f94:	e0bffd17 	ldw	r2,-12(fp)
 2007f98:	10800d03 	ldbu	r2,52(r2)
 2007f9c:	11003fcc 	andi	r4,r2,255
 2007fa0:	e0bffd17 	ldw	r2,-12(fp)
 2007fa4:	10800d03 	ldbu	r2,52(r2)
 2007fa8:	10c03fcc 	andi	r3,r2,255
 2007fac:	00808074 	movhi	r2,513
 2007fb0:	108fd644 	addi	r2,r2,16217
 2007fb4:	10c5883a 	add	r2,r2,r3
 2007fb8:	10c00003 	ldbu	r3,0(r2)
 2007fbc:	e0bffd17 	ldw	r2,-12(fp)
 2007fc0:	10800d43 	ldbu	r2,53(r2)
 2007fc4:	1884b03a 	or	r2,r3,r2
 2007fc8:	1007883a 	mov	r3,r2
 2007fcc:	00808074 	movhi	r2,513
 2007fd0:	108fd644 	addi	r2,r2,16217
 2007fd4:	1105883a 	add	r2,r2,r4
 2007fd8:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 2007fdc:	00800044 	movi	r2,1
 2007fe0:	e0bffc05 	stb	r2,-16(fp)
 2007fe4:	00000106 	br	2007fec <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 2007fe8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 2007fec:	e13ffe17 	ldw	r4,-8(fp)
 2007ff0:	200800c0 	call	200800c <OS_FlagUnlink>
    return (sched);
 2007ff4:	e0bffc03 	ldbu	r2,-16(fp)
}
 2007ff8:	e037883a 	mov	sp,fp
 2007ffc:	dfc00117 	ldw	ra,4(sp)
 2008000:	df000017 	ldw	fp,0(sp)
 2008004:	dec00204 	addi	sp,sp,8
 2008008:	f800283a 	ret

0200800c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 200800c:	defffa04 	addi	sp,sp,-24
 2008010:	df000515 	stw	fp,20(sp)
 2008014:	df000504 	addi	fp,sp,20
 2008018:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 200801c:	e0bfff17 	ldw	r2,-4(fp)
 2008020:	10800117 	ldw	r2,4(r2)
 2008024:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2008028:	e0bfff17 	ldw	r2,-4(fp)
 200802c:	10800017 	ldw	r2,0(r2)
 2008030:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 2008034:	e0bffc17 	ldw	r2,-16(fp)
 2008038:	1004c03a 	cmpne	r2,r2,zero
 200803c:	10000c1e 	bne	r2,zero,2008070 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 2008040:	e0bfff17 	ldw	r2,-4(fp)
 2008044:	10800317 	ldw	r2,12(r2)
 2008048:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 200804c:	e0fffd17 	ldw	r3,-12(fp)
 2008050:	e0bffb17 	ldw	r2,-20(fp)
 2008054:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 2008058:	e0bffb17 	ldw	r2,-20(fp)
 200805c:	1005003a 	cmpeq	r2,r2,zero
 2008060:	10000c1e 	bne	r2,zero,2008094 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 2008064:	e0bffb17 	ldw	r2,-20(fp)
 2008068:	10000115 	stw	zero,4(r2)
 200806c:	00000906 	br	2008094 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 2008070:	e0fffc17 	ldw	r3,-16(fp)
 2008074:	e0bffb17 	ldw	r2,-20(fp)
 2008078:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 200807c:	e0bffb17 	ldw	r2,-20(fp)
 2008080:	1005003a 	cmpeq	r2,r2,zero
 2008084:	1000031e 	bne	r2,zero,2008094 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 2008088:	e0fffb17 	ldw	r3,-20(fp)
 200808c:	e0bffc17 	ldw	r2,-16(fp)
 2008090:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 2008094:	e0bfff17 	ldw	r2,-4(fp)
 2008098:	10800217 	ldw	r2,8(r2)
 200809c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 20080a0:	e0bffe17 	ldw	r2,-8(fp)
 20080a4:	10000a15 	stw	zero,40(r2)
#endif
}
 20080a8:	e037883a 	mov	sp,fp
 20080ac:	df000017 	ldw	fp,0(sp)
 20080b0:	dec00104 	addi	sp,sp,4
 20080b4:	f800283a 	ret

020080b8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 20080b8:	defff304 	addi	sp,sp,-52
 20080bc:	df000c15 	stw	fp,48(sp)
 20080c0:	df000c04 	addi	fp,sp,48
 20080c4:	e13ffb15 	stw	r4,-20(fp)
 20080c8:	e17ffc15 	stw	r5,-16(fp)
 20080cc:	e1bffd15 	stw	r6,-12(fp)
 20080d0:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20080d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20080d8:	e0bffe17 	ldw	r2,-8(fp)
 20080dc:	1004c03a 	cmpne	r2,r2,zero
 20080e0:	1000021e 	bne	r2,zero,20080ec <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 20080e4:	e03fff15 	stw	zero,-4(fp)
 20080e8:	00007506 	br	20082c0 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 20080ec:	e0bffb17 	ldw	r2,-20(fp)
 20080f0:	1004c03a 	cmpne	r2,r2,zero
 20080f4:	1000051e 	bne	r2,zero,200810c <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 20080f8:	e0fffe17 	ldw	r3,-8(fp)
 20080fc:	00801884 	movi	r2,98
 2008100:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 2008104:	e03fff15 	stw	zero,-4(fp)
 2008108:	00006d06 	br	20082c0 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 200810c:	e0bffb17 	ldw	r2,-20(fp)
 2008110:	108000cc 	andi	r2,r2,3
 2008114:	1005003a 	cmpeq	r2,r2,zero
 2008118:	1000051e 	bne	r2,zero,2008130 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 200811c:	e0fffe17 	ldw	r3,-8(fp)
 2008120:	00801884 	movi	r2,98
 2008124:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 2008128:	e03fff15 	stw	zero,-4(fp)
 200812c:	00006406 	br	20082c0 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 2008130:	e0bffc17 	ldw	r2,-16(fp)
 2008134:	108000a8 	cmpgeui	r2,r2,2
 2008138:	1000051e 	bne	r2,zero,2008150 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 200813c:	e0fffe17 	ldw	r3,-8(fp)
 2008140:	008016c4 	movi	r2,91
 2008144:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 2008148:	e03fff15 	stw	zero,-4(fp)
 200814c:	00005c06 	br	20082c0 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 2008150:	e0bffd17 	ldw	r2,-12(fp)
 2008154:	10800128 	cmpgeui	r2,r2,4
 2008158:	1000051e 	bne	r2,zero,2008170 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 200815c:	e0fffe17 	ldw	r3,-8(fp)
 2008160:	00801704 	movi	r2,92
 2008164:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 2008168:	e03fff15 	stw	zero,-4(fp)
 200816c:	00005406 	br	20082c0 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008170:	0005303a 	rdctl	r2,status
 2008174:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008178:	e0fff517 	ldw	r3,-44(fp)
 200817c:	00bfff84 	movi	r2,-2
 2008180:	1884703a 	and	r2,r3,r2
 2008184:	1001703a 	wrctl	status,r2
  
  return context;
 2008188:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200818c:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 2008190:	00808074 	movhi	r2,513
 2008194:	108fd304 	addi	r2,r2,16204
 2008198:	10800017 	ldw	r2,0(r2)
 200819c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 20081a0:	00808074 	movhi	r2,513
 20081a4:	108fd304 	addi	r2,r2,16204
 20081a8:	10800017 	ldw	r2,0(r2)
 20081ac:	1005003a 	cmpeq	r2,r2,zero
 20081b0:	1000081e 	bne	r2,zero,20081d4 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 20081b4:	00808074 	movhi	r2,513
 20081b8:	108fd304 	addi	r2,r2,16204
 20081bc:	10800017 	ldw	r2,0(r2)
 20081c0:	10800117 	ldw	r2,4(r2)
 20081c4:	1007883a 	mov	r3,r2
 20081c8:	00808074 	movhi	r2,513
 20081cc:	108fd304 	addi	r2,r2,16204
 20081d0:	10c00015 	stw	r3,0(r2)
 20081d4:	e0bff617 	ldw	r2,-40(fp)
 20081d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20081dc:	e0bff417 	ldw	r2,-48(fp)
 20081e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 20081e4:	e0bffa17 	ldw	r2,-24(fp)
 20081e8:	1004c03a 	cmpne	r2,r2,zero
 20081ec:	1000051e 	bne	r2,zero,2008204 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 20081f0:	e0fffe17 	ldw	r3,-8(fp)
 20081f4:	00801684 	movi	r2,90
 20081f8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 20081fc:	e03fff15 	stw	zero,-4(fp)
 2008200:	00002f06 	br	20082c0 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 2008204:	e0bffb17 	ldw	r2,-20(fp)
 2008208:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 200820c:	e0bffb17 	ldw	r2,-20(fp)
 2008210:	1007883a 	mov	r3,r2
 2008214:	e0bffd17 	ldw	r2,-12(fp)
 2008218:	1885883a 	add	r2,r3,r2
 200821c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 2008220:	e03ff715 	stw	zero,-36(fp)
 2008224:	00000d06 	br	200825c <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 2008228:	e0fff817 	ldw	r3,-32(fp)
 200822c:	e0bff917 	ldw	r2,-28(fp)
 2008230:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 2008234:	e0bff917 	ldw	r2,-28(fp)
 2008238:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 200823c:	e0bff917 	ldw	r2,-28(fp)
 2008240:	1007883a 	mov	r3,r2
 2008244:	e0bffd17 	ldw	r2,-12(fp)
 2008248:	1885883a 	add	r2,r3,r2
 200824c:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 2008250:	e0bff717 	ldw	r2,-36(fp)
 2008254:	10800044 	addi	r2,r2,1
 2008258:	e0bff715 	stw	r2,-36(fp)
 200825c:	e0bffc17 	ldw	r2,-16(fp)
 2008260:	10ffffc4 	addi	r3,r2,-1
 2008264:	e0bff717 	ldw	r2,-36(fp)
 2008268:	10ffef36 	bltu	r2,r3,2008228 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 200826c:	e0bff817 	ldw	r2,-32(fp)
 2008270:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 2008274:	e0fffa17 	ldw	r3,-24(fp)
 2008278:	e0bffb17 	ldw	r2,-20(fp)
 200827c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 2008280:	e0fffa17 	ldw	r3,-24(fp)
 2008284:	e0bffb17 	ldw	r2,-20(fp)
 2008288:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 200828c:	e0fffa17 	ldw	r3,-24(fp)
 2008290:	e0bffc17 	ldw	r2,-16(fp)
 2008294:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 2008298:	e0fffa17 	ldw	r3,-24(fp)
 200829c:	e0bffc17 	ldw	r2,-16(fp)
 20082a0:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 20082a4:	e0fffa17 	ldw	r3,-24(fp)
 20082a8:	e0bffd17 	ldw	r2,-12(fp)
 20082ac:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 20082b0:	e0bffe17 	ldw	r2,-8(fp)
 20082b4:	10000005 	stb	zero,0(r2)
    return (pmem);
 20082b8:	e0bffa17 	ldw	r2,-24(fp)
 20082bc:	e0bfff15 	stw	r2,-4(fp)
 20082c0:	e0bfff17 	ldw	r2,-4(fp)
}
 20082c4:	e037883a 	mov	sp,fp
 20082c8:	df000017 	ldw	fp,0(sp)
 20082cc:	dec00104 	addi	sp,sp,4
 20082d0:	f800283a 	ret

020082d4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 20082d4:	defff704 	addi	sp,sp,-36
 20082d8:	df000815 	stw	fp,32(sp)
 20082dc:	df000804 	addi	fp,sp,32
 20082e0:	e13ffd15 	stw	r4,-12(fp)
 20082e4:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20082e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20082ec:	e0bffe17 	ldw	r2,-8(fp)
 20082f0:	1004c03a 	cmpne	r2,r2,zero
 20082f4:	1000021e 	bne	r2,zero,2008300 <OSMemGet+0x2c>
        return ((void *)0);
 20082f8:	e03fff15 	stw	zero,-4(fp)
 20082fc:	00003106 	br	20083c4 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 2008300:	e0bffd17 	ldw	r2,-12(fp)
 2008304:	1004c03a 	cmpne	r2,r2,zero
 2008308:	1000051e 	bne	r2,zero,2008320 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 200830c:	e0fffe17 	ldw	r3,-8(fp)
 2008310:	00801804 	movi	r2,96
 2008314:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 2008318:	e03fff15 	stw	zero,-4(fp)
 200831c:	00002906 	br	20083c4 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008320:	0005303a 	rdctl	r2,status
 2008324:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008328:	e0fffa17 	ldw	r3,-24(fp)
 200832c:	00bfff84 	movi	r2,-2
 2008330:	1884703a 	and	r2,r3,r2
 2008334:	1001703a 	wrctl	status,r2
  
  return context;
 2008338:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200833c:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 2008340:	e0bffd17 	ldw	r2,-12(fp)
 2008344:	10800417 	ldw	r2,16(r2)
 2008348:	1005003a 	cmpeq	r2,r2,zero
 200834c:	1000151e 	bne	r2,zero,20083a4 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 2008350:	e0bffd17 	ldw	r2,-12(fp)
 2008354:	10800117 	ldw	r2,4(r2)
 2008358:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 200835c:	e0bffc17 	ldw	r2,-16(fp)
 2008360:	10c00017 	ldw	r3,0(r2)
 2008364:	e0bffd17 	ldw	r2,-12(fp)
 2008368:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 200836c:	e0bffd17 	ldw	r2,-12(fp)
 2008370:	10800417 	ldw	r2,16(r2)
 2008374:	10ffffc4 	addi	r3,r2,-1
 2008378:	e0bffd17 	ldw	r2,-12(fp)
 200837c:	10c00415 	stw	r3,16(r2)
 2008380:	e0bffb17 	ldw	r2,-20(fp)
 2008384:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008388:	e0bff917 	ldw	r2,-28(fp)
 200838c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 2008390:	e0bffe17 	ldw	r2,-8(fp)
 2008394:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 2008398:	e0bffc17 	ldw	r2,-16(fp)
 200839c:	e0bfff15 	stw	r2,-4(fp)
 20083a0:	00000806 	br	20083c4 <OSMemGet+0xf0>
 20083a4:	e0bffb17 	ldw	r2,-20(fp)
 20083a8:	e0bff815 	stw	r2,-32(fp)
 20083ac:	e0bff817 	ldw	r2,-32(fp)
 20083b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 20083b4:	e0fffe17 	ldw	r3,-8(fp)
 20083b8:	00801744 	movi	r2,93
 20083bc:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 20083c0:	e03fff15 	stw	zero,-4(fp)
 20083c4:	e0bfff17 	ldw	r2,-4(fp)
}
 20083c8:	e037883a 	mov	sp,fp
 20083cc:	df000017 	ldw	fp,0(sp)
 20083d0:	dec00104 	addi	sp,sp,4
 20083d4:	f800283a 	ret

020083d8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 20083d8:	defff604 	addi	sp,sp,-40
 20083dc:	dfc00915 	stw	ra,36(sp)
 20083e0:	df000815 	stw	fp,32(sp)
 20083e4:	df000804 	addi	fp,sp,32
 20083e8:	e13ffc15 	stw	r4,-16(fp)
 20083ec:	e17ffd15 	stw	r5,-12(fp)
 20083f0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20083f4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20083f8:	e0bffe17 	ldw	r2,-8(fp)
 20083fc:	1004c03a 	cmpne	r2,r2,zero
 2008400:	1000021e 	bne	r2,zero,200840c <OSMemNameGet+0x34>
        return (0);
 2008404:	e03fff15 	stw	zero,-4(fp)
 2008408:	00003006 	br	20084cc <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 200840c:	e0bffc17 	ldw	r2,-16(fp)
 2008410:	1004c03a 	cmpne	r2,r2,zero
 2008414:	1000051e 	bne	r2,zero,200842c <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2008418:	e0fffe17 	ldw	r3,-8(fp)
 200841c:	00801804 	movi	r2,96
 2008420:	18800005 	stb	r2,0(r3)
        return (0);
 2008424:	e03fff15 	stw	zero,-4(fp)
 2008428:	00002806 	br	20084cc <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 200842c:	e0bffd17 	ldw	r2,-12(fp)
 2008430:	1004c03a 	cmpne	r2,r2,zero
 2008434:	1000051e 	bne	r2,zero,200844c <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 2008438:	e0fffe17 	ldw	r3,-8(fp)
 200843c:	00800304 	movi	r2,12
 2008440:	18800005 	stb	r2,0(r3)
        return (0);
 2008444:	e03fff15 	stw	zero,-4(fp)
 2008448:	00002006 	br	20084cc <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200844c:	00808074 	movhi	r2,513
 2008450:	108fd804 	addi	r2,r2,16224
 2008454:	10800003 	ldbu	r2,0(r2)
 2008458:	10803fcc 	andi	r2,r2,255
 200845c:	1005003a 	cmpeq	r2,r2,zero
 2008460:	1000051e 	bne	r2,zero,2008478 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 2008464:	e0fffe17 	ldw	r3,-8(fp)
 2008468:	00800444 	movi	r2,17
 200846c:	18800005 	stb	r2,0(r3)
        return (0);
 2008470:	e03fff15 	stw	zero,-4(fp)
 2008474:	00001506 	br	20084cc <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008478:	0005303a 	rdctl	r2,status
 200847c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008480:	e0fff917 	ldw	r3,-28(fp)
 2008484:	00bfff84 	movi	r2,-2
 2008488:	1884703a 	and	r2,r3,r2
 200848c:	1001703a 	wrctl	status,r2
  
  return context;
 2008490:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2008494:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 2008498:	e0bffc17 	ldw	r2,-16(fp)
 200849c:	11400504 	addi	r5,r2,20
 20084a0:	e13ffd17 	ldw	r4,-12(fp)
 20084a4:	200604c0 	call	200604c <OS_StrCopy>
 20084a8:	e0bffb05 	stb	r2,-20(fp)
 20084ac:	e0bffa17 	ldw	r2,-24(fp)
 20084b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20084b4:	e0bff817 	ldw	r2,-32(fp)
 20084b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20084bc:	e0bffe17 	ldw	r2,-8(fp)
 20084c0:	10000005 	stb	zero,0(r2)
    return (len);
 20084c4:	e0bffb03 	ldbu	r2,-20(fp)
 20084c8:	e0bfff15 	stw	r2,-4(fp)
 20084cc:	e0bfff17 	ldw	r2,-4(fp)
}
 20084d0:	e037883a 	mov	sp,fp
 20084d4:	dfc00117 	ldw	ra,4(sp)
 20084d8:	df000017 	ldw	fp,0(sp)
 20084dc:	dec00204 	addi	sp,sp,8
 20084e0:	f800283a 	ret

020084e4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 20084e4:	defff604 	addi	sp,sp,-40
 20084e8:	dfc00915 	stw	ra,36(sp)
 20084ec:	df000815 	stw	fp,32(sp)
 20084f0:	df000804 	addi	fp,sp,32
 20084f4:	e13ffd15 	stw	r4,-12(fp)
 20084f8:	e17ffe15 	stw	r5,-8(fp)
 20084fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2008500:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2008504:	e0bfff17 	ldw	r2,-4(fp)
 2008508:	1005003a 	cmpeq	r2,r2,zero
 200850c:	1000381e 	bne	r2,zero,20085f0 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2008510:	e0bffd17 	ldw	r2,-12(fp)
 2008514:	1004c03a 	cmpne	r2,r2,zero
 2008518:	1000041e 	bne	r2,zero,200852c <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 200851c:	e0ffff17 	ldw	r3,-4(fp)
 2008520:	00801804 	movi	r2,96
 2008524:	18800005 	stb	r2,0(r3)
        return;
 2008528:	00003106 	br	20085f0 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 200852c:	e0bffe17 	ldw	r2,-8(fp)
 2008530:	1004c03a 	cmpne	r2,r2,zero
 2008534:	1000041e 	bne	r2,zero,2008548 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 2008538:	e0ffff17 	ldw	r3,-4(fp)
 200853c:	00800304 	movi	r2,12
 2008540:	18800005 	stb	r2,0(r3)
        return;
 2008544:	00002a06 	br	20085f0 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2008548:	00808074 	movhi	r2,513
 200854c:	108fd804 	addi	r2,r2,16224
 2008550:	10800003 	ldbu	r2,0(r2)
 2008554:	10803fcc 	andi	r2,r2,255
 2008558:	1005003a 	cmpeq	r2,r2,zero
 200855c:	1000041e 	bne	r2,zero,2008570 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 2008560:	e0ffff17 	ldw	r3,-4(fp)
 2008564:	00800484 	movi	r2,18
 2008568:	18800005 	stb	r2,0(r3)
        return;
 200856c:	00002006 	br	20085f0 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008570:	0005303a 	rdctl	r2,status
 2008574:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008578:	e0fffa17 	ldw	r3,-24(fp)
 200857c:	00bfff84 	movi	r2,-2
 2008580:	1884703a 	and	r2,r3,r2
 2008584:	1001703a 	wrctl	status,r2
  
  return context;
 2008588:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 200858c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2008590:	e13ffe17 	ldw	r4,-8(fp)
 2008594:	20060cc0 	call	20060cc <OS_StrLen>
 2008598:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 200859c:	e0bffc03 	ldbu	r2,-16(fp)
 20085a0:	10800830 	cmpltui	r2,r2,32
 20085a4:	1000081e 	bne	r2,zero,20085c8 <OSMemNameSet+0xe4>
 20085a8:	e0bffb17 	ldw	r2,-20(fp)
 20085ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20085b0:	e0bff917 	ldw	r2,-28(fp)
 20085b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 20085b8:	e0ffff17 	ldw	r3,-4(fp)
 20085bc:	008018c4 	movi	r2,99
 20085c0:	18800005 	stb	r2,0(r3)
        return;
 20085c4:	00000a06 	br	20085f0 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 20085c8:	e0bffd17 	ldw	r2,-12(fp)
 20085cc:	11000504 	addi	r4,r2,20
 20085d0:	e17ffe17 	ldw	r5,-8(fp)
 20085d4:	200604c0 	call	200604c <OS_StrCopy>
 20085d8:	e0bffb17 	ldw	r2,-20(fp)
 20085dc:	e0bff815 	stw	r2,-32(fp)
 20085e0:	e0bff817 	ldw	r2,-32(fp)
 20085e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20085e8:	e0bfff17 	ldw	r2,-4(fp)
 20085ec:	10000005 	stb	zero,0(r2)
}
 20085f0:	e037883a 	mov	sp,fp
 20085f4:	dfc00117 	ldw	ra,4(sp)
 20085f8:	df000017 	ldw	fp,0(sp)
 20085fc:	dec00204 	addi	sp,sp,8
 2008600:	f800283a 	ret

02008604 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 2008604:	defff804 	addi	sp,sp,-32
 2008608:	df000715 	stw	fp,28(sp)
 200860c:	df000704 	addi	fp,sp,28
 2008610:	e13ffd15 	stw	r4,-12(fp)
 2008614:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2008618:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 200861c:	e0bffd17 	ldw	r2,-12(fp)
 2008620:	1004c03a 	cmpne	r2,r2,zero
 2008624:	1000031e 	bne	r2,zero,2008634 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 2008628:	00801804 	movi	r2,96
 200862c:	e0bfff15 	stw	r2,-4(fp)
 2008630:	00002b06 	br	20086e0 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 2008634:	e0bffe17 	ldw	r2,-8(fp)
 2008638:	1004c03a 	cmpne	r2,r2,zero
 200863c:	1000031e 	bne	r2,zero,200864c <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 2008640:	008017c4 	movi	r2,95
 2008644:	e0bfff15 	stw	r2,-4(fp)
 2008648:	00002506 	br	20086e0 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200864c:	0005303a 	rdctl	r2,status
 2008650:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008654:	e0fffb17 	ldw	r3,-20(fp)
 2008658:	00bfff84 	movi	r2,-2
 200865c:	1884703a 	and	r2,r3,r2
 2008660:	1001703a 	wrctl	status,r2
  
  return context;
 2008664:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2008668:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 200866c:	e0bffd17 	ldw	r2,-12(fp)
 2008670:	10c00417 	ldw	r3,16(r2)
 2008674:	e0bffd17 	ldw	r2,-12(fp)
 2008678:	10800317 	ldw	r2,12(r2)
 200867c:	18800736 	bltu	r3,r2,200869c <OSMemPut+0x98>
 2008680:	e0bffc17 	ldw	r2,-16(fp)
 2008684:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008688:	e0bffa17 	ldw	r2,-24(fp)
 200868c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 2008690:	00801784 	movi	r2,94
 2008694:	e0bfff15 	stw	r2,-4(fp)
 2008698:	00001106 	br	20086e0 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 200869c:	e0fffe17 	ldw	r3,-8(fp)
 20086a0:	e0bffd17 	ldw	r2,-12(fp)
 20086a4:	10800117 	ldw	r2,4(r2)
 20086a8:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 20086ac:	e0fffd17 	ldw	r3,-12(fp)
 20086b0:	e0bffe17 	ldw	r2,-8(fp)
 20086b4:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 20086b8:	e0bffd17 	ldw	r2,-12(fp)
 20086bc:	10800417 	ldw	r2,16(r2)
 20086c0:	10c00044 	addi	r3,r2,1
 20086c4:	e0bffd17 	ldw	r2,-12(fp)
 20086c8:	10c00415 	stw	r3,16(r2)
 20086cc:	e0bffc17 	ldw	r2,-16(fp)
 20086d0:	e0bff915 	stw	r2,-28(fp)
 20086d4:	e0bff917 	ldw	r2,-28(fp)
 20086d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 20086dc:	e03fff15 	stw	zero,-4(fp)
 20086e0:	e0bfff17 	ldw	r2,-4(fp)
}
 20086e4:	e037883a 	mov	sp,fp
 20086e8:	df000017 	ldw	fp,0(sp)
 20086ec:	dec00104 	addi	sp,sp,4
 20086f0:	f800283a 	ret

020086f4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 20086f4:	defff904 	addi	sp,sp,-28
 20086f8:	df000615 	stw	fp,24(sp)
 20086fc:	df000604 	addi	fp,sp,24
 2008700:	e13ffd15 	stw	r4,-12(fp)
 2008704:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2008708:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 200870c:	e0bffd17 	ldw	r2,-12(fp)
 2008710:	1004c03a 	cmpne	r2,r2,zero
 2008714:	1000031e 	bne	r2,zero,2008724 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 2008718:	00801804 	movi	r2,96
 200871c:	e0bfff15 	stw	r2,-4(fp)
 2008720:	00002e06 	br	20087dc <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 2008724:	e0bffe17 	ldw	r2,-8(fp)
 2008728:	1004c03a 	cmpne	r2,r2,zero
 200872c:	1000031e 	bne	r2,zero,200873c <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 2008730:	00801844 	movi	r2,97
 2008734:	e0bfff15 	stw	r2,-4(fp)
 2008738:	00002806 	br	20087dc <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200873c:	0005303a 	rdctl	r2,status
 2008740:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008744:	e0fffb17 	ldw	r3,-20(fp)
 2008748:	00bfff84 	movi	r2,-2
 200874c:	1884703a 	and	r2,r3,r2
 2008750:	1001703a 	wrctl	status,r2
  
  return context;
 2008754:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2008758:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 200875c:	e0bffd17 	ldw	r2,-12(fp)
 2008760:	10c00017 	ldw	r3,0(r2)
 2008764:	e0bffe17 	ldw	r2,-8(fp)
 2008768:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 200876c:	e0bffd17 	ldw	r2,-12(fp)
 2008770:	10c00117 	ldw	r3,4(r2)
 2008774:	e0bffe17 	ldw	r2,-8(fp)
 2008778:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 200877c:	e0bffd17 	ldw	r2,-12(fp)
 2008780:	10c00217 	ldw	r3,8(r2)
 2008784:	e0bffe17 	ldw	r2,-8(fp)
 2008788:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 200878c:	e0bffd17 	ldw	r2,-12(fp)
 2008790:	10c00317 	ldw	r3,12(r2)
 2008794:	e0bffe17 	ldw	r2,-8(fp)
 2008798:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 200879c:	e0bffd17 	ldw	r2,-12(fp)
 20087a0:	10c00417 	ldw	r3,16(r2)
 20087a4:	e0bffe17 	ldw	r2,-8(fp)
 20087a8:	10c00415 	stw	r3,16(r2)
 20087ac:	e0bffc17 	ldw	r2,-16(fp)
 20087b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20087b4:	e0bffa17 	ldw	r2,-24(fp)
 20087b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 20087bc:	e0bffe17 	ldw	r2,-8(fp)
 20087c0:	10c00317 	ldw	r3,12(r2)
 20087c4:	e0bffe17 	ldw	r2,-8(fp)
 20087c8:	10800417 	ldw	r2,16(r2)
 20087cc:	1887c83a 	sub	r3,r3,r2
 20087d0:	e0bffe17 	ldw	r2,-8(fp)
 20087d4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 20087d8:	e03fff15 	stw	zero,-4(fp)
 20087dc:	e0bfff17 	ldw	r2,-4(fp)
}
 20087e0:	e037883a 	mov	sp,fp
 20087e4:	df000017 	ldw	fp,0(sp)
 20087e8:	dec00104 	addi	sp,sp,4
 20087ec:	f800283a 	ret

020087f0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 20087f0:	defffc04 	addi	sp,sp,-16
 20087f4:	dfc00315 	stw	ra,12(sp)
 20087f8:	df000215 	stw	fp,8(sp)
 20087fc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 2008800:	01008074 	movhi	r4,513
 2008804:	2118cb04 	addi	r4,r4,25388
 2008808:	01430c04 	movi	r5,3120
 200880c:	2005e480 	call	2005e48 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 2008810:	00808074 	movhi	r2,513
 2008814:	1098cb04 	addi	r2,r2,25388
 2008818:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 200881c:	e03ffe0d 	sth	zero,-8(fp)
 2008820:	00001306 	br	2008870 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 2008824:	e0bffe0b 	ldhu	r2,-8(fp)
 2008828:	10800d24 	muli	r2,r2,52
 200882c:	1007883a 	mov	r3,r2
 2008830:	00808074 	movhi	r2,513
 2008834:	1098d804 	addi	r2,r2,25440
 2008838:	1887883a 	add	r3,r3,r2
 200883c:	e0bfff17 	ldw	r2,-4(fp)
 2008840:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 2008844:	e0ffff17 	ldw	r3,-4(fp)
 2008848:	00800fc4 	movi	r2,63
 200884c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 2008850:	e0bfff17 	ldw	r2,-4(fp)
 2008854:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 2008858:	e0bfff17 	ldw	r2,-4(fp)
 200885c:	10800d04 	addi	r2,r2,52
 2008860:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2008864:	e0bffe0b 	ldhu	r2,-8(fp)
 2008868:	10800044 	addi	r2,r2,1
 200886c:	e0bffe0d 	sth	r2,-8(fp)
 2008870:	e0bffe0b 	ldhu	r2,-8(fp)
 2008874:	10800ef0 	cmpltui	r2,r2,59
 2008878:	103fea1e 	bne	r2,zero,2008824 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 200887c:	e0bfff17 	ldw	r2,-4(fp)
 2008880:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 2008884:	e0ffff17 	ldw	r3,-4(fp)
 2008888:	00800fc4 	movi	r2,63
 200888c:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 2008890:	e0bfff17 	ldw	r2,-4(fp)
 2008894:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 2008898:	00c08074 	movhi	r3,513
 200889c:	18cfd304 	addi	r3,r3,16204
 20088a0:	00808074 	movhi	r2,513
 20088a4:	1098cb04 	addi	r2,r2,25388
 20088a8:	18800015 	stw	r2,0(r3)
#endif
}
 20088ac:	e037883a 	mov	sp,fp
 20088b0:	dfc00117 	ldw	ra,4(sp)
 20088b4:	df000017 	ldw	fp,0(sp)
 20088b8:	dec00204 	addi	sp,sp,8
 20088bc:	f800283a 	ret

020088c0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 20088c0:	defff704 	addi	sp,sp,-36
 20088c4:	df000815 	stw	fp,32(sp)
 20088c8:	df000804 	addi	fp,sp,32
 20088cc:	e13ffd15 	stw	r4,-12(fp)
 20088d0:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20088d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20088d8:	e0bffe17 	ldw	r2,-8(fp)
 20088dc:	1004c03a 	cmpne	r2,r2,zero
 20088e0:	1000021e 	bne	r2,zero,20088ec <OSQAccept+0x2c>
        return ((void *)0);
 20088e4:	e03fff15 	stw	zero,-4(fp)
 20088e8:	00004506 	br	2008a00 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 20088ec:	e0bffd17 	ldw	r2,-12(fp)
 20088f0:	1004c03a 	cmpne	r2,r2,zero
 20088f4:	1000051e 	bne	r2,zero,200890c <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 20088f8:	e0fffe17 	ldw	r3,-8(fp)
 20088fc:	00800104 	movi	r2,4
 2008900:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 2008904:	e03fff15 	stw	zero,-4(fp)
 2008908:	00003d06 	br	2008a00 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 200890c:	e0bffd17 	ldw	r2,-12(fp)
 2008910:	10800003 	ldbu	r2,0(r2)
 2008914:	10803fcc 	andi	r2,r2,255
 2008918:	108000a0 	cmpeqi	r2,r2,2
 200891c:	1000051e 	bne	r2,zero,2008934 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 2008920:	e0fffe17 	ldw	r3,-8(fp)
 2008924:	00800044 	movi	r2,1
 2008928:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 200892c:	e03fff15 	stw	zero,-4(fp)
 2008930:	00003306 	br	2008a00 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008934:	0005303a 	rdctl	r2,status
 2008938:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200893c:	e0fff917 	ldw	r3,-28(fp)
 2008940:	00bfff84 	movi	r2,-2
 2008944:	1884703a 	and	r2,r3,r2
 2008948:	1001703a 	wrctl	status,r2
  
  return context;
 200894c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2008950:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2008954:	e0bffd17 	ldw	r2,-12(fp)
 2008958:	10800117 	ldw	r2,4(r2)
 200895c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2008960:	e0bffb17 	ldw	r2,-20(fp)
 2008964:	1080058b 	ldhu	r2,22(r2)
 2008968:	10bfffcc 	andi	r2,r2,65535
 200896c:	1005003a 	cmpeq	r2,r2,zero
 2008970:	1000191e 	bne	r2,zero,20089d8 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2008974:	e0bffb17 	ldw	r2,-20(fp)
 2008978:	10c00417 	ldw	r3,16(r2)
 200897c:	18800017 	ldw	r2,0(r3)
 2008980:	e0bffc15 	stw	r2,-16(fp)
 2008984:	18c00104 	addi	r3,r3,4
 2008988:	e0bffb17 	ldw	r2,-20(fp)
 200898c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2008990:	e0bffb17 	ldw	r2,-20(fp)
 2008994:	1080058b 	ldhu	r2,22(r2)
 2008998:	10bfffc4 	addi	r2,r2,-1
 200899c:	1007883a 	mov	r3,r2
 20089a0:	e0bffb17 	ldw	r2,-20(fp)
 20089a4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 20089a8:	e0bffb17 	ldw	r2,-20(fp)
 20089ac:	10c00417 	ldw	r3,16(r2)
 20089b0:	e0bffb17 	ldw	r2,-20(fp)
 20089b4:	10800217 	ldw	r2,8(r2)
 20089b8:	1880041e 	bne	r3,r2,20089cc <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 20089bc:	e0bffb17 	ldw	r2,-20(fp)
 20089c0:	10c00117 	ldw	r3,4(r2)
 20089c4:	e0bffb17 	ldw	r2,-20(fp)
 20089c8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 20089cc:	e0bffe17 	ldw	r2,-8(fp)
 20089d0:	10000005 	stb	zero,0(r2)
 20089d4:	00000406 	br	20089e8 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 20089d8:	e0fffe17 	ldw	r3,-8(fp)
 20089dc:	008007c4 	movi	r2,31
 20089e0:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 20089e4:	e03ffc15 	stw	zero,-16(fp)
 20089e8:	e0bffa17 	ldw	r2,-24(fp)
 20089ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20089f0:	e0bff817 	ldw	r2,-32(fp)
 20089f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 20089f8:	e0bffc17 	ldw	r2,-16(fp)
 20089fc:	e0bfff15 	stw	r2,-4(fp)
 2008a00:	e0bfff17 	ldw	r2,-4(fp)
}
 2008a04:	e037883a 	mov	sp,fp
 2008a08:	df000017 	ldw	fp,0(sp)
 2008a0c:	dec00104 	addi	sp,sp,4
 2008a10:	f800283a 	ret

02008a14 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 2008a14:	defff304 	addi	sp,sp,-52
 2008a18:	dfc00c15 	stw	ra,48(sp)
 2008a1c:	df000b15 	stw	fp,44(sp)
 2008a20:	df000b04 	addi	fp,sp,44
 2008a24:	e13ffd15 	stw	r4,-12(fp)
 2008a28:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2008a2c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2008a30:	00808074 	movhi	r2,513
 2008a34:	108fd804 	addi	r2,r2,16224
 2008a38:	10800003 	ldbu	r2,0(r2)
 2008a3c:	10803fcc 	andi	r2,r2,255
 2008a40:	1005003a 	cmpeq	r2,r2,zero
 2008a44:	1000021e 	bne	r2,zero,2008a50 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2008a48:	e03fff15 	stw	zero,-4(fp)
 2008a4c:	00007006 	br	2008c10 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008a50:	0005303a 	rdctl	r2,status
 2008a54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008a58:	e0fff917 	ldw	r3,-28(fp)
 2008a5c:	00bfff84 	movi	r2,-2
 2008a60:	1884703a 	and	r2,r3,r2
 2008a64:	1001703a 	wrctl	status,r2
  
  return context;
 2008a68:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2008a6c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2008a70:	00808074 	movhi	r2,513
 2008a74:	108fd704 	addi	r2,r2,16220
 2008a78:	10800017 	ldw	r2,0(r2)
 2008a7c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2008a80:	00808074 	movhi	r2,513
 2008a84:	108fd704 	addi	r2,r2,16220
 2008a88:	10800017 	ldw	r2,0(r2)
 2008a8c:	1005003a 	cmpeq	r2,r2,zero
 2008a90:	1000081e 	bne	r2,zero,2008ab4 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2008a94:	00808074 	movhi	r2,513
 2008a98:	108fd704 	addi	r2,r2,16220
 2008a9c:	10800017 	ldw	r2,0(r2)
 2008aa0:	10800117 	ldw	r2,4(r2)
 2008aa4:	1007883a 	mov	r3,r2
 2008aa8:	00808074 	movhi	r2,513
 2008aac:	108fd704 	addi	r2,r2,16220
 2008ab0:	10c00015 	stw	r3,0(r2)
 2008ab4:	e0bffa17 	ldw	r2,-24(fp)
 2008ab8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008abc:	e0bff817 	ldw	r2,-32(fp)
 2008ac0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 2008ac4:	e0bffc17 	ldw	r2,-16(fp)
 2008ac8:	1005003a 	cmpeq	r2,r2,zero
 2008acc:	10004e1e 	bne	r2,zero,2008c08 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008ad0:	0005303a 	rdctl	r2,status
 2008ad4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008ad8:	e0fff717 	ldw	r3,-36(fp)
 2008adc:	00bfff84 	movi	r2,-2
 2008ae0:	1884703a 	and	r2,r3,r2
 2008ae4:	1001703a 	wrctl	status,r2
  
  return context;
 2008ae8:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 2008aec:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 2008af0:	00808074 	movhi	r2,513
 2008af4:	108fd504 	addi	r2,r2,16212
 2008af8:	10800017 	ldw	r2,0(r2)
 2008afc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 2008b00:	e0bffb17 	ldw	r2,-20(fp)
 2008b04:	1005003a 	cmpeq	r2,r2,zero
 2008b08:	1000311e 	bne	r2,zero,2008bd0 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 2008b0c:	00808074 	movhi	r2,513
 2008b10:	108fd504 	addi	r2,r2,16212
 2008b14:	10800017 	ldw	r2,0(r2)
 2008b18:	10c00017 	ldw	r3,0(r2)
 2008b1c:	00808074 	movhi	r2,513
 2008b20:	108fd504 	addi	r2,r2,16212
 2008b24:	10c00015 	stw	r3,0(r2)
 2008b28:	e0bffa17 	ldw	r2,-24(fp)
 2008b2c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008b30:	e0bff617 	ldw	r2,-40(fp)
 2008b34:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 2008b38:	e0fffb17 	ldw	r3,-20(fp)
 2008b3c:	e0bffd17 	ldw	r2,-12(fp)
 2008b40:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 2008b44:	e0bffe0b 	ldhu	r2,-8(fp)
 2008b48:	1085883a 	add	r2,r2,r2
 2008b4c:	1085883a 	add	r2,r2,r2
 2008b50:	1007883a 	mov	r3,r2
 2008b54:	e0bffd17 	ldw	r2,-12(fp)
 2008b58:	1887883a 	add	r3,r3,r2
 2008b5c:	e0bffb17 	ldw	r2,-20(fp)
 2008b60:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2008b64:	e0fffb17 	ldw	r3,-20(fp)
 2008b68:	e0bffd17 	ldw	r2,-12(fp)
 2008b6c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 2008b70:	e0fffb17 	ldw	r3,-20(fp)
 2008b74:	e0bffd17 	ldw	r2,-12(fp)
 2008b78:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 2008b7c:	e0fffb17 	ldw	r3,-20(fp)
 2008b80:	e0bffe0b 	ldhu	r2,-8(fp)
 2008b84:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 2008b88:	e0bffb17 	ldw	r2,-20(fp)
 2008b8c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2008b90:	e0fffc17 	ldw	r3,-16(fp)
 2008b94:	00800084 	movi	r2,2
 2008b98:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 2008b9c:	e0bffc17 	ldw	r2,-16(fp)
 2008ba0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2008ba4:	e0fffc17 	ldw	r3,-16(fp)
 2008ba8:	e0bffb17 	ldw	r2,-20(fp)
 2008bac:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2008bb0:	e0fffc17 	ldw	r3,-16(fp)
 2008bb4:	00800fc4 	movi	r2,63
 2008bb8:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 2008bbc:	e0bffc17 	ldw	r2,-16(fp)
 2008bc0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 2008bc4:	e13ffc17 	ldw	r4,-16(fp)
 2008bc8:	2005a7c0 	call	2005a7c <OS_EventWaitListInit>
 2008bcc:	00000e06 	br	2008c08 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 2008bd0:	00808074 	movhi	r2,513
 2008bd4:	108fd704 	addi	r2,r2,16220
 2008bd8:	10c00017 	ldw	r3,0(r2)
 2008bdc:	e0bffc17 	ldw	r2,-16(fp)
 2008be0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 2008be4:	00c08074 	movhi	r3,513
 2008be8:	18cfd704 	addi	r3,r3,16220
 2008bec:	e0bffc17 	ldw	r2,-16(fp)
 2008bf0:	18800015 	stw	r2,0(r3)
 2008bf4:	e0bffa17 	ldw	r2,-24(fp)
 2008bf8:	e0bff515 	stw	r2,-44(fp)
 2008bfc:	e0bff517 	ldw	r2,-44(fp)
 2008c00:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 2008c04:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 2008c08:	e0bffc17 	ldw	r2,-16(fp)
 2008c0c:	e0bfff15 	stw	r2,-4(fp)
 2008c10:	e0bfff17 	ldw	r2,-4(fp)
}
 2008c14:	e037883a 	mov	sp,fp
 2008c18:	dfc00117 	ldw	ra,4(sp)
 2008c1c:	df000017 	ldw	fp,0(sp)
 2008c20:	dec00204 	addi	sp,sp,8
 2008c24:	f800283a 	ret

02008c28 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2008c28:	defff004 	addi	sp,sp,-64
 2008c2c:	dfc00f15 	stw	ra,60(sp)
 2008c30:	df000e15 	stw	fp,56(sp)
 2008c34:	df000e04 	addi	fp,sp,56
 2008c38:	e13ffb15 	stw	r4,-20(fp)
 2008c3c:	e1bffd15 	stw	r6,-12(fp)
 2008c40:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2008c44:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2008c48:	e0bffd17 	ldw	r2,-12(fp)
 2008c4c:	1004c03a 	cmpne	r2,r2,zero
 2008c50:	1000031e 	bne	r2,zero,2008c60 <OSQDel+0x38>
        return (pevent);
 2008c54:	e0bffb17 	ldw	r2,-20(fp)
 2008c58:	e0bfff15 	stw	r2,-4(fp)
 2008c5c:	0000ac06 	br	2008f10 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2008c60:	e0bffb17 	ldw	r2,-20(fp)
 2008c64:	1004c03a 	cmpne	r2,r2,zero
 2008c68:	1000061e 	bne	r2,zero,2008c84 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 2008c6c:	e0fffd17 	ldw	r3,-12(fp)
 2008c70:	00800104 	movi	r2,4
 2008c74:	18800005 	stb	r2,0(r3)
        return (pevent);
 2008c78:	e0fffb17 	ldw	r3,-20(fp)
 2008c7c:	e0ffff15 	stw	r3,-4(fp)
 2008c80:	0000a306 	br	2008f10 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2008c84:	e0bffb17 	ldw	r2,-20(fp)
 2008c88:	10800003 	ldbu	r2,0(r2)
 2008c8c:	10803fcc 	andi	r2,r2,255
 2008c90:	108000a0 	cmpeqi	r2,r2,2
 2008c94:	1000061e 	bne	r2,zero,2008cb0 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 2008c98:	e0fffd17 	ldw	r3,-12(fp)
 2008c9c:	00800044 	movi	r2,1
 2008ca0:	18800005 	stb	r2,0(r3)
        return (pevent);
 2008ca4:	e0bffb17 	ldw	r2,-20(fp)
 2008ca8:	e0bfff15 	stw	r2,-4(fp)
 2008cac:	00009806 	br	2008f10 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2008cb0:	00808074 	movhi	r2,513
 2008cb4:	108fd804 	addi	r2,r2,16224
 2008cb8:	10800003 	ldbu	r2,0(r2)
 2008cbc:	10803fcc 	andi	r2,r2,255
 2008cc0:	1005003a 	cmpeq	r2,r2,zero
 2008cc4:	1000061e 	bne	r2,zero,2008ce0 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2008cc8:	e0fffd17 	ldw	r3,-12(fp)
 2008ccc:	008003c4 	movi	r2,15
 2008cd0:	18800005 	stb	r2,0(r3)
        return (pevent);
 2008cd4:	e0fffb17 	ldw	r3,-20(fp)
 2008cd8:	e0ffff15 	stw	r3,-4(fp)
 2008cdc:	00008c06 	br	2008f10 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008ce0:	0005303a 	rdctl	r2,status
 2008ce4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008ce8:	e0fff617 	ldw	r3,-40(fp)
 2008cec:	00bfff84 	movi	r2,-2
 2008cf0:	1884703a 	and	r2,r3,r2
 2008cf4:	1001703a 	wrctl	status,r2
  
  return context;
 2008cf8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 2008cfc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 2008d00:	e0bffb17 	ldw	r2,-20(fp)
 2008d04:	10800283 	ldbu	r2,10(r2)
 2008d08:	10803fcc 	andi	r2,r2,255
 2008d0c:	1005003a 	cmpeq	r2,r2,zero
 2008d10:	1000031e 	bne	r2,zero,2008d20 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2008d14:	00800044 	movi	r2,1
 2008d18:	e0bffa05 	stb	r2,-24(fp)
 2008d1c:	00000106 	br	2008d24 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2008d20:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 2008d24:	e0bffc03 	ldbu	r2,-16(fp)
 2008d28:	e0bffe15 	stw	r2,-8(fp)
 2008d2c:	e0fffe17 	ldw	r3,-8(fp)
 2008d30:	1805003a 	cmpeq	r2,r3,zero
 2008d34:	1000041e 	bne	r2,zero,2008d48 <OSQDel+0x120>
 2008d38:	e0fffe17 	ldw	r3,-8(fp)
 2008d3c:	18800060 	cmpeqi	r2,r3,1
 2008d40:	1000391e 	bne	r2,zero,2008e28 <OSQDel+0x200>
 2008d44:	00006706 	br	2008ee4 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 2008d48:	e0bffa03 	ldbu	r2,-24(fp)
 2008d4c:	1004c03a 	cmpne	r2,r2,zero
 2008d50:	1000261e 	bne	r2,zero,2008dec <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2008d54:	e0fffb17 	ldw	r3,-20(fp)
 2008d58:	00800fc4 	movi	r2,63
 2008d5c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2008d60:	e0bffb17 	ldw	r2,-20(fp)
 2008d64:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 2008d68:	e0bffb17 	ldw	r2,-20(fp)
 2008d6c:	10800117 	ldw	r2,4(r2)
 2008d70:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2008d74:	00808074 	movhi	r2,513
 2008d78:	108fd504 	addi	r2,r2,16212
 2008d7c:	10c00017 	ldw	r3,0(r2)
 2008d80:	e0bff817 	ldw	r2,-32(fp)
 2008d84:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2008d88:	00c08074 	movhi	r3,513
 2008d8c:	18cfd504 	addi	r3,r3,16212
 2008d90:	e0bff817 	ldw	r2,-32(fp)
 2008d94:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2008d98:	e0bffb17 	ldw	r2,-20(fp)
 2008d9c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2008da0:	00808074 	movhi	r2,513
 2008da4:	108fd704 	addi	r2,r2,16220
 2008da8:	10c00017 	ldw	r3,0(r2)
 2008dac:	e0bffb17 	ldw	r2,-20(fp)
 2008db0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2008db4:	e0bffb17 	ldw	r2,-20(fp)
 2008db8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2008dbc:	00c08074 	movhi	r3,513
 2008dc0:	18cfd704 	addi	r3,r3,16220
 2008dc4:	e0bffb17 	ldw	r2,-20(fp)
 2008dc8:	18800015 	stw	r2,0(r3)
 2008dcc:	e0bff717 	ldw	r2,-36(fp)
 2008dd0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008dd4:	e0bff517 	ldw	r2,-44(fp)
 2008dd8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2008ddc:	e0bffd17 	ldw	r2,-12(fp)
 2008de0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2008de4:	e03ff915 	stw	zero,-28(fp)
 2008de8:	00004706 	br	2008f08 <OSQDel+0x2e0>
 2008dec:	e0bff717 	ldw	r2,-36(fp)
 2008df0:	e0bff415 	stw	r2,-48(fp)
 2008df4:	e0bff417 	ldw	r2,-48(fp)
 2008df8:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2008dfc:	e0fffd17 	ldw	r3,-12(fp)
 2008e00:	00801244 	movi	r2,73
 2008e04:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 2008e08:	e0bffb17 	ldw	r2,-20(fp)
 2008e0c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 2008e10:	00003d06 	br	2008f08 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 2008e14:	e13ffb17 	ldw	r4,-20(fp)
 2008e18:	000b883a 	mov	r5,zero
 2008e1c:	01800104 	movi	r6,4
 2008e20:	000f883a 	mov	r7,zero
 2008e24:	20054c80 	call	20054c8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 2008e28:	e0bffb17 	ldw	r2,-20(fp)
 2008e2c:	10800283 	ldbu	r2,10(r2)
 2008e30:	10803fcc 	andi	r2,r2,255
 2008e34:	1004c03a 	cmpne	r2,r2,zero
 2008e38:	103ff61e 	bne	r2,zero,2008e14 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2008e3c:	e0fffb17 	ldw	r3,-20(fp)
 2008e40:	00800fc4 	movi	r2,63
 2008e44:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2008e48:	e0bffb17 	ldw	r2,-20(fp)
 2008e4c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 2008e50:	e0bffb17 	ldw	r2,-20(fp)
 2008e54:	10800117 	ldw	r2,4(r2)
 2008e58:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 2008e5c:	00808074 	movhi	r2,513
 2008e60:	108fd504 	addi	r2,r2,16212
 2008e64:	10c00017 	ldw	r3,0(r2)
 2008e68:	e0bff817 	ldw	r2,-32(fp)
 2008e6c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2008e70:	00c08074 	movhi	r3,513
 2008e74:	18cfd504 	addi	r3,r3,16212
 2008e78:	e0bff817 	ldw	r2,-32(fp)
 2008e7c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2008e80:	e0bffb17 	ldw	r2,-20(fp)
 2008e84:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2008e88:	00808074 	movhi	r2,513
 2008e8c:	108fd704 	addi	r2,r2,16220
 2008e90:	10c00017 	ldw	r3,0(r2)
 2008e94:	e0bffb17 	ldw	r2,-20(fp)
 2008e98:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2008e9c:	e0bffb17 	ldw	r2,-20(fp)
 2008ea0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2008ea4:	00c08074 	movhi	r3,513
 2008ea8:	18cfd704 	addi	r3,r3,16220
 2008eac:	e0bffb17 	ldw	r2,-20(fp)
 2008eb0:	18800015 	stw	r2,0(r3)
 2008eb4:	e0bff717 	ldw	r2,-36(fp)
 2008eb8:	e0bff315 	stw	r2,-52(fp)
 2008ebc:	e0bff317 	ldw	r2,-52(fp)
 2008ec0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2008ec4:	e0bffa03 	ldbu	r2,-24(fp)
 2008ec8:	10800058 	cmpnei	r2,r2,1
 2008ecc:	1000011e 	bne	r2,zero,2008ed4 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2008ed0:	2005f080 	call	2005f08 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2008ed4:	e0bffd17 	ldw	r2,-12(fp)
 2008ed8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 2008edc:	e03ff915 	stw	zero,-28(fp)
             break;
 2008ee0:	00000906 	br	2008f08 <OSQDel+0x2e0>
 2008ee4:	e0bff717 	ldw	r2,-36(fp)
 2008ee8:	e0bff215 	stw	r2,-56(fp)
 2008eec:	e0bff217 	ldw	r2,-56(fp)
 2008ef0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2008ef4:	e0fffd17 	ldw	r3,-12(fp)
 2008ef8:	008001c4 	movi	r2,7
 2008efc:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 2008f00:	e0bffb17 	ldw	r2,-20(fp)
 2008f04:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 2008f08:	e0bff917 	ldw	r2,-28(fp)
 2008f0c:	e0bfff15 	stw	r2,-4(fp)
 2008f10:	e0bfff17 	ldw	r2,-4(fp)
}
 2008f14:	e037883a 	mov	sp,fp
 2008f18:	dfc00117 	ldw	ra,4(sp)
 2008f1c:	df000017 	ldw	fp,0(sp)
 2008f20:	dec00204 	addi	sp,sp,8
 2008f24:	f800283a 	ret

02008f28 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 2008f28:	defff904 	addi	sp,sp,-28
 2008f2c:	df000615 	stw	fp,24(sp)
 2008f30:	df000604 	addi	fp,sp,24
 2008f34:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2008f38:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2008f3c:	e0bffe17 	ldw	r2,-8(fp)
 2008f40:	1004c03a 	cmpne	r2,r2,zero
 2008f44:	1000031e 	bne	r2,zero,2008f54 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2008f48:	00800104 	movi	r2,4
 2008f4c:	e0bfff15 	stw	r2,-4(fp)
 2008f50:	00002206 	br	2008fdc <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2008f54:	e0bffe17 	ldw	r2,-8(fp)
 2008f58:	10800003 	ldbu	r2,0(r2)
 2008f5c:	10803fcc 	andi	r2,r2,255
 2008f60:	108000a0 	cmpeqi	r2,r2,2
 2008f64:	1000031e 	bne	r2,zero,2008f74 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 2008f68:	00800044 	movi	r2,1
 2008f6c:	e0bfff15 	stw	r2,-4(fp)
 2008f70:	00001a06 	br	2008fdc <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2008f74:	0005303a 	rdctl	r2,status
 2008f78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2008f7c:	e0fffb17 	ldw	r3,-20(fp)
 2008f80:	00bfff84 	movi	r2,-2
 2008f84:	1884703a 	and	r2,r3,r2
 2008f88:	1001703a 	wrctl	status,r2
  
  return context;
 2008f8c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2008f90:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 2008f94:	e0bffe17 	ldw	r2,-8(fp)
 2008f98:	10800117 	ldw	r2,4(r2)
 2008f9c:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 2008fa0:	e0bffd17 	ldw	r2,-12(fp)
 2008fa4:	10c00117 	ldw	r3,4(r2)
 2008fa8:	e0bffd17 	ldw	r2,-12(fp)
 2008fac:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2008fb0:	e0bffd17 	ldw	r2,-12(fp)
 2008fb4:	10c00117 	ldw	r3,4(r2)
 2008fb8:	e0bffd17 	ldw	r2,-12(fp)
 2008fbc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2008fc0:	e0bffd17 	ldw	r2,-12(fp)
 2008fc4:	1000058d 	sth	zero,22(r2)
 2008fc8:	e0bffc17 	ldw	r2,-16(fp)
 2008fcc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2008fd0:	e0bffa17 	ldw	r2,-24(fp)
 2008fd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2008fd8:	e03fff15 	stw	zero,-4(fp)
 2008fdc:	e0bfff17 	ldw	r2,-4(fp)
}
 2008fe0:	e037883a 	mov	sp,fp
 2008fe4:	df000017 	ldw	fp,0(sp)
 2008fe8:	dec00104 	addi	sp,sp,4
 2008fec:	f800283a 	ret

02008ff0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2008ff0:	defff104 	addi	sp,sp,-60
 2008ff4:	dfc00e15 	stw	ra,56(sp)
 2008ff8:	df000d15 	stw	fp,52(sp)
 2008ffc:	df000d04 	addi	fp,sp,52
 2009000:	e13ffb15 	stw	r4,-20(fp)
 2009004:	e1bffd15 	stw	r6,-12(fp)
 2009008:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200900c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2009010:	e0bffd17 	ldw	r2,-12(fp)
 2009014:	1004c03a 	cmpne	r2,r2,zero
 2009018:	1000021e 	bne	r2,zero,2009024 <OSQPend+0x34>
        return ((void *)0);
 200901c:	e03fff15 	stw	zero,-4(fp)
 2009020:	0000b506 	br	20092f8 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2009024:	e0bffb17 	ldw	r2,-20(fp)
 2009028:	1004c03a 	cmpne	r2,r2,zero
 200902c:	1000051e 	bne	r2,zero,2009044 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 2009030:	e0fffd17 	ldw	r3,-12(fp)
 2009034:	00800104 	movi	r2,4
 2009038:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 200903c:	e03fff15 	stw	zero,-4(fp)
 2009040:	0000ad06 	br	20092f8 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2009044:	e0bffb17 	ldw	r2,-20(fp)
 2009048:	10800003 	ldbu	r2,0(r2)
 200904c:	10803fcc 	andi	r2,r2,255
 2009050:	108000a0 	cmpeqi	r2,r2,2
 2009054:	1000051e 	bne	r2,zero,200906c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2009058:	e0fffd17 	ldw	r3,-12(fp)
 200905c:	00800044 	movi	r2,1
 2009060:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 2009064:	e03fff15 	stw	zero,-4(fp)
 2009068:	0000a306 	br	20092f8 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 200906c:	00808074 	movhi	r2,513
 2009070:	108fd804 	addi	r2,r2,16224
 2009074:	10800003 	ldbu	r2,0(r2)
 2009078:	10803fcc 	andi	r2,r2,255
 200907c:	1005003a 	cmpeq	r2,r2,zero
 2009080:	1000051e 	bne	r2,zero,2009098 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 2009084:	e0fffd17 	ldw	r3,-12(fp)
 2009088:	00800084 	movi	r2,2
 200908c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 2009090:	e03fff15 	stw	zero,-4(fp)
 2009094:	00009806 	br	20092f8 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 2009098:	00808074 	movhi	r2,513
 200909c:	108fca04 	addi	r2,r2,16168
 20090a0:	10800003 	ldbu	r2,0(r2)
 20090a4:	10803fcc 	andi	r2,r2,255
 20090a8:	1005003a 	cmpeq	r2,r2,zero
 20090ac:	1000051e 	bne	r2,zero,20090c4 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 20090b0:	e0fffd17 	ldw	r3,-12(fp)
 20090b4:	00800344 	movi	r2,13
 20090b8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 20090bc:	e03fff15 	stw	zero,-4(fp)
 20090c0:	00008d06 	br	20092f8 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20090c4:	0005303a 	rdctl	r2,status
 20090c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20090cc:	e0fff717 	ldw	r3,-36(fp)
 20090d0:	00bfff84 	movi	r2,-2
 20090d4:	1884703a 	and	r2,r3,r2
 20090d8:	1001703a 	wrctl	status,r2
  
  return context;
 20090dc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 20090e0:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 20090e4:	e0bffb17 	ldw	r2,-20(fp)
 20090e8:	10800117 	ldw	r2,4(r2)
 20090ec:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 20090f0:	e0bff917 	ldw	r2,-28(fp)
 20090f4:	1080058b 	ldhu	r2,22(r2)
 20090f8:	10bfffcc 	andi	r2,r2,65535
 20090fc:	1005003a 	cmpeq	r2,r2,zero
 2009100:	10001f1e 	bne	r2,zero,2009180 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2009104:	e0bff917 	ldw	r2,-28(fp)
 2009108:	10c00417 	ldw	r3,16(r2)
 200910c:	18800017 	ldw	r2,0(r3)
 2009110:	e0bffa15 	stw	r2,-24(fp)
 2009114:	18c00104 	addi	r3,r3,4
 2009118:	e0bff917 	ldw	r2,-28(fp)
 200911c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2009120:	e0bff917 	ldw	r2,-28(fp)
 2009124:	1080058b 	ldhu	r2,22(r2)
 2009128:	10bfffc4 	addi	r2,r2,-1
 200912c:	1007883a 	mov	r3,r2
 2009130:	e0bff917 	ldw	r2,-28(fp)
 2009134:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2009138:	e0bff917 	ldw	r2,-28(fp)
 200913c:	10c00417 	ldw	r3,16(r2)
 2009140:	e0bff917 	ldw	r2,-28(fp)
 2009144:	10800217 	ldw	r2,8(r2)
 2009148:	1880041e 	bne	r3,r2,200915c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 200914c:	e0bff917 	ldw	r2,-28(fp)
 2009150:	10c00117 	ldw	r3,4(r2)
 2009154:	e0bff917 	ldw	r2,-28(fp)
 2009158:	10c00415 	stw	r3,16(r2)
 200915c:	e0bff817 	ldw	r2,-32(fp)
 2009160:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009164:	e0bff617 	ldw	r2,-40(fp)
 2009168:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 200916c:	e0bffd17 	ldw	r2,-12(fp)
 2009170:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 2009174:	e0bffa17 	ldw	r2,-24(fp)
 2009178:	e0bfff15 	stw	r2,-4(fp)
 200917c:	00005e06 	br	20092f8 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 2009180:	00808074 	movhi	r2,513
 2009184:	108fd904 	addi	r2,r2,16228
 2009188:	10c00017 	ldw	r3,0(r2)
 200918c:	00808074 	movhi	r2,513
 2009190:	108fd904 	addi	r2,r2,16228
 2009194:	10800017 	ldw	r2,0(r2)
 2009198:	10800c03 	ldbu	r2,48(r2)
 200919c:	10800114 	ori	r2,r2,4
 20091a0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 20091a4:	00808074 	movhi	r2,513
 20091a8:	108fd904 	addi	r2,r2,16228
 20091ac:	10800017 	ldw	r2,0(r2)
 20091b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 20091b4:	00808074 	movhi	r2,513
 20091b8:	108fd904 	addi	r2,r2,16228
 20091bc:	10c00017 	ldw	r3,0(r2)
 20091c0:	e0bffc0b 	ldhu	r2,-16(fp)
 20091c4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 20091c8:	e13ffb17 	ldw	r4,-20(fp)
 20091cc:	200565c0 	call	200565c <OS_EventTaskWait>
 20091d0:	e0bff817 	ldw	r2,-32(fp)
 20091d4:	e0bff515 	stw	r2,-44(fp)
 20091d8:	e0bff517 	ldw	r2,-44(fp)
 20091dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 20091e0:	2005f080 	call	2005f08 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20091e4:	0005303a 	rdctl	r2,status
 20091e8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20091ec:	e0fff417 	ldw	r3,-48(fp)
 20091f0:	00bfff84 	movi	r2,-2
 20091f4:	1884703a 	and	r2,r3,r2
 20091f8:	1001703a 	wrctl	status,r2
  
  return context;
 20091fc:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 2009200:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2009204:	00808074 	movhi	r2,513
 2009208:	108fd904 	addi	r2,r2,16228
 200920c:	10800017 	ldw	r2,0(r2)
 2009210:	10800c43 	ldbu	r2,49(r2)
 2009214:	10803fcc 	andi	r2,r2,255
 2009218:	e0bffe15 	stw	r2,-8(fp)
 200921c:	e0fffe17 	ldw	r3,-8(fp)
 2009220:	1805003a 	cmpeq	r2,r3,zero
 2009224:	1000041e 	bne	r2,zero,2009238 <OSQPend+0x248>
 2009228:	e0fffe17 	ldw	r3,-8(fp)
 200922c:	188000a0 	cmpeqi	r2,r3,2
 2009230:	1000091e 	bne	r2,zero,2009258 <OSQPend+0x268>
 2009234:	00000d06 	br	200926c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 2009238:	00808074 	movhi	r2,513
 200923c:	108fd904 	addi	r2,r2,16228
 2009240:	10800017 	ldw	r2,0(r2)
 2009244:	10800917 	ldw	r2,36(r2)
 2009248:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 200924c:	e0bffd17 	ldw	r2,-12(fp)
 2009250:	10000005 	stb	zero,0(r2)
             break;
 2009254:	00000e06 	br	2009290 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2009258:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 200925c:	e0fffd17 	ldw	r3,-12(fp)
 2009260:	00800384 	movi	r2,14
 2009264:	18800005 	stb	r2,0(r3)
             break;
 2009268:	00000906 	br	2009290 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 200926c:	00808074 	movhi	r2,513
 2009270:	108fd904 	addi	r2,r2,16228
 2009274:	11000017 	ldw	r4,0(r2)
 2009278:	e17ffb17 	ldw	r5,-20(fp)
 200927c:	20058c00 	call	20058c0 <OS_EventTaskRemove>
             pmsg = (void *)0;
 2009280:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2009284:	e0fffd17 	ldw	r3,-12(fp)
 2009288:	00800284 	movi	r2,10
 200928c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2009290:	00808074 	movhi	r2,513
 2009294:	108fd904 	addi	r2,r2,16228
 2009298:	10800017 	ldw	r2,0(r2)
 200929c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 20092a0:	00808074 	movhi	r2,513
 20092a4:	108fd904 	addi	r2,r2,16228
 20092a8:	10800017 	ldw	r2,0(r2)
 20092ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 20092b0:	00808074 	movhi	r2,513
 20092b4:	108fd904 	addi	r2,r2,16228
 20092b8:	10800017 	ldw	r2,0(r2)
 20092bc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 20092c0:	00808074 	movhi	r2,513
 20092c4:	108fd904 	addi	r2,r2,16228
 20092c8:	10800017 	ldw	r2,0(r2)
 20092cc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 20092d0:	00808074 	movhi	r2,513
 20092d4:	108fd904 	addi	r2,r2,16228
 20092d8:	10800017 	ldw	r2,0(r2)
 20092dc:	10000915 	stw	zero,36(r2)
 20092e0:	e0bff817 	ldw	r2,-32(fp)
 20092e4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20092e8:	e0bff317 	ldw	r2,-52(fp)
 20092ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 20092f0:	e0bffa17 	ldw	r2,-24(fp)
 20092f4:	e0bfff15 	stw	r2,-4(fp)
 20092f8:	e0bfff17 	ldw	r2,-4(fp)
}
 20092fc:	e037883a 	mov	sp,fp
 2009300:	dfc00117 	ldw	ra,4(sp)
 2009304:	df000017 	ldw	fp,0(sp)
 2009308:	dec00204 	addi	sp,sp,8
 200930c:	f800283a 	ret

02009310 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2009310:	defff504 	addi	sp,sp,-44
 2009314:	dfc00a15 	stw	ra,40(sp)
 2009318:	df000915 	stw	fp,36(sp)
 200931c:	df000904 	addi	fp,sp,36
 2009320:	e13ffc15 	stw	r4,-16(fp)
 2009324:	e1bffe15 	stw	r6,-8(fp)
 2009328:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 200932c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2009330:	e0bffe17 	ldw	r2,-8(fp)
 2009334:	1004c03a 	cmpne	r2,r2,zero
 2009338:	1000021e 	bne	r2,zero,2009344 <OSQPendAbort+0x34>
        return (0);
 200933c:	e03fff15 	stw	zero,-4(fp)
 2009340:	00004c06 	br	2009474 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2009344:	e0bffc17 	ldw	r2,-16(fp)
 2009348:	1004c03a 	cmpne	r2,r2,zero
 200934c:	1000051e 	bne	r2,zero,2009364 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 2009350:	e0fffe17 	ldw	r3,-8(fp)
 2009354:	00800104 	movi	r2,4
 2009358:	18800005 	stb	r2,0(r3)
        return (0);
 200935c:	e03fff15 	stw	zero,-4(fp)
 2009360:	00004406 	br	2009474 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2009364:	e0bffc17 	ldw	r2,-16(fp)
 2009368:	10800003 	ldbu	r2,0(r2)
 200936c:	10803fcc 	andi	r2,r2,255
 2009370:	108000a0 	cmpeqi	r2,r2,2
 2009374:	1000051e 	bne	r2,zero,200938c <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2009378:	e0fffe17 	ldw	r3,-8(fp)
 200937c:	00800044 	movi	r2,1
 2009380:	18800005 	stb	r2,0(r3)
        return (0);
 2009384:	e03fff15 	stw	zero,-4(fp)
 2009388:	00003a06 	br	2009474 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200938c:	0005303a 	rdctl	r2,status
 2009390:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009394:	e0fff917 	ldw	r3,-28(fp)
 2009398:	00bfff84 	movi	r2,-2
 200939c:	1884703a 	and	r2,r3,r2
 20093a0:	1001703a 	wrctl	status,r2
  
  return context;
 20093a4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 20093a8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 20093ac:	e0bffc17 	ldw	r2,-16(fp)
 20093b0:	10800283 	ldbu	r2,10(r2)
 20093b4:	10803fcc 	andi	r2,r2,255
 20093b8:	1005003a 	cmpeq	r2,r2,zero
 20093bc:	1000261e 	bne	r2,zero,2009458 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 20093c0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 20093c4:	e0bffd03 	ldbu	r2,-12(fp)
 20093c8:	10800060 	cmpeqi	r2,r2,1
 20093cc:	1000091e 	bne	r2,zero,20093f4 <OSQPendAbort+0xe4>
 20093d0:	00000e06 	br	200940c <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 20093d4:	e13ffc17 	ldw	r4,-16(fp)
 20093d8:	000b883a 	mov	r5,zero
 20093dc:	01800104 	movi	r6,4
 20093e0:	01c00084 	movi	r7,2
 20093e4:	20054c80 	call	20054c8 <OS_EventTaskRdy>
                     nbr_tasks++;
 20093e8:	e0bffb03 	ldbu	r2,-20(fp)
 20093ec:	10800044 	addi	r2,r2,1
 20093f0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 20093f4:	e0bffc17 	ldw	r2,-16(fp)
 20093f8:	10800283 	ldbu	r2,10(r2)
 20093fc:	10803fcc 	andi	r2,r2,255
 2009400:	1004c03a 	cmpne	r2,r2,zero
 2009404:	103ff31e 	bne	r2,zero,20093d4 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2009408:	00000806 	br	200942c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 200940c:	e13ffc17 	ldw	r4,-16(fp)
 2009410:	000b883a 	mov	r5,zero
 2009414:	01800104 	movi	r6,4
 2009418:	01c00084 	movi	r7,2
 200941c:	20054c80 	call	20054c8 <OS_EventTaskRdy>
                 nbr_tasks++;
 2009420:	e0bffb03 	ldbu	r2,-20(fp)
 2009424:	10800044 	addi	r2,r2,1
 2009428:	e0bffb05 	stb	r2,-20(fp)
 200942c:	e0bffa17 	ldw	r2,-24(fp)
 2009430:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009434:	e0bff817 	ldw	r2,-32(fp)
 2009438:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 200943c:	2005f080 	call	2005f08 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2009440:	e0fffe17 	ldw	r3,-8(fp)
 2009444:	00800384 	movi	r2,14
 2009448:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 200944c:	e0bffb03 	ldbu	r2,-20(fp)
 2009450:	e0bfff15 	stw	r2,-4(fp)
 2009454:	00000706 	br	2009474 <OSQPendAbort+0x164>
 2009458:	e0bffa17 	ldw	r2,-24(fp)
 200945c:	e0bff715 	stw	r2,-36(fp)
 2009460:	e0bff717 	ldw	r2,-36(fp)
 2009464:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2009468:	e0bffe17 	ldw	r2,-8(fp)
 200946c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 2009470:	e03fff15 	stw	zero,-4(fp)
 2009474:	e0bfff17 	ldw	r2,-4(fp)
}
 2009478:	e037883a 	mov	sp,fp
 200947c:	dfc00117 	ldw	ra,4(sp)
 2009480:	df000017 	ldw	fp,0(sp)
 2009484:	dec00204 	addi	sp,sp,8
 2009488:	f800283a 	ret

0200948c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 200948c:	defff504 	addi	sp,sp,-44
 2009490:	dfc00a15 	stw	ra,40(sp)
 2009494:	df000915 	stw	fp,36(sp)
 2009498:	df000904 	addi	fp,sp,36
 200949c:	e13ffd15 	stw	r4,-12(fp)
 20094a0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20094a4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 20094a8:	e0bffd17 	ldw	r2,-12(fp)
 20094ac:	1004c03a 	cmpne	r2,r2,zero
 20094b0:	1000031e 	bne	r2,zero,20094c0 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 20094b4:	00800104 	movi	r2,4
 20094b8:	e0bfff15 	stw	r2,-4(fp)
 20094bc:	00004d06 	br	20095f4 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 20094c0:	e0bffd17 	ldw	r2,-12(fp)
 20094c4:	10800003 	ldbu	r2,0(r2)
 20094c8:	10803fcc 	andi	r2,r2,255
 20094cc:	108000a0 	cmpeqi	r2,r2,2
 20094d0:	1000031e 	bne	r2,zero,20094e0 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 20094d4:	00800044 	movi	r2,1
 20094d8:	e0bfff15 	stw	r2,-4(fp)
 20094dc:	00004506 	br	20095f4 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20094e0:	0005303a 	rdctl	r2,status
 20094e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20094e8:	e0fffa17 	ldw	r3,-24(fp)
 20094ec:	00bfff84 	movi	r2,-2
 20094f0:	1884703a 	and	r2,r3,r2
 20094f4:	1001703a 	wrctl	status,r2
  
  return context;
 20094f8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 20094fc:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 2009500:	e0bffd17 	ldw	r2,-12(fp)
 2009504:	10800283 	ldbu	r2,10(r2)
 2009508:	10803fcc 	andi	r2,r2,255
 200950c:	1005003a 	cmpeq	r2,r2,zero
 2009510:	10000c1e 	bne	r2,zero,2009544 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2009514:	e13ffd17 	ldw	r4,-12(fp)
 2009518:	e17ffe17 	ldw	r5,-8(fp)
 200951c:	01800104 	movi	r6,4
 2009520:	000f883a 	mov	r7,zero
 2009524:	20054c80 	call	20054c8 <OS_EventTaskRdy>
 2009528:	e0bffb17 	ldw	r2,-20(fp)
 200952c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009530:	e0bff917 	ldw	r2,-28(fp)
 2009534:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 2009538:	2005f080 	call	2005f08 <OS_Sched>
        return (OS_ERR_NONE);
 200953c:	e03fff15 	stw	zero,-4(fp)
 2009540:	00002c06 	br	20095f4 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 2009544:	e0bffd17 	ldw	r2,-12(fp)
 2009548:	10800117 	ldw	r2,4(r2)
 200954c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 2009550:	e0bffc17 	ldw	r2,-16(fp)
 2009554:	10c0058b 	ldhu	r3,22(r2)
 2009558:	e0bffc17 	ldw	r2,-16(fp)
 200955c:	1080050b 	ldhu	r2,20(r2)
 2009560:	18ffffcc 	andi	r3,r3,65535
 2009564:	10bfffcc 	andi	r2,r2,65535
 2009568:	18800736 	bltu	r3,r2,2009588 <OSQPost+0xfc>
 200956c:	e0bffb17 	ldw	r2,-20(fp)
 2009570:	e0bff815 	stw	r2,-32(fp)
 2009574:	e0bff817 	ldw	r2,-32(fp)
 2009578:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 200957c:	00800784 	movi	r2,30
 2009580:	e0bfff15 	stw	r2,-4(fp)
 2009584:	00001b06 	br	20095f4 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 2009588:	e0bffc17 	ldw	r2,-16(fp)
 200958c:	10c00317 	ldw	r3,12(r2)
 2009590:	e0bffe17 	ldw	r2,-8(fp)
 2009594:	18800015 	stw	r2,0(r3)
 2009598:	18c00104 	addi	r3,r3,4
 200959c:	e0bffc17 	ldw	r2,-16(fp)
 20095a0:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 20095a4:	e0bffc17 	ldw	r2,-16(fp)
 20095a8:	1080058b 	ldhu	r2,22(r2)
 20095ac:	10800044 	addi	r2,r2,1
 20095b0:	1007883a 	mov	r3,r2
 20095b4:	e0bffc17 	ldw	r2,-16(fp)
 20095b8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 20095bc:	e0bffc17 	ldw	r2,-16(fp)
 20095c0:	10c00317 	ldw	r3,12(r2)
 20095c4:	e0bffc17 	ldw	r2,-16(fp)
 20095c8:	10800217 	ldw	r2,8(r2)
 20095cc:	1880041e 	bne	r3,r2,20095e0 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 20095d0:	e0bffc17 	ldw	r2,-16(fp)
 20095d4:	10c00117 	ldw	r3,4(r2)
 20095d8:	e0bffc17 	ldw	r2,-16(fp)
 20095dc:	10c00315 	stw	r3,12(r2)
 20095e0:	e0bffb17 	ldw	r2,-20(fp)
 20095e4:	e0bff715 	stw	r2,-36(fp)
 20095e8:	e0bff717 	ldw	r2,-36(fp)
 20095ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20095f0:	e03fff15 	stw	zero,-4(fp)
 20095f4:	e0bfff17 	ldw	r2,-4(fp)
}
 20095f8:	e037883a 	mov	sp,fp
 20095fc:	dfc00117 	ldw	ra,4(sp)
 2009600:	df000017 	ldw	fp,0(sp)
 2009604:	dec00204 	addi	sp,sp,8
 2009608:	f800283a 	ret

0200960c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 200960c:	defff504 	addi	sp,sp,-44
 2009610:	dfc00a15 	stw	ra,40(sp)
 2009614:	df000915 	stw	fp,36(sp)
 2009618:	df000904 	addi	fp,sp,36
 200961c:	e13ffd15 	stw	r4,-12(fp)
 2009620:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2009624:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2009628:	e0bffd17 	ldw	r2,-12(fp)
 200962c:	1004c03a 	cmpne	r2,r2,zero
 2009630:	1000031e 	bne	r2,zero,2009640 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 2009634:	00800104 	movi	r2,4
 2009638:	e0bfff15 	stw	r2,-4(fp)
 200963c:	00004f06 	br	200977c <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2009640:	e0bffd17 	ldw	r2,-12(fp)
 2009644:	10800003 	ldbu	r2,0(r2)
 2009648:	10803fcc 	andi	r2,r2,255
 200964c:	108000a0 	cmpeqi	r2,r2,2
 2009650:	1000031e 	bne	r2,zero,2009660 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 2009654:	00800044 	movi	r2,1
 2009658:	e0bfff15 	stw	r2,-4(fp)
 200965c:	00004706 	br	200977c <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009660:	0005303a 	rdctl	r2,status
 2009664:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009668:	e0fffa17 	ldw	r3,-24(fp)
 200966c:	00bfff84 	movi	r2,-2
 2009670:	1884703a 	and	r2,r3,r2
 2009674:	1001703a 	wrctl	status,r2
  
  return context;
 2009678:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 200967c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 2009680:	e0bffd17 	ldw	r2,-12(fp)
 2009684:	10800283 	ldbu	r2,10(r2)
 2009688:	10803fcc 	andi	r2,r2,255
 200968c:	1005003a 	cmpeq	r2,r2,zero
 2009690:	10000c1e 	bne	r2,zero,20096c4 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2009694:	e13ffd17 	ldw	r4,-12(fp)
 2009698:	e17ffe17 	ldw	r5,-8(fp)
 200969c:	01800104 	movi	r6,4
 20096a0:	000f883a 	mov	r7,zero
 20096a4:	20054c80 	call	20054c8 <OS_EventTaskRdy>
 20096a8:	e0bffb17 	ldw	r2,-20(fp)
 20096ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20096b0:	e0bff917 	ldw	r2,-28(fp)
 20096b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 20096b8:	2005f080 	call	2005f08 <OS_Sched>
        return (OS_ERR_NONE);
 20096bc:	e03fff15 	stw	zero,-4(fp)
 20096c0:	00002e06 	br	200977c <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 20096c4:	e0bffd17 	ldw	r2,-12(fp)
 20096c8:	10800117 	ldw	r2,4(r2)
 20096cc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 20096d0:	e0bffc17 	ldw	r2,-16(fp)
 20096d4:	10c0058b 	ldhu	r3,22(r2)
 20096d8:	e0bffc17 	ldw	r2,-16(fp)
 20096dc:	1080050b 	ldhu	r2,20(r2)
 20096e0:	18ffffcc 	andi	r3,r3,65535
 20096e4:	10bfffcc 	andi	r2,r2,65535
 20096e8:	18800736 	bltu	r3,r2,2009708 <OSQPostFront+0xfc>
 20096ec:	e0bffb17 	ldw	r2,-20(fp)
 20096f0:	e0bff815 	stw	r2,-32(fp)
 20096f4:	e0bff817 	ldw	r2,-32(fp)
 20096f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 20096fc:	00800784 	movi	r2,30
 2009700:	e0bfff15 	stw	r2,-4(fp)
 2009704:	00001d06 	br	200977c <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 2009708:	e0bffc17 	ldw	r2,-16(fp)
 200970c:	10c00417 	ldw	r3,16(r2)
 2009710:	e0bffc17 	ldw	r2,-16(fp)
 2009714:	10800117 	ldw	r2,4(r2)
 2009718:	1880041e 	bne	r3,r2,200972c <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 200971c:	e0bffc17 	ldw	r2,-16(fp)
 2009720:	10c00217 	ldw	r3,8(r2)
 2009724:	e0bffc17 	ldw	r2,-16(fp)
 2009728:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 200972c:	e0bffc17 	ldw	r2,-16(fp)
 2009730:	10800417 	ldw	r2,16(r2)
 2009734:	10ffff04 	addi	r3,r2,-4
 2009738:	e0bffc17 	ldw	r2,-16(fp)
 200973c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 2009740:	e0bffc17 	ldw	r2,-16(fp)
 2009744:	10c00417 	ldw	r3,16(r2)
 2009748:	e0bffe17 	ldw	r2,-8(fp)
 200974c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2009750:	e0bffc17 	ldw	r2,-16(fp)
 2009754:	1080058b 	ldhu	r2,22(r2)
 2009758:	10800044 	addi	r2,r2,1
 200975c:	1007883a 	mov	r3,r2
 2009760:	e0bffc17 	ldw	r2,-16(fp)
 2009764:	10c0058d 	sth	r3,22(r2)
 2009768:	e0bffb17 	ldw	r2,-20(fp)
 200976c:	e0bff715 	stw	r2,-36(fp)
 2009770:	e0bff717 	ldw	r2,-36(fp)
 2009774:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2009778:	e03fff15 	stw	zero,-4(fp)
 200977c:	e0bfff17 	ldw	r2,-4(fp)
}
 2009780:	e037883a 	mov	sp,fp
 2009784:	dfc00117 	ldw	ra,4(sp)
 2009788:	df000017 	ldw	fp,0(sp)
 200978c:	dec00204 	addi	sp,sp,8
 2009790:	f800283a 	ret

02009794 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2009794:	defff404 	addi	sp,sp,-48
 2009798:	dfc00b15 	stw	ra,44(sp)
 200979c:	df000a15 	stw	fp,40(sp)
 20097a0:	df000a04 	addi	fp,sp,40
 20097a4:	e13ffc15 	stw	r4,-16(fp)
 20097a8:	e17ffd15 	stw	r5,-12(fp)
 20097ac:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20097b0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20097b4:	e0bffc17 	ldw	r2,-16(fp)
 20097b8:	1004c03a 	cmpne	r2,r2,zero
 20097bc:	1000031e 	bne	r2,zero,20097cc <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 20097c0:	00800104 	movi	r2,4
 20097c4:	e0bfff15 	stw	r2,-4(fp)
 20097c8:	00007906 	br	20099b0 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20097cc:	e0bffc17 	ldw	r2,-16(fp)
 20097d0:	10800003 	ldbu	r2,0(r2)
 20097d4:	10803fcc 	andi	r2,r2,255
 20097d8:	108000a0 	cmpeqi	r2,r2,2
 20097dc:	1000031e 	bne	r2,zero,20097ec <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 20097e0:	00800044 	movi	r2,1
 20097e4:	e0bfff15 	stw	r2,-4(fp)
 20097e8:	00007106 	br	20099b0 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20097ec:	0005303a 	rdctl	r2,status
 20097f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20097f4:	e0fff917 	ldw	r3,-28(fp)
 20097f8:	00bfff84 	movi	r2,-2
 20097fc:	1884703a 	and	r2,r3,r2
 2009800:	1001703a 	wrctl	status,r2
  
  return context;
 2009804:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2009808:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 200980c:	e0bffc17 	ldw	r2,-16(fp)
 2009810:	10800283 	ldbu	r2,10(r2)
 2009814:	10803fcc 	andi	r2,r2,255
 2009818:	1005003a 	cmpeq	r2,r2,zero
 200981c:	1000211e 	bne	r2,zero,20098a4 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2009820:	e0bffe03 	ldbu	r2,-8(fp)
 2009824:	1080004c 	andi	r2,r2,1
 2009828:	10803fcc 	andi	r2,r2,255
 200982c:	1005003a 	cmpeq	r2,r2,zero
 2009830:	10000c1e 	bne	r2,zero,2009864 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2009834:	00000506 	br	200984c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2009838:	e13ffc17 	ldw	r4,-16(fp)
 200983c:	e17ffd17 	ldw	r5,-12(fp)
 2009840:	01800104 	movi	r6,4
 2009844:	000f883a 	mov	r7,zero
 2009848:	20054c80 	call	20054c8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 200984c:	e0bffc17 	ldw	r2,-16(fp)
 2009850:	10800283 	ldbu	r2,10(r2)
 2009854:	10803fcc 	andi	r2,r2,255
 2009858:	1004c03a 	cmpne	r2,r2,zero
 200985c:	103ff61e 	bne	r2,zero,2009838 <OSQPostOpt+0xa4>
 2009860:	00000506 	br	2009878 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2009864:	e13ffc17 	ldw	r4,-16(fp)
 2009868:	e17ffd17 	ldw	r5,-12(fp)
 200986c:	01800104 	movi	r6,4
 2009870:	000f883a 	mov	r7,zero
 2009874:	20054c80 	call	20054c8 <OS_EventTaskRdy>
 2009878:	e0bffa17 	ldw	r2,-24(fp)
 200987c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009880:	e0bff817 	ldw	r2,-32(fp)
 2009884:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2009888:	e0bffe03 	ldbu	r2,-8(fp)
 200988c:	1080010c 	andi	r2,r2,4
 2009890:	1004c03a 	cmpne	r2,r2,zero
 2009894:	1000011e 	bne	r2,zero,200989c <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 2009898:	2005f080 	call	2005f08 <OS_Sched>
        }
        return (OS_ERR_NONE);
 200989c:	e03fff15 	stw	zero,-4(fp)
 20098a0:	00004306 	br	20099b0 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 20098a4:	e0bffc17 	ldw	r2,-16(fp)
 20098a8:	10800117 	ldw	r2,4(r2)
 20098ac:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 20098b0:	e0bffb17 	ldw	r2,-20(fp)
 20098b4:	10c0058b 	ldhu	r3,22(r2)
 20098b8:	e0bffb17 	ldw	r2,-20(fp)
 20098bc:	1080050b 	ldhu	r2,20(r2)
 20098c0:	18ffffcc 	andi	r3,r3,65535
 20098c4:	10bfffcc 	andi	r2,r2,65535
 20098c8:	18800736 	bltu	r3,r2,20098e8 <OSQPostOpt+0x154>
 20098cc:	e0bffa17 	ldw	r2,-24(fp)
 20098d0:	e0bff715 	stw	r2,-36(fp)
 20098d4:	e0bff717 	ldw	r2,-36(fp)
 20098d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 20098dc:	00800784 	movi	r2,30
 20098e0:	e0bfff15 	stw	r2,-4(fp)
 20098e4:	00003206 	br	20099b0 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 20098e8:	e0bffe03 	ldbu	r2,-8(fp)
 20098ec:	1080008c 	andi	r2,r2,2
 20098f0:	1005003a 	cmpeq	r2,r2,zero
 20098f4:	1000131e 	bne	r2,zero,2009944 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 20098f8:	e0bffb17 	ldw	r2,-20(fp)
 20098fc:	10c00417 	ldw	r3,16(r2)
 2009900:	e0bffb17 	ldw	r2,-20(fp)
 2009904:	10800117 	ldw	r2,4(r2)
 2009908:	1880041e 	bne	r3,r2,200991c <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 200990c:	e0bffb17 	ldw	r2,-20(fp)
 2009910:	10c00217 	ldw	r3,8(r2)
 2009914:	e0bffb17 	ldw	r2,-20(fp)
 2009918:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 200991c:	e0bffb17 	ldw	r2,-20(fp)
 2009920:	10800417 	ldw	r2,16(r2)
 2009924:	10ffff04 	addi	r3,r2,-4
 2009928:	e0bffb17 	ldw	r2,-20(fp)
 200992c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 2009930:	e0bffb17 	ldw	r2,-20(fp)
 2009934:	10c00417 	ldw	r3,16(r2)
 2009938:	e0bffd17 	ldw	r2,-12(fp)
 200993c:	18800015 	stw	r2,0(r3)
 2009940:	00001006 	br	2009984 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 2009944:	e0bffb17 	ldw	r2,-20(fp)
 2009948:	10c00317 	ldw	r3,12(r2)
 200994c:	e0bffd17 	ldw	r2,-12(fp)
 2009950:	18800015 	stw	r2,0(r3)
 2009954:	18c00104 	addi	r3,r3,4
 2009958:	e0bffb17 	ldw	r2,-20(fp)
 200995c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 2009960:	e0bffb17 	ldw	r2,-20(fp)
 2009964:	10c00317 	ldw	r3,12(r2)
 2009968:	e0bffb17 	ldw	r2,-20(fp)
 200996c:	10800217 	ldw	r2,8(r2)
 2009970:	1880041e 	bne	r3,r2,2009984 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 2009974:	e0bffb17 	ldw	r2,-20(fp)
 2009978:	10c00117 	ldw	r3,4(r2)
 200997c:	e0bffb17 	ldw	r2,-20(fp)
 2009980:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2009984:	e0bffb17 	ldw	r2,-20(fp)
 2009988:	1080058b 	ldhu	r2,22(r2)
 200998c:	10800044 	addi	r2,r2,1
 2009990:	1007883a 	mov	r3,r2
 2009994:	e0bffb17 	ldw	r2,-20(fp)
 2009998:	10c0058d 	sth	r3,22(r2)
 200999c:	e0bffa17 	ldw	r2,-24(fp)
 20099a0:	e0bff615 	stw	r2,-40(fp)
 20099a4:	e0bff617 	ldw	r2,-40(fp)
 20099a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20099ac:	e03fff15 	stw	zero,-4(fp)
 20099b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20099b4:	e037883a 	mov	sp,fp
 20099b8:	dfc00117 	ldw	ra,4(sp)
 20099bc:	df000017 	ldw	fp,0(sp)
 20099c0:	dec00204 	addi	sp,sp,8
 20099c4:	f800283a 	ret

020099c8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 20099c8:	defff504 	addi	sp,sp,-44
 20099cc:	df000a15 	stw	fp,40(sp)
 20099d0:	df000a04 	addi	fp,sp,40
 20099d4:	e13ffd15 	stw	r4,-12(fp)
 20099d8:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20099dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 20099e0:	e0bffd17 	ldw	r2,-12(fp)
 20099e4:	1004c03a 	cmpne	r2,r2,zero
 20099e8:	1000031e 	bne	r2,zero,20099f8 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 20099ec:	00800104 	movi	r2,4
 20099f0:	e0bfff15 	stw	r2,-4(fp)
 20099f4:	00004f06 	br	2009b34 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 20099f8:	e0bffe17 	ldw	r2,-8(fp)
 20099fc:	1004c03a 	cmpne	r2,r2,zero
 2009a00:	1000031e 	bne	r2,zero,2009a10 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 2009a04:	00800244 	movi	r2,9
 2009a08:	e0bfff15 	stw	r2,-4(fp)
 2009a0c:	00004906 	br	2009b34 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2009a10:	e0bffd17 	ldw	r2,-12(fp)
 2009a14:	10800003 	ldbu	r2,0(r2)
 2009a18:	10803fcc 	andi	r2,r2,255
 2009a1c:	108000a0 	cmpeqi	r2,r2,2
 2009a20:	1000031e 	bne	r2,zero,2009a30 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 2009a24:	00800044 	movi	r2,1
 2009a28:	e0bfff15 	stw	r2,-4(fp)
 2009a2c:	00004106 	br	2009b34 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009a30:	0005303a 	rdctl	r2,status
 2009a34:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009a38:	e0fff717 	ldw	r3,-36(fp)
 2009a3c:	00bfff84 	movi	r2,-2
 2009a40:	1884703a 	and	r2,r3,r2
 2009a44:	1001703a 	wrctl	status,r2
  
  return context;
 2009a48:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 2009a4c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 2009a50:	e0bffd17 	ldw	r2,-12(fp)
 2009a54:	10c00283 	ldbu	r3,10(r2)
 2009a58:	e0bffe17 	ldw	r2,-8(fp)
 2009a5c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 2009a60:	e0bffd17 	ldw	r2,-12(fp)
 2009a64:	108002c4 	addi	r2,r2,11
 2009a68:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 2009a6c:	e0bffe17 	ldw	r2,-8(fp)
 2009a70:	10800204 	addi	r2,r2,8
 2009a74:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2009a78:	e03ffb05 	stb	zero,-20(fp)
 2009a7c:	00000d06 	br	2009ab4 <OSQQuery+0xec>
        *pdest++ = *psrc++;
 2009a80:	e0bffa17 	ldw	r2,-24(fp)
 2009a84:	10c00003 	ldbu	r3,0(r2)
 2009a88:	e0bff917 	ldw	r2,-28(fp)
 2009a8c:	10c00005 	stb	r3,0(r2)
 2009a90:	e0bff917 	ldw	r2,-28(fp)
 2009a94:	10800044 	addi	r2,r2,1
 2009a98:	e0bff915 	stw	r2,-28(fp)
 2009a9c:	e0bffa17 	ldw	r2,-24(fp)
 2009aa0:	10800044 	addi	r2,r2,1
 2009aa4:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2009aa8:	e0bffb03 	ldbu	r2,-20(fp)
 2009aac:	10800044 	addi	r2,r2,1
 2009ab0:	e0bffb05 	stb	r2,-20(fp)
 2009ab4:	e0bffb03 	ldbu	r2,-20(fp)
 2009ab8:	108000f0 	cmpltui	r2,r2,3
 2009abc:	103ff01e 	bne	r2,zero,2009a80 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 2009ac0:	e0bffd17 	ldw	r2,-12(fp)
 2009ac4:	10800117 	ldw	r2,4(r2)
 2009ac8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 2009acc:	e0bffc17 	ldw	r2,-16(fp)
 2009ad0:	1080058b 	ldhu	r2,22(r2)
 2009ad4:	10bfffcc 	andi	r2,r2,65535
 2009ad8:	1005003a 	cmpeq	r2,r2,zero
 2009adc:	1000061e 	bne	r2,zero,2009af8 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 2009ae0:	e0bffc17 	ldw	r2,-16(fp)
 2009ae4:	10800417 	ldw	r2,16(r2)
 2009ae8:	10c00017 	ldw	r3,0(r2)
 2009aec:	e0bffe17 	ldw	r2,-8(fp)
 2009af0:	10c00015 	stw	r3,0(r2)
 2009af4:	00000206 	br	2009b00 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 2009af8:	e0bffe17 	ldw	r2,-8(fp)
 2009afc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 2009b00:	e0bffc17 	ldw	r2,-16(fp)
 2009b04:	10c0058b 	ldhu	r3,22(r2)
 2009b08:	e0bffe17 	ldw	r2,-8(fp)
 2009b0c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 2009b10:	e0bffc17 	ldw	r2,-16(fp)
 2009b14:	10c0050b 	ldhu	r3,20(r2)
 2009b18:	e0bffe17 	ldw	r2,-8(fp)
 2009b1c:	10c0018d 	sth	r3,6(r2)
 2009b20:	e0bff817 	ldw	r2,-32(fp)
 2009b24:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009b28:	e0bff617 	ldw	r2,-40(fp)
 2009b2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2009b30:	e03fff15 	stw	zero,-4(fp)
 2009b34:	e0bfff17 	ldw	r2,-4(fp)
}
 2009b38:	e037883a 	mov	sp,fp
 2009b3c:	df000017 	ldw	fp,0(sp)
 2009b40:	dec00104 	addi	sp,sp,4
 2009b44:	f800283a 	ret

02009b48 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 2009b48:	defffb04 	addi	sp,sp,-20
 2009b4c:	dfc00415 	stw	ra,16(sp)
 2009b50:	df000315 	stw	fp,12(sp)
 2009b54:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 2009b58:	01008074 	movhi	r4,513
 2009b5c:	211dd704 	addi	r4,r4,30556
 2009b60:	01407804 	movi	r5,480
 2009b64:	2005e480 	call	2005e48 <OS_MemClr>
    pq1 = &OSQTbl[0];
 2009b68:	00808074 	movhi	r2,513
 2009b6c:	109dd704 	addi	r2,r2,30556
 2009b70:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 2009b74:	00808074 	movhi	r2,513
 2009b78:	109ddd04 	addi	r2,r2,30580
 2009b7c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2009b80:	e03fff0d 	sth	zero,-4(fp)
 2009b84:	00000c06 	br	2009bb8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 2009b88:	e0fffe17 	ldw	r3,-8(fp)
 2009b8c:	e0bffd17 	ldw	r2,-12(fp)
 2009b90:	18800015 	stw	r2,0(r3)
        pq1++;
 2009b94:	e0bffe17 	ldw	r2,-8(fp)
 2009b98:	10800604 	addi	r2,r2,24
 2009b9c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 2009ba0:	e0bffd17 	ldw	r2,-12(fp)
 2009ba4:	10800604 	addi	r2,r2,24
 2009ba8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2009bac:	e0bfff0b 	ldhu	r2,-4(fp)
 2009bb0:	10800044 	addi	r2,r2,1
 2009bb4:	e0bfff0d 	sth	r2,-4(fp)
 2009bb8:	e0bfff0b 	ldhu	r2,-4(fp)
 2009bbc:	108004f0 	cmpltui	r2,r2,19
 2009bc0:	103ff11e 	bne	r2,zero,2009b88 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 2009bc4:	e0bffe17 	ldw	r2,-8(fp)
 2009bc8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 2009bcc:	00c08074 	movhi	r3,513
 2009bd0:	18cfd504 	addi	r3,r3,16212
 2009bd4:	00808074 	movhi	r2,513
 2009bd8:	109dd704 	addi	r2,r2,30556
 2009bdc:	18800015 	stw	r2,0(r3)
#endif
}
 2009be0:	e037883a 	mov	sp,fp
 2009be4:	dfc00117 	ldw	ra,4(sp)
 2009be8:	df000017 	ldw	fp,0(sp)
 2009bec:	dec00204 	addi	sp,sp,8
 2009bf0:	f800283a 	ret

02009bf4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 2009bf4:	defff904 	addi	sp,sp,-28
 2009bf8:	df000615 	stw	fp,24(sp)
 2009bfc:	df000604 	addi	fp,sp,24
 2009c00:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2009c04:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2009c08:	e0bffe17 	ldw	r2,-8(fp)
 2009c0c:	1004c03a 	cmpne	r2,r2,zero
 2009c10:	1000021e 	bne	r2,zero,2009c1c <OSSemAccept+0x28>
        return (0);
 2009c14:	e03fff15 	stw	zero,-4(fp)
 2009c18:	00002106 	br	2009ca0 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2009c1c:	e0bffe17 	ldw	r2,-8(fp)
 2009c20:	10800003 	ldbu	r2,0(r2)
 2009c24:	10803fcc 	andi	r2,r2,255
 2009c28:	108000e0 	cmpeqi	r2,r2,3
 2009c2c:	1000021e 	bne	r2,zero,2009c38 <OSSemAccept+0x44>
        return (0);
 2009c30:	e03fff15 	stw	zero,-4(fp)
 2009c34:	00001a06 	br	2009ca0 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009c38:	0005303a 	rdctl	r2,status
 2009c3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009c40:	e0fffb17 	ldw	r3,-20(fp)
 2009c44:	00bfff84 	movi	r2,-2
 2009c48:	1884703a 	and	r2,r3,r2
 2009c4c:	1001703a 	wrctl	status,r2
  
  return context;
 2009c50:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2009c54:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 2009c58:	e0bffe17 	ldw	r2,-8(fp)
 2009c5c:	1080020b 	ldhu	r2,8(r2)
 2009c60:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 2009c64:	e0bffd0b 	ldhu	r2,-12(fp)
 2009c68:	1005003a 	cmpeq	r2,r2,zero
 2009c6c:	1000061e 	bne	r2,zero,2009c88 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 2009c70:	e0bffe17 	ldw	r2,-8(fp)
 2009c74:	1080020b 	ldhu	r2,8(r2)
 2009c78:	10bfffc4 	addi	r2,r2,-1
 2009c7c:	1007883a 	mov	r3,r2
 2009c80:	e0bffe17 	ldw	r2,-8(fp)
 2009c84:	10c0020d 	sth	r3,8(r2)
 2009c88:	e0bffc17 	ldw	r2,-16(fp)
 2009c8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009c90:	e0bffa17 	ldw	r2,-24(fp)
 2009c94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 2009c98:	e0bffd0b 	ldhu	r2,-12(fp)
 2009c9c:	e0bfff15 	stw	r2,-4(fp)
 2009ca0:	e0bfff17 	ldw	r2,-4(fp)
}
 2009ca4:	e037883a 	mov	sp,fp
 2009ca8:	df000017 	ldw	fp,0(sp)
 2009cac:	dec00104 	addi	sp,sp,4
 2009cb0:	f800283a 	ret

02009cb4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 2009cb4:	defff804 	addi	sp,sp,-32
 2009cb8:	dfc00715 	stw	ra,28(sp)
 2009cbc:	df000615 	stw	fp,24(sp)
 2009cc0:	df000604 	addi	fp,sp,24
 2009cc4:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2009cc8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2009ccc:	00808074 	movhi	r2,513
 2009cd0:	108fd804 	addi	r2,r2,16224
 2009cd4:	10800003 	ldbu	r2,0(r2)
 2009cd8:	10803fcc 	andi	r2,r2,255
 2009cdc:	1005003a 	cmpeq	r2,r2,zero
 2009ce0:	1000021e 	bne	r2,zero,2009cec <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 2009ce4:	e03fff15 	stw	zero,-4(fp)
 2009ce8:	00003106 	br	2009db0 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009cec:	0005303a 	rdctl	r2,status
 2009cf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009cf4:	e0fffb17 	ldw	r3,-20(fp)
 2009cf8:	00bfff84 	movi	r2,-2
 2009cfc:	1884703a 	and	r2,r3,r2
 2009d00:	1001703a 	wrctl	status,r2
  
  return context;
 2009d04:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2009d08:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 2009d0c:	00808074 	movhi	r2,513
 2009d10:	108fd704 	addi	r2,r2,16220
 2009d14:	10800017 	ldw	r2,0(r2)
 2009d18:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 2009d1c:	00808074 	movhi	r2,513
 2009d20:	108fd704 	addi	r2,r2,16220
 2009d24:	10800017 	ldw	r2,0(r2)
 2009d28:	1005003a 	cmpeq	r2,r2,zero
 2009d2c:	1000081e 	bne	r2,zero,2009d50 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2009d30:	00808074 	movhi	r2,513
 2009d34:	108fd704 	addi	r2,r2,16220
 2009d38:	10800017 	ldw	r2,0(r2)
 2009d3c:	10800117 	ldw	r2,4(r2)
 2009d40:	1007883a 	mov	r3,r2
 2009d44:	00808074 	movhi	r2,513
 2009d48:	108fd704 	addi	r2,r2,16220
 2009d4c:	10c00015 	stw	r3,0(r2)
 2009d50:	e0bffc17 	ldw	r2,-16(fp)
 2009d54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009d58:	e0bffa17 	ldw	r2,-24(fp)
 2009d5c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 2009d60:	e0bffd17 	ldw	r2,-12(fp)
 2009d64:	1005003a 	cmpeq	r2,r2,zero
 2009d68:	10000f1e 	bne	r2,zero,2009da8 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 2009d6c:	e0fffd17 	ldw	r3,-12(fp)
 2009d70:	008000c4 	movi	r2,3
 2009d74:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 2009d78:	e0fffd17 	ldw	r3,-12(fp)
 2009d7c:	e0bffe0b 	ldhu	r2,-8(fp)
 2009d80:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 2009d84:	e0bffd17 	ldw	r2,-12(fp)
 2009d88:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 2009d8c:	e0fffd17 	ldw	r3,-12(fp)
 2009d90:	00800fc4 	movi	r2,63
 2009d94:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2009d98:	e0bffd17 	ldw	r2,-12(fp)
 2009d9c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 2009da0:	e13ffd17 	ldw	r4,-12(fp)
 2009da4:	2005a7c0 	call	2005a7c <OS_EventWaitListInit>
    }
    return (pevent);
 2009da8:	e0bffd17 	ldw	r2,-12(fp)
 2009dac:	e0bfff15 	stw	r2,-4(fp)
 2009db0:	e0bfff17 	ldw	r2,-4(fp)
}
 2009db4:	e037883a 	mov	sp,fp
 2009db8:	dfc00117 	ldw	ra,4(sp)
 2009dbc:	df000017 	ldw	fp,0(sp)
 2009dc0:	dec00204 	addi	sp,sp,8
 2009dc4:	f800283a 	ret

02009dc8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2009dc8:	defff104 	addi	sp,sp,-60
 2009dcc:	dfc00e15 	stw	ra,56(sp)
 2009dd0:	df000d15 	stw	fp,52(sp)
 2009dd4:	df000d04 	addi	fp,sp,52
 2009dd8:	e13ffb15 	stw	r4,-20(fp)
 2009ddc:	e1bffd15 	stw	r6,-12(fp)
 2009de0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2009de4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2009de8:	e0bffd17 	ldw	r2,-12(fp)
 2009dec:	1004c03a 	cmpne	r2,r2,zero
 2009df0:	1000031e 	bne	r2,zero,2009e00 <OSSemDel+0x38>
        return (pevent);
 2009df4:	e0bffb17 	ldw	r2,-20(fp)
 2009df8:	e0bfff15 	stw	r2,-4(fp)
 2009dfc:	00009406 	br	200a050 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2009e00:	e0bffb17 	ldw	r2,-20(fp)
 2009e04:	1004c03a 	cmpne	r2,r2,zero
 2009e08:	1000061e 	bne	r2,zero,2009e24 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 2009e0c:	e0fffd17 	ldw	r3,-12(fp)
 2009e10:	00800104 	movi	r2,4
 2009e14:	18800005 	stb	r2,0(r3)
        return (pevent);
 2009e18:	e0fffb17 	ldw	r3,-20(fp)
 2009e1c:	e0ffff15 	stw	r3,-4(fp)
 2009e20:	00008b06 	br	200a050 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2009e24:	e0bffb17 	ldw	r2,-20(fp)
 2009e28:	10800003 	ldbu	r2,0(r2)
 2009e2c:	10803fcc 	andi	r2,r2,255
 2009e30:	108000e0 	cmpeqi	r2,r2,3
 2009e34:	1000061e 	bne	r2,zero,2009e50 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 2009e38:	e0fffd17 	ldw	r3,-12(fp)
 2009e3c:	00800044 	movi	r2,1
 2009e40:	18800005 	stb	r2,0(r3)
        return (pevent);
 2009e44:	e0bffb17 	ldw	r2,-20(fp)
 2009e48:	e0bfff15 	stw	r2,-4(fp)
 2009e4c:	00008006 	br	200a050 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2009e50:	00808074 	movhi	r2,513
 2009e54:	108fd804 	addi	r2,r2,16224
 2009e58:	10800003 	ldbu	r2,0(r2)
 2009e5c:	10803fcc 	andi	r2,r2,255
 2009e60:	1005003a 	cmpeq	r2,r2,zero
 2009e64:	1000061e 	bne	r2,zero,2009e80 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 2009e68:	e0fffd17 	ldw	r3,-12(fp)
 2009e6c:	008003c4 	movi	r2,15
 2009e70:	18800005 	stb	r2,0(r3)
        return (pevent);
 2009e74:	e0fffb17 	ldw	r3,-20(fp)
 2009e78:	e0ffff15 	stw	r3,-4(fp)
 2009e7c:	00007406 	br	200a050 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009e80:	0005303a 	rdctl	r2,status
 2009e84:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009e88:	e0fff717 	ldw	r3,-36(fp)
 2009e8c:	00bfff84 	movi	r2,-2
 2009e90:	1884703a 	and	r2,r3,r2
 2009e94:	1001703a 	wrctl	status,r2
  
  return context;
 2009e98:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 2009e9c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2009ea0:	e0bffb17 	ldw	r2,-20(fp)
 2009ea4:	10800283 	ldbu	r2,10(r2)
 2009ea8:	10803fcc 	andi	r2,r2,255
 2009eac:	1005003a 	cmpeq	r2,r2,zero
 2009eb0:	1000031e 	bne	r2,zero,2009ec0 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2009eb4:	00800044 	movi	r2,1
 2009eb8:	e0bffa05 	stb	r2,-24(fp)
 2009ebc:	00000106 	br	2009ec4 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2009ec0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 2009ec4:	e0bffc03 	ldbu	r2,-16(fp)
 2009ec8:	e0bffe15 	stw	r2,-8(fp)
 2009ecc:	e0fffe17 	ldw	r3,-8(fp)
 2009ed0:	1805003a 	cmpeq	r2,r3,zero
 2009ed4:	1000041e 	bne	r2,zero,2009ee8 <OSSemDel+0x120>
 2009ed8:	e0fffe17 	ldw	r3,-8(fp)
 2009edc:	18800060 	cmpeqi	r2,r3,1
 2009ee0:	10002d1e 	bne	r2,zero,2009f98 <OSSemDel+0x1d0>
 2009ee4:	00004f06 	br	200a024 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 2009ee8:	e0bffa03 	ldbu	r2,-24(fp)
 2009eec:	1004c03a 	cmpne	r2,r2,zero
 2009ef0:	10001a1e 	bne	r2,zero,2009f5c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2009ef4:	e0fffb17 	ldw	r3,-20(fp)
 2009ef8:	00800fc4 	movi	r2,63
 2009efc:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2009f00:	e0bffb17 	ldw	r2,-20(fp)
 2009f04:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2009f08:	e0bffb17 	ldw	r2,-20(fp)
 2009f0c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2009f10:	00808074 	movhi	r2,513
 2009f14:	108fd704 	addi	r2,r2,16220
 2009f18:	10c00017 	ldw	r3,0(r2)
 2009f1c:	e0bffb17 	ldw	r2,-20(fp)
 2009f20:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2009f24:	e0bffb17 	ldw	r2,-20(fp)
 2009f28:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2009f2c:	00c08074 	movhi	r3,513
 2009f30:	18cfd704 	addi	r3,r3,16220
 2009f34:	e0bffb17 	ldw	r2,-20(fp)
 2009f38:	18800015 	stw	r2,0(r3)
 2009f3c:	e0bff817 	ldw	r2,-32(fp)
 2009f40:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009f44:	e0bff617 	ldw	r2,-40(fp)
 2009f48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2009f4c:	e0bffd17 	ldw	r2,-12(fp)
 2009f50:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 2009f54:	e03ff915 	stw	zero,-28(fp)
 2009f58:	00003b06 	br	200a048 <OSSemDel+0x280>
 2009f5c:	e0bff817 	ldw	r2,-32(fp)
 2009f60:	e0bff515 	stw	r2,-44(fp)
 2009f64:	e0bff517 	ldw	r2,-44(fp)
 2009f68:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2009f6c:	e0fffd17 	ldw	r3,-12(fp)
 2009f70:	00801244 	movi	r2,73
 2009f74:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 2009f78:	e0bffb17 	ldw	r2,-20(fp)
 2009f7c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 2009f80:	00003106 	br	200a048 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2009f84:	e13ffb17 	ldw	r4,-20(fp)
 2009f88:	000b883a 	mov	r5,zero
 2009f8c:	01800044 	movi	r6,1
 2009f90:	000f883a 	mov	r7,zero
 2009f94:	20054c80 	call	20054c8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 2009f98:	e0bffb17 	ldw	r2,-20(fp)
 2009f9c:	10800283 	ldbu	r2,10(r2)
 2009fa0:	10803fcc 	andi	r2,r2,255
 2009fa4:	1004c03a 	cmpne	r2,r2,zero
 2009fa8:	103ff61e 	bne	r2,zero,2009f84 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2009fac:	e0fffb17 	ldw	r3,-20(fp)
 2009fb0:	00800fc4 	movi	r2,63
 2009fb4:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2009fb8:	e0bffb17 	ldw	r2,-20(fp)
 2009fbc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2009fc0:	e0bffb17 	ldw	r2,-20(fp)
 2009fc4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2009fc8:	00808074 	movhi	r2,513
 2009fcc:	108fd704 	addi	r2,r2,16220
 2009fd0:	10c00017 	ldw	r3,0(r2)
 2009fd4:	e0bffb17 	ldw	r2,-20(fp)
 2009fd8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2009fdc:	e0bffb17 	ldw	r2,-20(fp)
 2009fe0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2009fe4:	00c08074 	movhi	r3,513
 2009fe8:	18cfd704 	addi	r3,r3,16220
 2009fec:	e0bffb17 	ldw	r2,-20(fp)
 2009ff0:	18800015 	stw	r2,0(r3)
 2009ff4:	e0bff817 	ldw	r2,-32(fp)
 2009ff8:	e0bff415 	stw	r2,-48(fp)
 2009ffc:	e0bff417 	ldw	r2,-48(fp)
 200a000:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 200a004:	e0bffa03 	ldbu	r2,-24(fp)
 200a008:	10800058 	cmpnei	r2,r2,1
 200a00c:	1000011e 	bne	r2,zero,200a014 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 200a010:	2005f080 	call	2005f08 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 200a014:	e0bffd17 	ldw	r2,-12(fp)
 200a018:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 200a01c:	e03ff915 	stw	zero,-28(fp)
             break;
 200a020:	00000906 	br	200a048 <OSSemDel+0x280>
 200a024:	e0bff817 	ldw	r2,-32(fp)
 200a028:	e0bff315 	stw	r2,-52(fp)
 200a02c:	e0bff317 	ldw	r2,-52(fp)
 200a030:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 200a034:	e0fffd17 	ldw	r3,-12(fp)
 200a038:	008001c4 	movi	r2,7
 200a03c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 200a040:	e0bffb17 	ldw	r2,-20(fp)
 200a044:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 200a048:	e0bff917 	ldw	r2,-28(fp)
 200a04c:	e0bfff15 	stw	r2,-4(fp)
 200a050:	e0bfff17 	ldw	r2,-4(fp)
}
 200a054:	e037883a 	mov	sp,fp
 200a058:	dfc00117 	ldw	ra,4(sp)
 200a05c:	df000017 	ldw	fp,0(sp)
 200a060:	dec00204 	addi	sp,sp,8
 200a064:	f800283a 	ret

0200a068 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 200a068:	defff404 	addi	sp,sp,-48
 200a06c:	dfc00b15 	stw	ra,44(sp)
 200a070:	df000a15 	stw	fp,40(sp)
 200a074:	df000a04 	addi	fp,sp,40
 200a078:	e13ffc15 	stw	r4,-16(fp)
 200a07c:	e1bffe15 	stw	r6,-8(fp)
 200a080:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200a084:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 200a088:	e0bffe17 	ldw	r2,-8(fp)
 200a08c:	1005003a 	cmpeq	r2,r2,zero
 200a090:	10008f1e 	bne	r2,zero,200a2d0 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 200a094:	e0bffc17 	ldw	r2,-16(fp)
 200a098:	1004c03a 	cmpne	r2,r2,zero
 200a09c:	1000041e 	bne	r2,zero,200a0b0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 200a0a0:	e0fffe17 	ldw	r3,-8(fp)
 200a0a4:	00800104 	movi	r2,4
 200a0a8:	18800005 	stb	r2,0(r3)
        return;
 200a0ac:	00008806 	br	200a2d0 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 200a0b0:	e0bffc17 	ldw	r2,-16(fp)
 200a0b4:	10800003 	ldbu	r2,0(r2)
 200a0b8:	10803fcc 	andi	r2,r2,255
 200a0bc:	108000e0 	cmpeqi	r2,r2,3
 200a0c0:	1000041e 	bne	r2,zero,200a0d4 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 200a0c4:	e0fffe17 	ldw	r3,-8(fp)
 200a0c8:	00800044 	movi	r2,1
 200a0cc:	18800005 	stb	r2,0(r3)
        return;
 200a0d0:	00007f06 	br	200a2d0 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 200a0d4:	00808074 	movhi	r2,513
 200a0d8:	108fd804 	addi	r2,r2,16224
 200a0dc:	10800003 	ldbu	r2,0(r2)
 200a0e0:	10803fcc 	andi	r2,r2,255
 200a0e4:	1005003a 	cmpeq	r2,r2,zero
 200a0e8:	1000041e 	bne	r2,zero,200a0fc <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 200a0ec:	e0fffe17 	ldw	r3,-8(fp)
 200a0f0:	00800084 	movi	r2,2
 200a0f4:	18800005 	stb	r2,0(r3)
        return;
 200a0f8:	00007506 	br	200a2d0 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 200a0fc:	00808074 	movhi	r2,513
 200a100:	108fca04 	addi	r2,r2,16168
 200a104:	10800003 	ldbu	r2,0(r2)
 200a108:	10803fcc 	andi	r2,r2,255
 200a10c:	1005003a 	cmpeq	r2,r2,zero
 200a110:	1000041e 	bne	r2,zero,200a124 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 200a114:	e0fffe17 	ldw	r3,-8(fp)
 200a118:	00800344 	movi	r2,13
 200a11c:	18800005 	stb	r2,0(r3)
        return;
 200a120:	00006b06 	br	200a2d0 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a124:	0005303a 	rdctl	r2,status
 200a128:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a12c:	e0fffa17 	ldw	r3,-24(fp)
 200a130:	00bfff84 	movi	r2,-2
 200a134:	1884703a 	and	r2,r3,r2
 200a138:	1001703a 	wrctl	status,r2
  
  return context;
 200a13c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 200a140:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 200a144:	e0bffc17 	ldw	r2,-16(fp)
 200a148:	1080020b 	ldhu	r2,8(r2)
 200a14c:	10bfffcc 	andi	r2,r2,65535
 200a150:	1005003a 	cmpeq	r2,r2,zero
 200a154:	10000d1e 	bne	r2,zero,200a18c <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 200a158:	e0bffc17 	ldw	r2,-16(fp)
 200a15c:	1080020b 	ldhu	r2,8(r2)
 200a160:	10bfffc4 	addi	r2,r2,-1
 200a164:	1007883a 	mov	r3,r2
 200a168:	e0bffc17 	ldw	r2,-16(fp)
 200a16c:	10c0020d 	sth	r3,8(r2)
 200a170:	e0bffb17 	ldw	r2,-20(fp)
 200a174:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a178:	e0bff917 	ldw	r2,-28(fp)
 200a17c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 200a180:	e0bffe17 	ldw	r2,-8(fp)
 200a184:	10000005 	stb	zero,0(r2)
        return;
 200a188:	00005106 	br	200a2d0 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 200a18c:	00808074 	movhi	r2,513
 200a190:	108fd904 	addi	r2,r2,16228
 200a194:	10c00017 	ldw	r3,0(r2)
 200a198:	00808074 	movhi	r2,513
 200a19c:	108fd904 	addi	r2,r2,16228
 200a1a0:	10800017 	ldw	r2,0(r2)
 200a1a4:	10800c03 	ldbu	r2,48(r2)
 200a1a8:	10800054 	ori	r2,r2,1
 200a1ac:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 200a1b0:	00808074 	movhi	r2,513
 200a1b4:	108fd904 	addi	r2,r2,16228
 200a1b8:	10800017 	ldw	r2,0(r2)
 200a1bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 200a1c0:	00808074 	movhi	r2,513
 200a1c4:	108fd904 	addi	r2,r2,16228
 200a1c8:	10c00017 	ldw	r3,0(r2)
 200a1cc:	e0bffd0b 	ldhu	r2,-12(fp)
 200a1d0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 200a1d4:	e13ffc17 	ldw	r4,-16(fp)
 200a1d8:	200565c0 	call	200565c <OS_EventTaskWait>
 200a1dc:	e0bffb17 	ldw	r2,-20(fp)
 200a1e0:	e0bff815 	stw	r2,-32(fp)
 200a1e4:	e0bff817 	ldw	r2,-32(fp)
 200a1e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 200a1ec:	2005f080 	call	2005f08 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a1f0:	0005303a 	rdctl	r2,status
 200a1f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a1f8:	e0fff717 	ldw	r3,-36(fp)
 200a1fc:	00bfff84 	movi	r2,-2
 200a200:	1884703a 	and	r2,r3,r2
 200a204:	1001703a 	wrctl	status,r2
  
  return context;
 200a208:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 200a20c:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 200a210:	00808074 	movhi	r2,513
 200a214:	108fd904 	addi	r2,r2,16228
 200a218:	10800017 	ldw	r2,0(r2)
 200a21c:	10800c43 	ldbu	r2,49(r2)
 200a220:	10803fcc 	andi	r2,r2,255
 200a224:	e0bfff15 	stw	r2,-4(fp)
 200a228:	e0ffff17 	ldw	r3,-4(fp)
 200a22c:	1805003a 	cmpeq	r2,r3,zero
 200a230:	1000041e 	bne	r2,zero,200a244 <OSSemPend+0x1dc>
 200a234:	e0ffff17 	ldw	r3,-4(fp)
 200a238:	188000a0 	cmpeqi	r2,r3,2
 200a23c:	1000041e 	bne	r2,zero,200a250 <OSSemPend+0x1e8>
 200a240:	00000706 	br	200a260 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 200a244:	e0bffe17 	ldw	r2,-8(fp)
 200a248:	10000005 	stb	zero,0(r2)
             break;
 200a24c:	00000c06 	br	200a280 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 200a250:	e0fffe17 	ldw	r3,-8(fp)
 200a254:	00800384 	movi	r2,14
 200a258:	18800005 	stb	r2,0(r3)
             break;
 200a25c:	00000806 	br	200a280 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 200a260:	00808074 	movhi	r2,513
 200a264:	108fd904 	addi	r2,r2,16228
 200a268:	11000017 	ldw	r4,0(r2)
 200a26c:	e17ffc17 	ldw	r5,-16(fp)
 200a270:	20058c00 	call	20058c0 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 200a274:	e0fffe17 	ldw	r3,-8(fp)
 200a278:	00800284 	movi	r2,10
 200a27c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 200a280:	00808074 	movhi	r2,513
 200a284:	108fd904 	addi	r2,r2,16228
 200a288:	10800017 	ldw	r2,0(r2)
 200a28c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 200a290:	00808074 	movhi	r2,513
 200a294:	108fd904 	addi	r2,r2,16228
 200a298:	10800017 	ldw	r2,0(r2)
 200a29c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 200a2a0:	00808074 	movhi	r2,513
 200a2a4:	108fd904 	addi	r2,r2,16228
 200a2a8:	10800017 	ldw	r2,0(r2)
 200a2ac:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 200a2b0:	00808074 	movhi	r2,513
 200a2b4:	108fd904 	addi	r2,r2,16228
 200a2b8:	10800017 	ldw	r2,0(r2)
 200a2bc:	10000815 	stw	zero,32(r2)
 200a2c0:	e0bffb17 	ldw	r2,-20(fp)
 200a2c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a2c8:	e0bff617 	ldw	r2,-40(fp)
 200a2cc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 200a2d0:	e037883a 	mov	sp,fp
 200a2d4:	dfc00117 	ldw	ra,4(sp)
 200a2d8:	df000017 	ldw	fp,0(sp)
 200a2dc:	dec00204 	addi	sp,sp,8
 200a2e0:	f800283a 	ret

0200a2e4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 200a2e4:	defff504 	addi	sp,sp,-44
 200a2e8:	dfc00a15 	stw	ra,40(sp)
 200a2ec:	df000915 	stw	fp,36(sp)
 200a2f0:	df000904 	addi	fp,sp,36
 200a2f4:	e13ffc15 	stw	r4,-16(fp)
 200a2f8:	e1bffe15 	stw	r6,-8(fp)
 200a2fc:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200a300:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 200a304:	e0bffe17 	ldw	r2,-8(fp)
 200a308:	1004c03a 	cmpne	r2,r2,zero
 200a30c:	1000021e 	bne	r2,zero,200a318 <OSSemPendAbort+0x34>
        return (0);
 200a310:	e03fff15 	stw	zero,-4(fp)
 200a314:	00004c06 	br	200a448 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 200a318:	e0bffc17 	ldw	r2,-16(fp)
 200a31c:	1004c03a 	cmpne	r2,r2,zero
 200a320:	1000051e 	bne	r2,zero,200a338 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 200a324:	e0fffe17 	ldw	r3,-8(fp)
 200a328:	00800104 	movi	r2,4
 200a32c:	18800005 	stb	r2,0(r3)
        return (0);
 200a330:	e03fff15 	stw	zero,-4(fp)
 200a334:	00004406 	br	200a448 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 200a338:	e0bffc17 	ldw	r2,-16(fp)
 200a33c:	10800003 	ldbu	r2,0(r2)
 200a340:	10803fcc 	andi	r2,r2,255
 200a344:	108000e0 	cmpeqi	r2,r2,3
 200a348:	1000051e 	bne	r2,zero,200a360 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 200a34c:	e0fffe17 	ldw	r3,-8(fp)
 200a350:	00800044 	movi	r2,1
 200a354:	18800005 	stb	r2,0(r3)
        return (0);
 200a358:	e03fff15 	stw	zero,-4(fp)
 200a35c:	00003a06 	br	200a448 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a360:	0005303a 	rdctl	r2,status
 200a364:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a368:	e0fff917 	ldw	r3,-28(fp)
 200a36c:	00bfff84 	movi	r2,-2
 200a370:	1884703a 	and	r2,r3,r2
 200a374:	1001703a 	wrctl	status,r2
  
  return context;
 200a378:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 200a37c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 200a380:	e0bffc17 	ldw	r2,-16(fp)
 200a384:	10800283 	ldbu	r2,10(r2)
 200a388:	10803fcc 	andi	r2,r2,255
 200a38c:	1005003a 	cmpeq	r2,r2,zero
 200a390:	1000261e 	bne	r2,zero,200a42c <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 200a394:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 200a398:	e0bffd03 	ldbu	r2,-12(fp)
 200a39c:	10800060 	cmpeqi	r2,r2,1
 200a3a0:	1000091e 	bne	r2,zero,200a3c8 <OSSemPendAbort+0xe4>
 200a3a4:	00000e06 	br	200a3e0 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 200a3a8:	e13ffc17 	ldw	r4,-16(fp)
 200a3ac:	000b883a 	mov	r5,zero
 200a3b0:	01800044 	movi	r6,1
 200a3b4:	01c00084 	movi	r7,2
 200a3b8:	20054c80 	call	20054c8 <OS_EventTaskRdy>
                     nbr_tasks++;
 200a3bc:	e0bffb03 	ldbu	r2,-20(fp)
 200a3c0:	10800044 	addi	r2,r2,1
 200a3c4:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 200a3c8:	e0bffc17 	ldw	r2,-16(fp)
 200a3cc:	10800283 	ldbu	r2,10(r2)
 200a3d0:	10803fcc 	andi	r2,r2,255
 200a3d4:	1004c03a 	cmpne	r2,r2,zero
 200a3d8:	103ff31e 	bne	r2,zero,200a3a8 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 200a3dc:	00000806 	br	200a400 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 200a3e0:	e13ffc17 	ldw	r4,-16(fp)
 200a3e4:	000b883a 	mov	r5,zero
 200a3e8:	01800044 	movi	r6,1
 200a3ec:	01c00084 	movi	r7,2
 200a3f0:	20054c80 	call	20054c8 <OS_EventTaskRdy>
                 nbr_tasks++;
 200a3f4:	e0bffb03 	ldbu	r2,-20(fp)
 200a3f8:	10800044 	addi	r2,r2,1
 200a3fc:	e0bffb05 	stb	r2,-20(fp)
 200a400:	e0bffa17 	ldw	r2,-24(fp)
 200a404:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a408:	e0bff817 	ldw	r2,-32(fp)
 200a40c:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 200a410:	2005f080 	call	2005f08 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 200a414:	e0fffe17 	ldw	r3,-8(fp)
 200a418:	00800384 	movi	r2,14
 200a41c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 200a420:	e0bffb03 	ldbu	r2,-20(fp)
 200a424:	e0bfff15 	stw	r2,-4(fp)
 200a428:	00000706 	br	200a448 <OSSemPendAbort+0x164>
 200a42c:	e0bffa17 	ldw	r2,-24(fp)
 200a430:	e0bff715 	stw	r2,-36(fp)
 200a434:	e0bff717 	ldw	r2,-36(fp)
 200a438:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200a43c:	e0bffe17 	ldw	r2,-8(fp)
 200a440:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 200a444:	e03fff15 	stw	zero,-4(fp)
 200a448:	e0bfff17 	ldw	r2,-4(fp)
}
 200a44c:	e037883a 	mov	sp,fp
 200a450:	dfc00117 	ldw	ra,4(sp)
 200a454:	df000017 	ldw	fp,0(sp)
 200a458:	dec00204 	addi	sp,sp,8
 200a45c:	f800283a 	ret

0200a460 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 200a460:	defff704 	addi	sp,sp,-36
 200a464:	dfc00815 	stw	ra,32(sp)
 200a468:	df000715 	stw	fp,28(sp)
 200a46c:	df000704 	addi	fp,sp,28
 200a470:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200a474:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 200a478:	e0bffe17 	ldw	r2,-8(fp)
 200a47c:	1004c03a 	cmpne	r2,r2,zero
 200a480:	1000031e 	bne	r2,zero,200a490 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 200a484:	00800104 	movi	r2,4
 200a488:	e0bfff15 	stw	r2,-4(fp)
 200a48c:	00003806 	br	200a570 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 200a490:	e0bffe17 	ldw	r2,-8(fp)
 200a494:	10800003 	ldbu	r2,0(r2)
 200a498:	10803fcc 	andi	r2,r2,255
 200a49c:	108000e0 	cmpeqi	r2,r2,3
 200a4a0:	1000031e 	bne	r2,zero,200a4b0 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 200a4a4:	00800044 	movi	r2,1
 200a4a8:	e0bfff15 	stw	r2,-4(fp)
 200a4ac:	00003006 	br	200a570 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a4b0:	0005303a 	rdctl	r2,status
 200a4b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a4b8:	e0fffc17 	ldw	r3,-16(fp)
 200a4bc:	00bfff84 	movi	r2,-2
 200a4c0:	1884703a 	and	r2,r3,r2
 200a4c4:	1001703a 	wrctl	status,r2
  
  return context;
 200a4c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 200a4cc:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 200a4d0:	e0bffe17 	ldw	r2,-8(fp)
 200a4d4:	10800283 	ldbu	r2,10(r2)
 200a4d8:	10803fcc 	andi	r2,r2,255
 200a4dc:	1005003a 	cmpeq	r2,r2,zero
 200a4e0:	10000c1e 	bne	r2,zero,200a514 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 200a4e4:	e13ffe17 	ldw	r4,-8(fp)
 200a4e8:	000b883a 	mov	r5,zero
 200a4ec:	01800044 	movi	r6,1
 200a4f0:	000f883a 	mov	r7,zero
 200a4f4:	20054c80 	call	20054c8 <OS_EventTaskRdy>
 200a4f8:	e0bffd17 	ldw	r2,-12(fp)
 200a4fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a500:	e0bffb17 	ldw	r2,-20(fp)
 200a504:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 200a508:	2005f080 	call	2005f08 <OS_Sched>
        return (OS_ERR_NONE);
 200a50c:	e03fff15 	stw	zero,-4(fp)
 200a510:	00001706 	br	200a570 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 200a514:	e0bffe17 	ldw	r2,-8(fp)
 200a518:	1080020b 	ldhu	r2,8(r2)
 200a51c:	10ffffcc 	andi	r3,r2,65535
 200a520:	00bfffd4 	movui	r2,65535
 200a524:	18800c26 	beq	r3,r2,200a558 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 200a528:	e0bffe17 	ldw	r2,-8(fp)
 200a52c:	1080020b 	ldhu	r2,8(r2)
 200a530:	10800044 	addi	r2,r2,1
 200a534:	1007883a 	mov	r3,r2
 200a538:	e0bffe17 	ldw	r2,-8(fp)
 200a53c:	10c0020d 	sth	r3,8(r2)
 200a540:	e0bffd17 	ldw	r2,-12(fp)
 200a544:	e0bffa15 	stw	r2,-24(fp)
 200a548:	e0bffa17 	ldw	r2,-24(fp)
 200a54c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 200a550:	e03fff15 	stw	zero,-4(fp)
 200a554:	00000606 	br	200a570 <OSSemPost+0x110>
 200a558:	e0bffd17 	ldw	r2,-12(fp)
 200a55c:	e0bff915 	stw	r2,-28(fp)
 200a560:	e0bff917 	ldw	r2,-28(fp)
 200a564:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 200a568:	00800c84 	movi	r2,50
 200a56c:	e0bfff15 	stw	r2,-4(fp)
 200a570:	e0bfff17 	ldw	r2,-4(fp)
}
 200a574:	e037883a 	mov	sp,fp
 200a578:	dfc00117 	ldw	ra,4(sp)
 200a57c:	df000017 	ldw	fp,0(sp)
 200a580:	dec00204 	addi	sp,sp,8
 200a584:	f800283a 	ret

0200a588 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 200a588:	defff604 	addi	sp,sp,-40
 200a58c:	df000915 	stw	fp,36(sp)
 200a590:	df000904 	addi	fp,sp,36
 200a594:	e13ffd15 	stw	r4,-12(fp)
 200a598:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 200a59c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 200a5a0:	e0bffd17 	ldw	r2,-12(fp)
 200a5a4:	1004c03a 	cmpne	r2,r2,zero
 200a5a8:	1000031e 	bne	r2,zero,200a5b8 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 200a5ac:	00800104 	movi	r2,4
 200a5b0:	e0bfff15 	stw	r2,-4(fp)
 200a5b4:	00003b06 	br	200a6a4 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 200a5b8:	e0bffe17 	ldw	r2,-8(fp)
 200a5bc:	1004c03a 	cmpne	r2,r2,zero
 200a5c0:	1000031e 	bne	r2,zero,200a5d0 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 200a5c4:	00800244 	movi	r2,9
 200a5c8:	e0bfff15 	stw	r2,-4(fp)
 200a5cc:	00003506 	br	200a6a4 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 200a5d0:	e0bffd17 	ldw	r2,-12(fp)
 200a5d4:	10800003 	ldbu	r2,0(r2)
 200a5d8:	10803fcc 	andi	r2,r2,255
 200a5dc:	108000e0 	cmpeqi	r2,r2,3
 200a5e0:	1000031e 	bne	r2,zero,200a5f0 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 200a5e4:	00800044 	movi	r2,1
 200a5e8:	e0bfff15 	stw	r2,-4(fp)
 200a5ec:	00002d06 	br	200a6a4 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a5f0:	0005303a 	rdctl	r2,status
 200a5f4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a5f8:	e0fff817 	ldw	r3,-32(fp)
 200a5fc:	00bfff84 	movi	r2,-2
 200a600:	1884703a 	and	r2,r3,r2
 200a604:	1001703a 	wrctl	status,r2
  
  return context;
 200a608:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 200a60c:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 200a610:	e0bffd17 	ldw	r2,-12(fp)
 200a614:	10c00283 	ldbu	r3,10(r2)
 200a618:	e0bffe17 	ldw	r2,-8(fp)
 200a61c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 200a620:	e0bffd17 	ldw	r2,-12(fp)
 200a624:	108002c4 	addi	r2,r2,11
 200a628:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 200a62c:	e0bffe17 	ldw	r2,-8(fp)
 200a630:	10800084 	addi	r2,r2,2
 200a634:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 200a638:	e03ffa05 	stb	zero,-24(fp)
 200a63c:	00000d06 	br	200a674 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 200a640:	e0bffc17 	ldw	r2,-16(fp)
 200a644:	10c00003 	ldbu	r3,0(r2)
 200a648:	e0bffb17 	ldw	r2,-20(fp)
 200a64c:	10c00005 	stb	r3,0(r2)
 200a650:	e0bffb17 	ldw	r2,-20(fp)
 200a654:	10800044 	addi	r2,r2,1
 200a658:	e0bffb15 	stw	r2,-20(fp)
 200a65c:	e0bffc17 	ldw	r2,-16(fp)
 200a660:	10800044 	addi	r2,r2,1
 200a664:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 200a668:	e0bffa03 	ldbu	r2,-24(fp)
 200a66c:	10800044 	addi	r2,r2,1
 200a670:	e0bffa05 	stb	r2,-24(fp)
 200a674:	e0bffa03 	ldbu	r2,-24(fp)
 200a678:	108000f0 	cmpltui	r2,r2,3
 200a67c:	103ff01e 	bne	r2,zero,200a640 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 200a680:	e0bffd17 	ldw	r2,-12(fp)
 200a684:	10c0020b 	ldhu	r3,8(r2)
 200a688:	e0bffe17 	ldw	r2,-8(fp)
 200a68c:	10c0000d 	sth	r3,0(r2)
 200a690:	e0bff917 	ldw	r2,-28(fp)
 200a694:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a698:	e0bff717 	ldw	r2,-36(fp)
 200a69c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 200a6a0:	e03fff15 	stw	zero,-4(fp)
 200a6a4:	e0bfff17 	ldw	r2,-4(fp)
}
 200a6a8:	e037883a 	mov	sp,fp
 200a6ac:	df000017 	ldw	fp,0(sp)
 200a6b0:	dec00104 	addi	sp,sp,4
 200a6b4:	f800283a 	ret

0200a6b8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 200a6b8:	defff904 	addi	sp,sp,-28
 200a6bc:	df000615 	stw	fp,24(sp)
 200a6c0:	df000604 	addi	fp,sp,24
 200a6c4:	e13ffd15 	stw	r4,-12(fp)
 200a6c8:	e1bfff15 	stw	r6,-4(fp)
 200a6cc:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200a6d0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 200a6d4:	e0bfff17 	ldw	r2,-4(fp)
 200a6d8:	1005003a 	cmpeq	r2,r2,zero
 200a6dc:	1000331e 	bne	r2,zero,200a7ac <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 200a6e0:	e0bffd17 	ldw	r2,-12(fp)
 200a6e4:	1004c03a 	cmpne	r2,r2,zero
 200a6e8:	1000041e 	bne	r2,zero,200a6fc <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 200a6ec:	e0ffff17 	ldw	r3,-4(fp)
 200a6f0:	00800104 	movi	r2,4
 200a6f4:	18800005 	stb	r2,0(r3)
        return;
 200a6f8:	00002c06 	br	200a7ac <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 200a6fc:	e0bffd17 	ldw	r2,-12(fp)
 200a700:	10800003 	ldbu	r2,0(r2)
 200a704:	10803fcc 	andi	r2,r2,255
 200a708:	108000e0 	cmpeqi	r2,r2,3
 200a70c:	1000041e 	bne	r2,zero,200a720 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 200a710:	e0ffff17 	ldw	r3,-4(fp)
 200a714:	00800044 	movi	r2,1
 200a718:	18800005 	stb	r2,0(r3)
        return;
 200a71c:	00002306 	br	200a7ac <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a720:	0005303a 	rdctl	r2,status
 200a724:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a728:	e0fffb17 	ldw	r3,-20(fp)
 200a72c:	00bfff84 	movi	r2,-2
 200a730:	1884703a 	and	r2,r3,r2
 200a734:	1001703a 	wrctl	status,r2
  
  return context;
 200a738:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 200a73c:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 200a740:	e0bfff17 	ldw	r2,-4(fp)
 200a744:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 200a748:	e0bffd17 	ldw	r2,-12(fp)
 200a74c:	1080020b 	ldhu	r2,8(r2)
 200a750:	10bfffcc 	andi	r2,r2,65535
 200a754:	1005003a 	cmpeq	r2,r2,zero
 200a758:	1000041e 	bne	r2,zero,200a76c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 200a75c:	e0fffd17 	ldw	r3,-12(fp)
 200a760:	e0bffe0b 	ldhu	r2,-8(fp)
 200a764:	1880020d 	sth	r2,8(r3)
 200a768:	00000c06 	br	200a79c <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 200a76c:	e0bffd17 	ldw	r2,-12(fp)
 200a770:	10800283 	ldbu	r2,10(r2)
 200a774:	10803fcc 	andi	r2,r2,255
 200a778:	1004c03a 	cmpne	r2,r2,zero
 200a77c:	1000041e 	bne	r2,zero,200a790 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 200a780:	e0fffd17 	ldw	r3,-12(fp)
 200a784:	e0bffe0b 	ldhu	r2,-8(fp)
 200a788:	1880020d 	sth	r2,8(r3)
 200a78c:	00000306 	br	200a79c <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 200a790:	e0ffff17 	ldw	r3,-4(fp)
 200a794:	00801244 	movi	r2,73
 200a798:	18800005 	stb	r2,0(r3)
 200a79c:	e0bffc17 	ldw	r2,-16(fp)
 200a7a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a7a4:	e0bffa17 	ldw	r2,-24(fp)
 200a7a8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 200a7ac:	e037883a 	mov	sp,fp
 200a7b0:	df000017 	ldw	fp,0(sp)
 200a7b4:	dec00104 	addi	sp,sp,4
 200a7b8:	f800283a 	ret

0200a7bc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 200a7bc:	defff004 	addi	sp,sp,-64
 200a7c0:	dfc00f15 	stw	ra,60(sp)
 200a7c4:	df000e15 	stw	fp,56(sp)
 200a7c8:	df000e04 	addi	fp,sp,56
 200a7cc:	e13ffd05 	stb	r4,-12(fp)
 200a7d0:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 200a7d4:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 200a7d8:	e0bffd03 	ldbu	r2,-12(fp)
 200a7dc:	10800530 	cmpltui	r2,r2,20
 200a7e0:	1000061e 	bne	r2,zero,200a7fc <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 200a7e4:	e0bffd03 	ldbu	r2,-12(fp)
 200a7e8:	10803fe0 	cmpeqi	r2,r2,255
 200a7ec:	1000031e 	bne	r2,zero,200a7fc <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 200a7f0:	00800a84 	movi	r2,42
 200a7f4:	e0bfff15 	stw	r2,-4(fp)
 200a7f8:	00014706 	br	200ad18 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 200a7fc:	e0bffe03 	ldbu	r2,-8(fp)
 200a800:	10800530 	cmpltui	r2,r2,20
 200a804:	1000031e 	bne	r2,zero,200a814 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 200a808:	00800a84 	movi	r2,42
 200a80c:	e0bfff15 	stw	r2,-4(fp)
 200a810:	00014106 	br	200ad18 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a814:	0005303a 	rdctl	r2,status
 200a818:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a81c:	e0fff617 	ldw	r3,-40(fp)
 200a820:	00bfff84 	movi	r2,-2
 200a824:	1884703a 	and	r2,r3,r2
 200a828:	1001703a 	wrctl	status,r2
  
  return context;
 200a82c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200a830:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 200a834:	e0bffe03 	ldbu	r2,-8(fp)
 200a838:	00c080b4 	movhi	r3,514
 200a83c:	18e46304 	addi	r3,r3,-28276
 200a840:	1085883a 	add	r2,r2,r2
 200a844:	1085883a 	add	r2,r2,r2
 200a848:	10c5883a 	add	r2,r2,r3
 200a84c:	10800017 	ldw	r2,0(r2)
 200a850:	1005003a 	cmpeq	r2,r2,zero
 200a854:	1000071e 	bne	r2,zero,200a874 <OSTaskChangePrio+0xb8>
 200a858:	e0bff717 	ldw	r2,-36(fp)
 200a85c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a860:	e0bff517 	ldw	r2,-44(fp)
 200a864:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 200a868:	00800a04 	movi	r2,40
 200a86c:	e0bfff15 	stw	r2,-4(fp)
 200a870:	00012906 	br	200ad18 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 200a874:	e0bffd03 	ldbu	r2,-12(fp)
 200a878:	10803fd8 	cmpnei	r2,r2,255
 200a87c:	1000051e 	bne	r2,zero,200a894 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 200a880:	00808074 	movhi	r2,513
 200a884:	108fd904 	addi	r2,r2,16228
 200a888:	10800017 	ldw	r2,0(r2)
 200a88c:	10800c83 	ldbu	r2,50(r2)
 200a890:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 200a894:	e0bffd03 	ldbu	r2,-12(fp)
 200a898:	00c080b4 	movhi	r3,514
 200a89c:	18e46304 	addi	r3,r3,-28276
 200a8a0:	1085883a 	add	r2,r2,r2
 200a8a4:	1085883a 	add	r2,r2,r2
 200a8a8:	10c5883a 	add	r2,r2,r3
 200a8ac:	10800017 	ldw	r2,0(r2)
 200a8b0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 200a8b4:	e0bffa17 	ldw	r2,-24(fp)
 200a8b8:	1004c03a 	cmpne	r2,r2,zero
 200a8bc:	1000071e 	bne	r2,zero,200a8dc <OSTaskChangePrio+0x120>
 200a8c0:	e0bff717 	ldw	r2,-36(fp)
 200a8c4:	e0bff415 	stw	r2,-48(fp)
 200a8c8:	e0bff417 	ldw	r2,-48(fp)
 200a8cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 200a8d0:	00800a44 	movi	r2,41
 200a8d4:	e0bfff15 	stw	r2,-4(fp)
 200a8d8:	00010f06 	br	200ad18 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 200a8dc:	e0bffa17 	ldw	r2,-24(fp)
 200a8e0:	10800058 	cmpnei	r2,r2,1
 200a8e4:	1000071e 	bne	r2,zero,200a904 <OSTaskChangePrio+0x148>
 200a8e8:	e0bff717 	ldw	r2,-36(fp)
 200a8ec:	e0bff315 	stw	r2,-52(fp)
 200a8f0:	e0bff317 	ldw	r2,-52(fp)
 200a8f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 200a8f8:	008010c4 	movi	r2,67
 200a8fc:	e0bfff15 	stw	r2,-4(fp)
 200a900:	00010506 	br	200ad18 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 200a904:	e0bffe03 	ldbu	r2,-8(fp)
 200a908:	1004d0fa 	srli	r2,r2,3
 200a90c:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 200a910:	e0bffe03 	ldbu	r2,-8(fp)
 200a914:	108001cc 	andi	r2,r2,7
 200a918:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 200a91c:	e0fff983 	ldbu	r3,-26(fp)
 200a920:	00800044 	movi	r2,1
 200a924:	10c4983a 	sll	r2,r2,r3
 200a928:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 200a92c:	e0fff943 	ldbu	r3,-27(fp)
 200a930:	00800044 	movi	r2,1
 200a934:	10c4983a 	sll	r2,r2,r3
 200a938:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 200a93c:	e0bffd03 	ldbu	r2,-12(fp)
 200a940:	00c080b4 	movhi	r3,514
 200a944:	18e46304 	addi	r3,r3,-28276
 200a948:	1085883a 	add	r2,r2,r2
 200a94c:	1085883a 	add	r2,r2,r2
 200a950:	10c5883a 	add	r2,r2,r3
 200a954:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 200a958:	e0bffe03 	ldbu	r2,-8(fp)
 200a95c:	00c080b4 	movhi	r3,514
 200a960:	18e46304 	addi	r3,r3,-28276
 200a964:	1085883a 	add	r2,r2,r2
 200a968:	1085883a 	add	r2,r2,r2
 200a96c:	10c7883a 	add	r3,r2,r3
 200a970:	e0bffa17 	ldw	r2,-24(fp)
 200a974:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 200a978:	e0bffa17 	ldw	r2,-24(fp)
 200a97c:	10800d03 	ldbu	r2,52(r2)
 200a980:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 200a984:	e0bffa17 	ldw	r2,-24(fp)
 200a988:	10800d83 	ldbu	r2,54(r2)
 200a98c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 200a990:	e0bffa17 	ldw	r2,-24(fp)
 200a994:	10800d43 	ldbu	r2,53(r2)
 200a998:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 200a99c:	e0fff903 	ldbu	r3,-28(fp)
 200a9a0:	00808074 	movhi	r2,513
 200a9a4:	108fd644 	addi	r2,r2,16217
 200a9a8:	10c5883a 	add	r2,r2,r3
 200a9ac:	10c00003 	ldbu	r3,0(r2)
 200a9b0:	e0bff803 	ldbu	r2,-32(fp)
 200a9b4:	1884703a 	and	r2,r3,r2
 200a9b8:	10803fcc 	andi	r2,r2,255
 200a9bc:	1005003a 	cmpeq	r2,r2,zero
 200a9c0:	1000381e 	bne	r2,zero,200aaa4 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 200a9c4:	e13ff903 	ldbu	r4,-28(fp)
 200a9c8:	e0fff903 	ldbu	r3,-28(fp)
 200a9cc:	00808074 	movhi	r2,513
 200a9d0:	108fd644 	addi	r2,r2,16217
 200a9d4:	10c5883a 	add	r2,r2,r3
 200a9d8:	10800003 	ldbu	r2,0(r2)
 200a9dc:	1007883a 	mov	r3,r2
 200a9e0:	e0bff803 	ldbu	r2,-32(fp)
 200a9e4:	0084303a 	nor	r2,zero,r2
 200a9e8:	1884703a 	and	r2,r3,r2
 200a9ec:	1007883a 	mov	r3,r2
 200a9f0:	00808074 	movhi	r2,513
 200a9f4:	108fd644 	addi	r2,r2,16217
 200a9f8:	1105883a 	add	r2,r2,r4
 200a9fc:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 200aa00:	e0fff903 	ldbu	r3,-28(fp)
 200aa04:	00808074 	movhi	r2,513
 200aa08:	108fd644 	addi	r2,r2,16217
 200aa0c:	10c5883a 	add	r2,r2,r3
 200aa10:	10800003 	ldbu	r2,0(r2)
 200aa14:	10803fcc 	andi	r2,r2,255
 200aa18:	1004c03a 	cmpne	r2,r2,zero
 200aa1c:	10000b1e 	bne	r2,zero,200aa4c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 200aa20:	e0bff843 	ldbu	r2,-31(fp)
 200aa24:	0084303a 	nor	r2,zero,r2
 200aa28:	1007883a 	mov	r3,r2
 200aa2c:	00808074 	movhi	r2,513
 200aa30:	108fd604 	addi	r2,r2,16216
 200aa34:	10800003 	ldbu	r2,0(r2)
 200aa38:	1884703a 	and	r2,r3,r2
 200aa3c:	1007883a 	mov	r3,r2
 200aa40:	00808074 	movhi	r2,513
 200aa44:	108fd604 	addi	r2,r2,16216
 200aa48:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 200aa4c:	00808074 	movhi	r2,513
 200aa50:	108fd604 	addi	r2,r2,16216
 200aa54:	10c00003 	ldbu	r3,0(r2)
 200aa58:	e0bff8c3 	ldbu	r2,-29(fp)
 200aa5c:	1884b03a 	or	r2,r3,r2
 200aa60:	1007883a 	mov	r3,r2
 200aa64:	00808074 	movhi	r2,513
 200aa68:	108fd604 	addi	r2,r2,16216
 200aa6c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 200aa70:	e13ff983 	ldbu	r4,-26(fp)
 200aa74:	e0fff983 	ldbu	r3,-26(fp)
 200aa78:	00808074 	movhi	r2,513
 200aa7c:	108fd644 	addi	r2,r2,16217
 200aa80:	10c5883a 	add	r2,r2,r3
 200aa84:	10c00003 	ldbu	r3,0(r2)
 200aa88:	e0bff883 	ldbu	r2,-30(fp)
 200aa8c:	1884b03a 	or	r2,r3,r2
 200aa90:	1007883a 	mov	r3,r2
 200aa94:	00808074 	movhi	r2,513
 200aa98:	108fd644 	addi	r2,r2,16217
 200aa9c:	1105883a 	add	r2,r2,r4
 200aaa0:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 200aaa4:	e0bffa17 	ldw	r2,-24(fp)
 200aaa8:	10800717 	ldw	r2,28(r2)
 200aaac:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 200aab0:	e0bffc17 	ldw	r2,-16(fp)
 200aab4:	1005003a 	cmpeq	r2,r2,zero
 200aab8:	1000341e 	bne	r2,zero,200ab8c <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 200aabc:	e13ff903 	ldbu	r4,-28(fp)
 200aac0:	e0fff903 	ldbu	r3,-28(fp)
 200aac4:	e0bffc17 	ldw	r2,-16(fp)
 200aac8:	1885883a 	add	r2,r3,r2
 200aacc:	10800204 	addi	r2,r2,8
 200aad0:	108000c3 	ldbu	r2,3(r2)
 200aad4:	1007883a 	mov	r3,r2
 200aad8:	e0bff803 	ldbu	r2,-32(fp)
 200aadc:	0084303a 	nor	r2,zero,r2
 200aae0:	1884703a 	and	r2,r3,r2
 200aae4:	1007883a 	mov	r3,r2
 200aae8:	e0bffc17 	ldw	r2,-16(fp)
 200aaec:	2085883a 	add	r2,r4,r2
 200aaf0:	10800204 	addi	r2,r2,8
 200aaf4:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 200aaf8:	e0fff903 	ldbu	r3,-28(fp)
 200aafc:	e0bffc17 	ldw	r2,-16(fp)
 200ab00:	1885883a 	add	r2,r3,r2
 200ab04:	10800204 	addi	r2,r2,8
 200ab08:	108000c3 	ldbu	r2,3(r2)
 200ab0c:	10803fcc 	andi	r2,r2,255
 200ab10:	1004c03a 	cmpne	r2,r2,zero
 200ab14:	1000091e 	bne	r2,zero,200ab3c <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 200ab18:	e0bffc17 	ldw	r2,-16(fp)
 200ab1c:	10800283 	ldbu	r2,10(r2)
 200ab20:	1007883a 	mov	r3,r2
 200ab24:	e0bff843 	ldbu	r2,-31(fp)
 200ab28:	0084303a 	nor	r2,zero,r2
 200ab2c:	1884703a 	and	r2,r3,r2
 200ab30:	1007883a 	mov	r3,r2
 200ab34:	e0bffc17 	ldw	r2,-16(fp)
 200ab38:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 200ab3c:	e0bffc17 	ldw	r2,-16(fp)
 200ab40:	10c00283 	ldbu	r3,10(r2)
 200ab44:	e0bff8c3 	ldbu	r2,-29(fp)
 200ab48:	1884b03a 	or	r2,r3,r2
 200ab4c:	1007883a 	mov	r3,r2
 200ab50:	e0bffc17 	ldw	r2,-16(fp)
 200ab54:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 200ab58:	e13ff983 	ldbu	r4,-26(fp)
 200ab5c:	e0fff983 	ldbu	r3,-26(fp)
 200ab60:	e0bffc17 	ldw	r2,-16(fp)
 200ab64:	1885883a 	add	r2,r3,r2
 200ab68:	10800204 	addi	r2,r2,8
 200ab6c:	10c000c3 	ldbu	r3,3(r2)
 200ab70:	e0bff883 	ldbu	r2,-30(fp)
 200ab74:	1884b03a 	or	r2,r3,r2
 200ab78:	1007883a 	mov	r3,r2
 200ab7c:	e0bffc17 	ldw	r2,-16(fp)
 200ab80:	2085883a 	add	r2,r4,r2
 200ab84:	10800204 	addi	r2,r2,8
 200ab88:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 200ab8c:	e0bffa17 	ldw	r2,-24(fp)
 200ab90:	10800817 	ldw	r2,32(r2)
 200ab94:	1005003a 	cmpeq	r2,r2,zero
 200ab98:	1000441e 	bne	r2,zero,200acac <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 200ab9c:	e0bffa17 	ldw	r2,-24(fp)
 200aba0:	10800817 	ldw	r2,32(r2)
 200aba4:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 200aba8:	e0bffb17 	ldw	r2,-20(fp)
 200abac:	10800017 	ldw	r2,0(r2)
 200abb0:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 200abb4:	00003a06 	br	200aca0 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 200abb8:	e13ff903 	ldbu	r4,-28(fp)
 200abbc:	e0fff903 	ldbu	r3,-28(fp)
 200abc0:	e0bffc17 	ldw	r2,-16(fp)
 200abc4:	1885883a 	add	r2,r3,r2
 200abc8:	10800204 	addi	r2,r2,8
 200abcc:	108000c3 	ldbu	r2,3(r2)
 200abd0:	1007883a 	mov	r3,r2
 200abd4:	e0bff803 	ldbu	r2,-32(fp)
 200abd8:	0084303a 	nor	r2,zero,r2
 200abdc:	1884703a 	and	r2,r3,r2
 200abe0:	1007883a 	mov	r3,r2
 200abe4:	e0bffc17 	ldw	r2,-16(fp)
 200abe8:	2085883a 	add	r2,r4,r2
 200abec:	10800204 	addi	r2,r2,8
 200abf0:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 200abf4:	e0fff903 	ldbu	r3,-28(fp)
 200abf8:	e0bffc17 	ldw	r2,-16(fp)
 200abfc:	1885883a 	add	r2,r3,r2
 200ac00:	10800204 	addi	r2,r2,8
 200ac04:	108000c3 	ldbu	r2,3(r2)
 200ac08:	10803fcc 	andi	r2,r2,255
 200ac0c:	1004c03a 	cmpne	r2,r2,zero
 200ac10:	1000091e 	bne	r2,zero,200ac38 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 200ac14:	e0bffc17 	ldw	r2,-16(fp)
 200ac18:	10800283 	ldbu	r2,10(r2)
 200ac1c:	1007883a 	mov	r3,r2
 200ac20:	e0bff843 	ldbu	r2,-31(fp)
 200ac24:	0084303a 	nor	r2,zero,r2
 200ac28:	1884703a 	and	r2,r3,r2
 200ac2c:	1007883a 	mov	r3,r2
 200ac30:	e0bffc17 	ldw	r2,-16(fp)
 200ac34:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 200ac38:	e0bffc17 	ldw	r2,-16(fp)
 200ac3c:	10c00283 	ldbu	r3,10(r2)
 200ac40:	e0bff8c3 	ldbu	r2,-29(fp)
 200ac44:	1884b03a 	or	r2,r3,r2
 200ac48:	1007883a 	mov	r3,r2
 200ac4c:	e0bffc17 	ldw	r2,-16(fp)
 200ac50:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 200ac54:	e13ff983 	ldbu	r4,-26(fp)
 200ac58:	e0fff983 	ldbu	r3,-26(fp)
 200ac5c:	e0bffc17 	ldw	r2,-16(fp)
 200ac60:	1885883a 	add	r2,r3,r2
 200ac64:	10800204 	addi	r2,r2,8
 200ac68:	10c000c3 	ldbu	r3,3(r2)
 200ac6c:	e0bff883 	ldbu	r2,-30(fp)
 200ac70:	1884b03a 	or	r2,r3,r2
 200ac74:	1007883a 	mov	r3,r2
 200ac78:	e0bffc17 	ldw	r2,-16(fp)
 200ac7c:	2085883a 	add	r2,r4,r2
 200ac80:	10800204 	addi	r2,r2,8
 200ac84:	10c000c5 	stb	r3,3(r2)
            pevents++;
 200ac88:	e0bffb17 	ldw	r2,-20(fp)
 200ac8c:	10800104 	addi	r2,r2,4
 200ac90:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 200ac94:	e0bffb17 	ldw	r2,-20(fp)
 200ac98:	10800017 	ldw	r2,0(r2)
 200ac9c:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 200aca0:	e0bffc17 	ldw	r2,-16(fp)
 200aca4:	1004c03a 	cmpne	r2,r2,zero
 200aca8:	103fc31e 	bne	r2,zero,200abb8 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 200acac:	e0fffa17 	ldw	r3,-24(fp)
 200acb0:	e0bffe03 	ldbu	r2,-8(fp)
 200acb4:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 200acb8:	e0fffa17 	ldw	r3,-24(fp)
 200acbc:	e0bff983 	ldbu	r2,-26(fp)
 200acc0:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 200acc4:	e0fffa17 	ldw	r3,-24(fp)
 200acc8:	e0bff943 	ldbu	r2,-27(fp)
 200accc:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 200acd0:	e0fffa17 	ldw	r3,-24(fp)
 200acd4:	e0bff8c3 	ldbu	r2,-29(fp)
 200acd8:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 200acdc:	e0fffa17 	ldw	r3,-24(fp)
 200ace0:	e0bff883 	ldbu	r2,-30(fp)
 200ace4:	18800d45 	stb	r2,53(r3)
 200ace8:	e0bff717 	ldw	r2,-36(fp)
 200acec:	e0bff215 	stw	r2,-56(fp)
 200acf0:	e0bff217 	ldw	r2,-56(fp)
 200acf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 200acf8:	00808074 	movhi	r2,513
 200acfc:	108fca44 	addi	r2,r2,16169
 200ad00:	10800003 	ldbu	r2,0(r2)
 200ad04:	10803fcc 	andi	r2,r2,255
 200ad08:	10800058 	cmpnei	r2,r2,1
 200ad0c:	1000011e 	bne	r2,zero,200ad14 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 200ad10:	2005f080 	call	2005f08 <OS_Sched>
    }
    return (OS_ERR_NONE);
 200ad14:	e03fff15 	stw	zero,-4(fp)
 200ad18:	e0bfff17 	ldw	r2,-4(fp)
}
 200ad1c:	e037883a 	mov	sp,fp
 200ad20:	dfc00117 	ldw	ra,4(sp)
 200ad24:	df000017 	ldw	fp,0(sp)
 200ad28:	dec00204 	addi	sp,sp,8
 200ad2c:	f800283a 	ret

0200ad30 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 200ad30:	deffed04 	addi	sp,sp,-76
 200ad34:	dfc01215 	stw	ra,72(sp)
 200ad38:	df001115 	stw	fp,68(sp)
 200ad3c:	df001104 	addi	fp,sp,68
 200ad40:	e13ffb15 	stw	r4,-20(fp)
 200ad44:	e17ffc15 	stw	r5,-16(fp)
 200ad48:	e1bffd15 	stw	r6,-12(fp)
 200ad4c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 200ad50:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 200ad54:	e0bffe03 	ldbu	r2,-8(fp)
 200ad58:	10800570 	cmpltui	r2,r2,21
 200ad5c:	1000031e 	bne	r2,zero,200ad6c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 200ad60:	00800a84 	movi	r2,42
 200ad64:	e0bfff15 	stw	r2,-4(fp)
 200ad68:	00006006 	br	200aeec <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ad6c:	0005303a 	rdctl	r2,status
 200ad70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ad74:	e0fff717 	ldw	r3,-36(fp)
 200ad78:	00bfff84 	movi	r2,-2
 200ad7c:	1884703a 	and	r2,r3,r2
 200ad80:	1001703a 	wrctl	status,r2
  
  return context;
 200ad84:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200ad88:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 200ad8c:	00808074 	movhi	r2,513
 200ad90:	108fd804 	addi	r2,r2,16224
 200ad94:	10800003 	ldbu	r2,0(r2)
 200ad98:	10803fcc 	andi	r2,r2,255
 200ad9c:	1005003a 	cmpeq	r2,r2,zero
 200ada0:	1000071e 	bne	r2,zero,200adc0 <OSTaskCreate+0x90>
 200ada4:	e0bff817 	ldw	r2,-32(fp)
 200ada8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200adac:	e0bff617 	ldw	r2,-40(fp)
 200adb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 200adb4:	00800f04 	movi	r2,60
 200adb8:	e0bfff15 	stw	r2,-4(fp)
 200adbc:	00004b06 	br	200aeec <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 200adc0:	e0bffe03 	ldbu	r2,-8(fp)
 200adc4:	00c080b4 	movhi	r3,514
 200adc8:	18e46304 	addi	r3,r3,-28276
 200adcc:	1085883a 	add	r2,r2,r2
 200add0:	1085883a 	add	r2,r2,r2
 200add4:	10c5883a 	add	r2,r2,r3
 200add8:	10800017 	ldw	r2,0(r2)
 200addc:	1004c03a 	cmpne	r2,r2,zero
 200ade0:	10003c1e 	bne	r2,zero,200aed4 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 200ade4:	e0bffe03 	ldbu	r2,-8(fp)
 200ade8:	00c080b4 	movhi	r3,514
 200adec:	18e46304 	addi	r3,r3,-28276
 200adf0:	1085883a 	add	r2,r2,r2
 200adf4:	1085883a 	add	r2,r2,r2
 200adf8:	10c7883a 	add	r3,r2,r3
 200adfc:	00800044 	movi	r2,1
 200ae00:	18800015 	stw	r2,0(r3)
 200ae04:	e0bff817 	ldw	r2,-32(fp)
 200ae08:	e0bff515 	stw	r2,-44(fp)
 200ae0c:	e0bff517 	ldw	r2,-44(fp)
 200ae10:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 200ae14:	e13ffb17 	ldw	r4,-20(fp)
 200ae18:	e17ffc17 	ldw	r5,-16(fp)
 200ae1c:	e1bffd17 	ldw	r6,-12(fp)
 200ae20:	000f883a 	mov	r7,zero
 200ae24:	200f5600 	call	200f560 <OSTaskStkInit>
 200ae28:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 200ae2c:	e13ffe03 	ldbu	r4,-8(fp)
 200ae30:	d8000015 	stw	zero,0(sp)
 200ae34:	d8000115 	stw	zero,4(sp)
 200ae38:	d8000215 	stw	zero,8(sp)
 200ae3c:	e17ffa17 	ldw	r5,-24(fp)
 200ae40:	000d883a 	mov	r6,zero
 200ae44:	000f883a 	mov	r7,zero
 200ae48:	20063100 	call	2006310 <OS_TCBInit>
 200ae4c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 200ae50:	e0bff903 	ldbu	r2,-28(fp)
 200ae54:	1004c03a 	cmpne	r2,r2,zero
 200ae58:	1000081e 	bne	r2,zero,200ae7c <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 200ae5c:	00808074 	movhi	r2,513
 200ae60:	108fca44 	addi	r2,r2,16169
 200ae64:	10800003 	ldbu	r2,0(r2)
 200ae68:	10803fcc 	andi	r2,r2,255
 200ae6c:	10800058 	cmpnei	r2,r2,1
 200ae70:	1000151e 	bne	r2,zero,200aec8 <OSTaskCreate+0x198>
                OS_Sched();
 200ae74:	2005f080 	call	2005f08 <OS_Sched>
 200ae78:	00001306 	br	200aec8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ae7c:	0005303a 	rdctl	r2,status
 200ae80:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ae84:	e0fff417 	ldw	r3,-48(fp)
 200ae88:	00bfff84 	movi	r2,-2
 200ae8c:	1884703a 	and	r2,r3,r2
 200ae90:	1001703a 	wrctl	status,r2
  
  return context;
 200ae94:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 200ae98:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 200ae9c:	e0bffe03 	ldbu	r2,-8(fp)
 200aea0:	00c080b4 	movhi	r3,514
 200aea4:	18e46304 	addi	r3,r3,-28276
 200aea8:	1085883a 	add	r2,r2,r2
 200aeac:	1085883a 	add	r2,r2,r2
 200aeb0:	10c5883a 	add	r2,r2,r3
 200aeb4:	10000015 	stw	zero,0(r2)
 200aeb8:	e0bff817 	ldw	r2,-32(fp)
 200aebc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200aec0:	e0bff317 	ldw	r2,-52(fp)
 200aec4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 200aec8:	e0bff903 	ldbu	r2,-28(fp)
 200aecc:	e0bfff15 	stw	r2,-4(fp)
 200aed0:	00000606 	br	200aeec <OSTaskCreate+0x1bc>
 200aed4:	e0bff817 	ldw	r2,-32(fp)
 200aed8:	e0bff215 	stw	r2,-56(fp)
 200aedc:	e0bff217 	ldw	r2,-56(fp)
 200aee0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 200aee4:	00800a04 	movi	r2,40
 200aee8:	e0bfff15 	stw	r2,-4(fp)
 200aeec:	e0bfff17 	ldw	r2,-4(fp)
}
 200aef0:	e037883a 	mov	sp,fp
 200aef4:	dfc00117 	ldw	ra,4(sp)
 200aef8:	df000017 	ldw	fp,0(sp)
 200aefc:	dec00204 	addi	sp,sp,8
 200af00:	f800283a 	ret

0200af04 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 200af04:	deffeb04 	addi	sp,sp,-84
 200af08:	dfc01415 	stw	ra,80(sp)
 200af0c:	df001315 	stw	fp,76(sp)
 200af10:	df001304 	addi	fp,sp,76
 200af14:	e13ff915 	stw	r4,-28(fp)
 200af18:	e17ffa15 	stw	r5,-24(fp)
 200af1c:	e1bffb15 	stw	r6,-20(fp)
 200af20:	e0800217 	ldw	r2,8(fp)
 200af24:	e0c00617 	ldw	r3,24(fp)
 200af28:	e1fffc05 	stb	r7,-16(fp)
 200af2c:	e0bffd0d 	sth	r2,-12(fp)
 200af30:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 200af34:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 200af38:	e0bffc03 	ldbu	r2,-16(fp)
 200af3c:	10800570 	cmpltui	r2,r2,21
 200af40:	1000031e 	bne	r2,zero,200af50 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 200af44:	00800a84 	movi	r2,42
 200af48:	e0bfff15 	stw	r2,-4(fp)
 200af4c:	00006706 	br	200b0ec <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200af50:	0005303a 	rdctl	r2,status
 200af54:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200af58:	e0fff517 	ldw	r3,-44(fp)
 200af5c:	00bfff84 	movi	r2,-2
 200af60:	1884703a 	and	r2,r3,r2
 200af64:	1001703a 	wrctl	status,r2
  
  return context;
 200af68:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200af6c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 200af70:	00808074 	movhi	r2,513
 200af74:	108fd804 	addi	r2,r2,16224
 200af78:	10800003 	ldbu	r2,0(r2)
 200af7c:	10803fcc 	andi	r2,r2,255
 200af80:	1005003a 	cmpeq	r2,r2,zero
 200af84:	1000071e 	bne	r2,zero,200afa4 <OSTaskCreateExt+0xa0>
 200af88:	e0bff617 	ldw	r2,-40(fp)
 200af8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200af90:	e0bff417 	ldw	r2,-48(fp)
 200af94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 200af98:	00800f04 	movi	r2,60
 200af9c:	e0bfff15 	stw	r2,-4(fp)
 200afa0:	00005206 	br	200b0ec <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 200afa4:	e0bffc03 	ldbu	r2,-16(fp)
 200afa8:	00c080b4 	movhi	r3,514
 200afac:	18e46304 	addi	r3,r3,-28276
 200afb0:	1085883a 	add	r2,r2,r2
 200afb4:	1085883a 	add	r2,r2,r2
 200afb8:	10c5883a 	add	r2,r2,r3
 200afbc:	10800017 	ldw	r2,0(r2)
 200afc0:	1004c03a 	cmpne	r2,r2,zero
 200afc4:	1000431e 	bne	r2,zero,200b0d4 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 200afc8:	e0bffc03 	ldbu	r2,-16(fp)
 200afcc:	00c080b4 	movhi	r3,514
 200afd0:	18e46304 	addi	r3,r3,-28276
 200afd4:	1085883a 	add	r2,r2,r2
 200afd8:	1085883a 	add	r2,r2,r2
 200afdc:	10c7883a 	add	r3,r2,r3
 200afe0:	00800044 	movi	r2,1
 200afe4:	18800015 	stw	r2,0(r3)
 200afe8:	e0bff617 	ldw	r2,-40(fp)
 200afec:	e0bff315 	stw	r2,-52(fp)
 200aff0:	e0bff317 	ldw	r2,-52(fp)
 200aff4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 200aff8:	e1bffe0b 	ldhu	r6,-8(fp)
 200affc:	e1000317 	ldw	r4,12(fp)
 200b000:	e1400417 	ldw	r5,16(fp)
 200b004:	200c1800 	call	200c180 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 200b008:	e1fffe0b 	ldhu	r7,-8(fp)
 200b00c:	e13ff917 	ldw	r4,-28(fp)
 200b010:	e17ffa17 	ldw	r5,-24(fp)
 200b014:	e1bffb17 	ldw	r6,-20(fp)
 200b018:	200f5600 	call	200f560 <OSTaskStkInit>
 200b01c:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 200b020:	e13ffc03 	ldbu	r4,-16(fp)
 200b024:	e1fffd0b 	ldhu	r7,-12(fp)
 200b028:	e0fffe0b 	ldhu	r3,-8(fp)
 200b02c:	e0800417 	ldw	r2,16(fp)
 200b030:	d8800015 	stw	r2,0(sp)
 200b034:	e0800517 	ldw	r2,20(fp)
 200b038:	d8800115 	stw	r2,4(sp)
 200b03c:	d8c00215 	stw	r3,8(sp)
 200b040:	e17ff817 	ldw	r5,-32(fp)
 200b044:	e1800317 	ldw	r6,12(fp)
 200b048:	20063100 	call	2006310 <OS_TCBInit>
 200b04c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 200b050:	e0bff703 	ldbu	r2,-36(fp)
 200b054:	1004c03a 	cmpne	r2,r2,zero
 200b058:	1000081e 	bne	r2,zero,200b07c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 200b05c:	00808074 	movhi	r2,513
 200b060:	108fca44 	addi	r2,r2,16169
 200b064:	10800003 	ldbu	r2,0(r2)
 200b068:	10803fcc 	andi	r2,r2,255
 200b06c:	10800058 	cmpnei	r2,r2,1
 200b070:	1000151e 	bne	r2,zero,200b0c8 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 200b074:	2005f080 	call	2005f08 <OS_Sched>
 200b078:	00001306 	br	200b0c8 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b07c:	0005303a 	rdctl	r2,status
 200b080:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b084:	e0fff217 	ldw	r3,-56(fp)
 200b088:	00bfff84 	movi	r2,-2
 200b08c:	1884703a 	and	r2,r3,r2
 200b090:	1001703a 	wrctl	status,r2
  
  return context;
 200b094:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 200b098:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 200b09c:	e0bffc03 	ldbu	r2,-16(fp)
 200b0a0:	00c080b4 	movhi	r3,514
 200b0a4:	18e46304 	addi	r3,r3,-28276
 200b0a8:	1085883a 	add	r2,r2,r2
 200b0ac:	1085883a 	add	r2,r2,r2
 200b0b0:	10c5883a 	add	r2,r2,r3
 200b0b4:	10000015 	stw	zero,0(r2)
 200b0b8:	e0bff617 	ldw	r2,-40(fp)
 200b0bc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b0c0:	e0bff117 	ldw	r2,-60(fp)
 200b0c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 200b0c8:	e0bff703 	ldbu	r2,-36(fp)
 200b0cc:	e0bfff15 	stw	r2,-4(fp)
 200b0d0:	00000606 	br	200b0ec <OSTaskCreateExt+0x1e8>
 200b0d4:	e0bff617 	ldw	r2,-40(fp)
 200b0d8:	e0bff015 	stw	r2,-64(fp)
 200b0dc:	e0bff017 	ldw	r2,-64(fp)
 200b0e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 200b0e4:	00800a04 	movi	r2,40
 200b0e8:	e0bfff15 	stw	r2,-4(fp)
 200b0ec:	e0bfff17 	ldw	r2,-4(fp)
}
 200b0f0:	e037883a 	mov	sp,fp
 200b0f4:	dfc00117 	ldw	ra,4(sp)
 200b0f8:	df000017 	ldw	fp,0(sp)
 200b0fc:	dec00204 	addi	sp,sp,8
 200b100:	f800283a 	ret

0200b104 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 200b104:	defff304 	addi	sp,sp,-52
 200b108:	dfc00c15 	stw	ra,48(sp)
 200b10c:	df000b15 	stw	fp,44(sp)
 200b110:	df000b04 	addi	fp,sp,44
 200b114:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 200b118:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 200b11c:	00808074 	movhi	r2,513
 200b120:	108fd804 	addi	r2,r2,16224
 200b124:	10800003 	ldbu	r2,0(r2)
 200b128:	10803fcc 	andi	r2,r2,255
 200b12c:	1005003a 	cmpeq	r2,r2,zero
 200b130:	1000031e 	bne	r2,zero,200b140 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 200b134:	00801004 	movi	r2,64
 200b138:	e0bfff15 	stw	r2,-4(fp)
 200b13c:	0000ee06 	br	200b4f8 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 200b140:	e0bffe03 	ldbu	r2,-8(fp)
 200b144:	10800518 	cmpnei	r2,r2,20
 200b148:	1000031e 	bne	r2,zero,200b158 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 200b14c:	00800f84 	movi	r2,62
 200b150:	e0bfff15 	stw	r2,-4(fp)
 200b154:	0000e806 	br	200b4f8 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 200b158:	e0bffe03 	ldbu	r2,-8(fp)
 200b15c:	10800530 	cmpltui	r2,r2,20
 200b160:	1000061e 	bne	r2,zero,200b17c <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 200b164:	e0bffe03 	ldbu	r2,-8(fp)
 200b168:	10803fe0 	cmpeqi	r2,r2,255
 200b16c:	1000031e 	bne	r2,zero,200b17c <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 200b170:	00800a84 	movi	r2,42
 200b174:	e0bfff15 	stw	r2,-4(fp)
 200b178:	0000df06 	br	200b4f8 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b17c:	0005303a 	rdctl	r2,status
 200b180:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b184:	e0fffa17 	ldw	r3,-24(fp)
 200b188:	00bfff84 	movi	r2,-2
 200b18c:	1884703a 	and	r2,r3,r2
 200b190:	1001703a 	wrctl	status,r2
  
  return context;
 200b194:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 200b198:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 200b19c:	e0bffe03 	ldbu	r2,-8(fp)
 200b1a0:	10803fd8 	cmpnei	r2,r2,255
 200b1a4:	1000051e 	bne	r2,zero,200b1bc <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 200b1a8:	00808074 	movhi	r2,513
 200b1ac:	108fd904 	addi	r2,r2,16228
 200b1b0:	10800017 	ldw	r2,0(r2)
 200b1b4:	10800c83 	ldbu	r2,50(r2)
 200b1b8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200b1bc:	e0bffe03 	ldbu	r2,-8(fp)
 200b1c0:	00c080b4 	movhi	r3,514
 200b1c4:	18e46304 	addi	r3,r3,-28276
 200b1c8:	1085883a 	add	r2,r2,r2
 200b1cc:	1085883a 	add	r2,r2,r2
 200b1d0:	10c5883a 	add	r2,r2,r3
 200b1d4:	10800017 	ldw	r2,0(r2)
 200b1d8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 200b1dc:	e0bffc17 	ldw	r2,-16(fp)
 200b1e0:	1004c03a 	cmpne	r2,r2,zero
 200b1e4:	1000071e 	bne	r2,zero,200b204 <OSTaskDel+0x100>
 200b1e8:	e0bffb17 	ldw	r2,-20(fp)
 200b1ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b1f0:	e0bff917 	ldw	r2,-28(fp)
 200b1f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200b1f8:	008010c4 	movi	r2,67
 200b1fc:	e0bfff15 	stw	r2,-4(fp)
 200b200:	0000bd06 	br	200b4f8 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 200b204:	e0bffc17 	ldw	r2,-16(fp)
 200b208:	10800058 	cmpnei	r2,r2,1
 200b20c:	1000071e 	bne	r2,zero,200b22c <OSTaskDel+0x128>
 200b210:	e0bffb17 	ldw	r2,-20(fp)
 200b214:	e0bff815 	stw	r2,-32(fp)
 200b218:	e0bff817 	ldw	r2,-32(fp)
 200b21c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 200b220:	00800f44 	movi	r2,61
 200b224:	e0bfff15 	stw	r2,-4(fp)
 200b228:	0000b306 	br	200b4f8 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 200b22c:	e0bffc17 	ldw	r2,-16(fp)
 200b230:	10800d03 	ldbu	r2,52(r2)
 200b234:	11003fcc 	andi	r4,r2,255
 200b238:	e0bffc17 	ldw	r2,-16(fp)
 200b23c:	10800d03 	ldbu	r2,52(r2)
 200b240:	10c03fcc 	andi	r3,r2,255
 200b244:	00808074 	movhi	r2,513
 200b248:	108fd644 	addi	r2,r2,16217
 200b24c:	10c5883a 	add	r2,r2,r3
 200b250:	10800003 	ldbu	r2,0(r2)
 200b254:	1007883a 	mov	r3,r2
 200b258:	e0bffc17 	ldw	r2,-16(fp)
 200b25c:	10800d43 	ldbu	r2,53(r2)
 200b260:	0084303a 	nor	r2,zero,r2
 200b264:	1884703a 	and	r2,r3,r2
 200b268:	1007883a 	mov	r3,r2
 200b26c:	00808074 	movhi	r2,513
 200b270:	108fd644 	addi	r2,r2,16217
 200b274:	1105883a 	add	r2,r2,r4
 200b278:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 200b27c:	e0bffc17 	ldw	r2,-16(fp)
 200b280:	10800d03 	ldbu	r2,52(r2)
 200b284:	10c03fcc 	andi	r3,r2,255
 200b288:	00808074 	movhi	r2,513
 200b28c:	108fd644 	addi	r2,r2,16217
 200b290:	10c5883a 	add	r2,r2,r3
 200b294:	10800003 	ldbu	r2,0(r2)
 200b298:	10803fcc 	andi	r2,r2,255
 200b29c:	1004c03a 	cmpne	r2,r2,zero
 200b2a0:	10000c1e 	bne	r2,zero,200b2d4 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 200b2a4:	e0bffc17 	ldw	r2,-16(fp)
 200b2a8:	10800d83 	ldbu	r2,54(r2)
 200b2ac:	0084303a 	nor	r2,zero,r2
 200b2b0:	1007883a 	mov	r3,r2
 200b2b4:	00808074 	movhi	r2,513
 200b2b8:	108fd604 	addi	r2,r2,16216
 200b2bc:	10800003 	ldbu	r2,0(r2)
 200b2c0:	1884703a 	and	r2,r3,r2
 200b2c4:	1007883a 	mov	r3,r2
 200b2c8:	00808074 	movhi	r2,513
 200b2cc:	108fd604 	addi	r2,r2,16216
 200b2d0:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 200b2d4:	e0bffc17 	ldw	r2,-16(fp)
 200b2d8:	10800717 	ldw	r2,28(r2)
 200b2dc:	1005003a 	cmpeq	r2,r2,zero
 200b2e0:	1000041e 	bne	r2,zero,200b2f4 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 200b2e4:	e0bffc17 	ldw	r2,-16(fp)
 200b2e8:	11400717 	ldw	r5,28(r2)
 200b2ec:	e13ffc17 	ldw	r4,-16(fp)
 200b2f0:	20058c00 	call	20058c0 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 200b2f4:	e0bffc17 	ldw	r2,-16(fp)
 200b2f8:	10800817 	ldw	r2,32(r2)
 200b2fc:	1005003a 	cmpeq	r2,r2,zero
 200b300:	1000041e 	bne	r2,zero,200b314 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 200b304:	e0bffc17 	ldw	r2,-16(fp)
 200b308:	11400817 	ldw	r5,32(r2)
 200b30c:	e13ffc17 	ldw	r4,-16(fp)
 200b310:	20059780 	call	2005978 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 200b314:	e0bffc17 	ldw	r2,-16(fp)
 200b318:	10800a17 	ldw	r2,40(r2)
 200b31c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 200b320:	e0bffd17 	ldw	r2,-12(fp)
 200b324:	1005003a 	cmpeq	r2,r2,zero
 200b328:	1000021e 	bne	r2,zero,200b334 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 200b32c:	e13ffd17 	ldw	r4,-12(fp)
 200b330:	200800c0 	call	200800c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 200b334:	e0bffc17 	ldw	r2,-16(fp)
 200b338:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 200b33c:	e0bffc17 	ldw	r2,-16(fp)
 200b340:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 200b344:	e0bffc17 	ldw	r2,-16(fp)
 200b348:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 200b34c:	00808074 	movhi	r2,513
 200b350:	108fca04 	addi	r2,r2,16168
 200b354:	10800003 	ldbu	r2,0(r2)
 200b358:	10803fcc 	andi	r2,r2,255
 200b35c:	10803fe0 	cmpeqi	r2,r2,255
 200b360:	1000081e 	bne	r2,zero,200b384 <OSTaskDel+0x280>
        OSLockNesting++;
 200b364:	00808074 	movhi	r2,513
 200b368:	108fca04 	addi	r2,r2,16168
 200b36c:	10800003 	ldbu	r2,0(r2)
 200b370:	10800044 	addi	r2,r2,1
 200b374:	1007883a 	mov	r3,r2
 200b378:	00808074 	movhi	r2,513
 200b37c:	108fca04 	addi	r2,r2,16168
 200b380:	10c00005 	stb	r3,0(r2)
 200b384:	e0bffb17 	ldw	r2,-20(fp)
 200b388:	e0bff715 	stw	r2,-36(fp)
 200b38c:	e0bff717 	ldw	r2,-36(fp)
 200b390:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 200b394:	20054ac0 	call	20054ac <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b398:	0005303a 	rdctl	r2,status
 200b39c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b3a0:	e0fff617 	ldw	r3,-40(fp)
 200b3a4:	00bfff84 	movi	r2,-2
 200b3a8:	1884703a 	and	r2,r3,r2
 200b3ac:	1001703a 	wrctl	status,r2
  
  return context;
 200b3b0:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 200b3b4:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 200b3b8:	00808074 	movhi	r2,513
 200b3bc:	108fca04 	addi	r2,r2,16168
 200b3c0:	10800003 	ldbu	r2,0(r2)
 200b3c4:	10803fcc 	andi	r2,r2,255
 200b3c8:	1005003a 	cmpeq	r2,r2,zero
 200b3cc:	1000081e 	bne	r2,zero,200b3f0 <OSTaskDel+0x2ec>
        OSLockNesting--;
 200b3d0:	00808074 	movhi	r2,513
 200b3d4:	108fca04 	addi	r2,r2,16168
 200b3d8:	10800003 	ldbu	r2,0(r2)
 200b3dc:	10bfffc4 	addi	r2,r2,-1
 200b3e0:	1007883a 	mov	r3,r2
 200b3e4:	00808074 	movhi	r2,513
 200b3e8:	108fca04 	addi	r2,r2,16168
 200b3ec:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 200b3f0:	e13ffc17 	ldw	r4,-16(fp)
 200b3f4:	200f8900 	call	200f890 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 200b3f8:	00808074 	movhi	r2,513
 200b3fc:	108fd244 	addi	r2,r2,16201
 200b400:	10800003 	ldbu	r2,0(r2)
 200b404:	10bfffc4 	addi	r2,r2,-1
 200b408:	1007883a 	mov	r3,r2
 200b40c:	00808074 	movhi	r2,513
 200b410:	108fd244 	addi	r2,r2,16201
 200b414:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 200b418:	e0bffe03 	ldbu	r2,-8(fp)
 200b41c:	00c080b4 	movhi	r3,514
 200b420:	18e46304 	addi	r3,r3,-28276
 200b424:	1085883a 	add	r2,r2,r2
 200b428:	1085883a 	add	r2,r2,r2
 200b42c:	10c5883a 	add	r2,r2,r3
 200b430:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 200b434:	e0bffc17 	ldw	r2,-16(fp)
 200b438:	10800617 	ldw	r2,24(r2)
 200b43c:	1004c03a 	cmpne	r2,r2,zero
 200b440:	1000091e 	bne	r2,zero,200b468 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 200b444:	e0bffc17 	ldw	r2,-16(fp)
 200b448:	10800517 	ldw	r2,20(r2)
 200b44c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 200b450:	e0bffc17 	ldw	r2,-16(fp)
 200b454:	10c00517 	ldw	r3,20(r2)
 200b458:	00808074 	movhi	r2,513
 200b45c:	108fcd04 	addi	r2,r2,16180
 200b460:	10c00015 	stw	r3,0(r2)
 200b464:	00000a06 	br	200b490 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 200b468:	e0bffc17 	ldw	r2,-16(fp)
 200b46c:	10c00617 	ldw	r3,24(r2)
 200b470:	e0bffc17 	ldw	r2,-16(fp)
 200b474:	10800517 	ldw	r2,20(r2)
 200b478:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 200b47c:	e0bffc17 	ldw	r2,-16(fp)
 200b480:	10c00517 	ldw	r3,20(r2)
 200b484:	e0bffc17 	ldw	r2,-16(fp)
 200b488:	10800617 	ldw	r2,24(r2)
 200b48c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 200b490:	00808074 	movhi	r2,513
 200b494:	108fd104 	addi	r2,r2,16196
 200b498:	10c00017 	ldw	r3,0(r2)
 200b49c:	e0bffc17 	ldw	r2,-16(fp)
 200b4a0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 200b4a4:	00c08074 	movhi	r3,513
 200b4a8:	18cfd104 	addi	r3,r3,16196
 200b4ac:	e0bffc17 	ldw	r2,-16(fp)
 200b4b0:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 200b4b4:	e0fffc17 	ldw	r3,-16(fp)
 200b4b8:	00800fc4 	movi	r2,63
 200b4bc:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 200b4c0:	e0bffc17 	ldw	r2,-16(fp)
 200b4c4:	10001345 	stb	zero,77(r2)
 200b4c8:	e0bffb17 	ldw	r2,-20(fp)
 200b4cc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b4d0:	e0bff517 	ldw	r2,-44(fp)
 200b4d4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 200b4d8:	00808074 	movhi	r2,513
 200b4dc:	108fca44 	addi	r2,r2,16169
 200b4e0:	10800003 	ldbu	r2,0(r2)
 200b4e4:	10803fcc 	andi	r2,r2,255
 200b4e8:	10800058 	cmpnei	r2,r2,1
 200b4ec:	1000011e 	bne	r2,zero,200b4f4 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 200b4f0:	2005f080 	call	2005f08 <OS_Sched>
    }
    return (OS_ERR_NONE);
 200b4f4:	e03fff15 	stw	zero,-4(fp)
 200b4f8:	e0bfff17 	ldw	r2,-4(fp)
}
 200b4fc:	e037883a 	mov	sp,fp
 200b500:	dfc00117 	ldw	ra,4(sp)
 200b504:	df000017 	ldw	fp,0(sp)
 200b508:	dec00204 	addi	sp,sp,8
 200b50c:	f800283a 	ret

0200b510 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 200b510:	defff404 	addi	sp,sp,-48
 200b514:	df000b15 	stw	fp,44(sp)
 200b518:	df000b04 	addi	fp,sp,44
 200b51c:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200b520:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 200b524:	e0bffe03 	ldbu	r2,-8(fp)
 200b528:	10800518 	cmpnei	r2,r2,20
 200b52c:	1000031e 	bne	r2,zero,200b53c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 200b530:	00800f84 	movi	r2,62
 200b534:	e0bfff15 	stw	r2,-4(fp)
 200b538:	00004c06 	br	200b66c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 200b53c:	e0bffe03 	ldbu	r2,-8(fp)
 200b540:	10800530 	cmpltui	r2,r2,20
 200b544:	1000061e 	bne	r2,zero,200b560 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 200b548:	e0bffe03 	ldbu	r2,-8(fp)
 200b54c:	10803fe0 	cmpeqi	r2,r2,255
 200b550:	1000031e 	bne	r2,zero,200b560 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 200b554:	00800a84 	movi	r2,42
 200b558:	e0bfff15 	stw	r2,-4(fp)
 200b55c:	00004306 	br	200b66c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 200b560:	e0bffe03 	ldbu	r2,-8(fp)
 200b564:	10803fd8 	cmpnei	r2,r2,255
 200b568:	1000141e 	bne	r2,zero,200b5bc <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b56c:	0005303a 	rdctl	r2,status
 200b570:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b574:	e0fffa17 	ldw	r3,-24(fp)
 200b578:	00bfff84 	movi	r2,-2
 200b57c:	1884703a 	and	r2,r3,r2
 200b580:	1001703a 	wrctl	status,r2
  
  return context;
 200b584:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 200b588:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 200b58c:	00808074 	movhi	r2,513
 200b590:	108fd904 	addi	r2,r2,16228
 200b594:	10800017 	ldw	r2,0(r2)
 200b598:	10800dc3 	ldbu	r2,55(r2)
 200b59c:	e0bffd05 	stb	r2,-12(fp)
 200b5a0:	e0bffb17 	ldw	r2,-20(fp)
 200b5a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b5a8:	e0bff917 	ldw	r2,-28(fp)
 200b5ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 200b5b0:	e0bffd03 	ldbu	r2,-12(fp)
 200b5b4:	e0bfff15 	stw	r2,-4(fp)
 200b5b8:	00002c06 	br	200b66c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b5bc:	0005303a 	rdctl	r2,status
 200b5c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b5c4:	e0fff817 	ldw	r3,-32(fp)
 200b5c8:	00bfff84 	movi	r2,-2
 200b5cc:	1884703a 	and	r2,r3,r2
 200b5d0:	1001703a 	wrctl	status,r2
  
  return context;
 200b5d4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 200b5d8:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 200b5dc:	e0bffe03 	ldbu	r2,-8(fp)
 200b5e0:	00c080b4 	movhi	r3,514
 200b5e4:	18e46304 	addi	r3,r3,-28276
 200b5e8:	1085883a 	add	r2,r2,r2
 200b5ec:	1085883a 	add	r2,r2,r2
 200b5f0:	10c5883a 	add	r2,r2,r3
 200b5f4:	10800017 	ldw	r2,0(r2)
 200b5f8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 200b5fc:	e0bffc17 	ldw	r2,-16(fp)
 200b600:	1004c03a 	cmpne	r2,r2,zero
 200b604:	1000071e 	bne	r2,zero,200b624 <OSTaskDelReq+0x114>
 200b608:	e0bffb17 	ldw	r2,-20(fp)
 200b60c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b610:	e0bff717 	ldw	r2,-36(fp)
 200b614:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 200b618:	008010c4 	movi	r2,67
 200b61c:	e0bfff15 	stw	r2,-4(fp)
 200b620:	00001206 	br	200b66c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 200b624:	e0bffc17 	ldw	r2,-16(fp)
 200b628:	10800058 	cmpnei	r2,r2,1
 200b62c:	1000071e 	bne	r2,zero,200b64c <OSTaskDelReq+0x13c>
 200b630:	e0bffb17 	ldw	r2,-20(fp)
 200b634:	e0bff615 	stw	r2,-40(fp)
 200b638:	e0bff617 	ldw	r2,-40(fp)
 200b63c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 200b640:	00800f44 	movi	r2,61
 200b644:	e0bfff15 	stw	r2,-4(fp)
 200b648:	00000806 	br	200b66c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 200b64c:	e0fffc17 	ldw	r3,-16(fp)
 200b650:	00800fc4 	movi	r2,63
 200b654:	18800dc5 	stb	r2,55(r3)
 200b658:	e0bffb17 	ldw	r2,-20(fp)
 200b65c:	e0bff515 	stw	r2,-44(fp)
 200b660:	e0bff517 	ldw	r2,-44(fp)
 200b664:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 200b668:	e03fff15 	stw	zero,-4(fp)
 200b66c:	e0bfff17 	ldw	r2,-4(fp)
}
 200b670:	e037883a 	mov	sp,fp
 200b674:	df000017 	ldw	fp,0(sp)
 200b678:	dec00104 	addi	sp,sp,4
 200b67c:	f800283a 	ret

0200b680 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 200b680:	defff304 	addi	sp,sp,-52
 200b684:	dfc00c15 	stw	ra,48(sp)
 200b688:	df000b15 	stw	fp,44(sp)
 200b68c:	df000b04 	addi	fp,sp,44
 200b690:	e17ffd15 	stw	r5,-12(fp)
 200b694:	e1bffe15 	stw	r6,-8(fp)
 200b698:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 200b69c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 200b6a0:	e0bffe17 	ldw	r2,-8(fp)
 200b6a4:	1004c03a 	cmpne	r2,r2,zero
 200b6a8:	1000021e 	bne	r2,zero,200b6b4 <OSTaskNameGet+0x34>
        return (0);
 200b6ac:	e03fff15 	stw	zero,-4(fp)
 200b6b0:	00005b06 	br	200b820 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 200b6b4:	e0bffc03 	ldbu	r2,-16(fp)
 200b6b8:	10800570 	cmpltui	r2,r2,21
 200b6bc:	1000081e 	bne	r2,zero,200b6e0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 200b6c0:	e0bffc03 	ldbu	r2,-16(fp)
 200b6c4:	10803fe0 	cmpeqi	r2,r2,255
 200b6c8:	1000051e 	bne	r2,zero,200b6e0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 200b6cc:	e0fffe17 	ldw	r3,-8(fp)
 200b6d0:	00800a84 	movi	r2,42
 200b6d4:	18800005 	stb	r2,0(r3)
            return (0);
 200b6d8:	e03fff15 	stw	zero,-4(fp)
 200b6dc:	00005006 	br	200b820 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 200b6e0:	e0bffd17 	ldw	r2,-12(fp)
 200b6e4:	1004c03a 	cmpne	r2,r2,zero
 200b6e8:	1000051e 	bne	r2,zero,200b700 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 200b6ec:	e0fffe17 	ldw	r3,-8(fp)
 200b6f0:	00800304 	movi	r2,12
 200b6f4:	18800005 	stb	r2,0(r3)
        return (0);
 200b6f8:	e03fff15 	stw	zero,-4(fp)
 200b6fc:	00004806 	br	200b820 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 200b700:	00808074 	movhi	r2,513
 200b704:	108fd804 	addi	r2,r2,16224
 200b708:	10800003 	ldbu	r2,0(r2)
 200b70c:	10803fcc 	andi	r2,r2,255
 200b710:	1005003a 	cmpeq	r2,r2,zero
 200b714:	1000051e 	bne	r2,zero,200b72c <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 200b718:	e0fffe17 	ldw	r3,-8(fp)
 200b71c:	00800444 	movi	r2,17
 200b720:	18800005 	stb	r2,0(r3)
        return (0);
 200b724:	e03fff15 	stw	zero,-4(fp)
 200b728:	00003d06 	br	200b820 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b72c:	0005303a 	rdctl	r2,status
 200b730:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b734:	e0fff817 	ldw	r3,-32(fp)
 200b738:	00bfff84 	movi	r2,-2
 200b73c:	1884703a 	and	r2,r3,r2
 200b740:	1001703a 	wrctl	status,r2
  
  return context;
 200b744:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 200b748:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 200b74c:	e0bffc03 	ldbu	r2,-16(fp)
 200b750:	10803fd8 	cmpnei	r2,r2,255
 200b754:	1000051e 	bne	r2,zero,200b76c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 200b758:	00808074 	movhi	r2,513
 200b75c:	108fd904 	addi	r2,r2,16228
 200b760:	10800017 	ldw	r2,0(r2)
 200b764:	10800c83 	ldbu	r2,50(r2)
 200b768:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200b76c:	e0bffc03 	ldbu	r2,-16(fp)
 200b770:	00c080b4 	movhi	r3,514
 200b774:	18e46304 	addi	r3,r3,-28276
 200b778:	1085883a 	add	r2,r2,r2
 200b77c:	1085883a 	add	r2,r2,r2
 200b780:	10c5883a 	add	r2,r2,r3
 200b784:	10800017 	ldw	r2,0(r2)
 200b788:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 200b78c:	e0bffb17 	ldw	r2,-20(fp)
 200b790:	1004c03a 	cmpne	r2,r2,zero
 200b794:	1000091e 	bne	r2,zero,200b7bc <OSTaskNameGet+0x13c>
 200b798:	e0bff917 	ldw	r2,-28(fp)
 200b79c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b7a0:	e0bff717 	ldw	r2,-36(fp)
 200b7a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 200b7a8:	e0fffe17 	ldw	r3,-8(fp)
 200b7ac:	008010c4 	movi	r2,67
 200b7b0:	18800005 	stb	r2,0(r3)
        return (0);
 200b7b4:	e03fff15 	stw	zero,-4(fp)
 200b7b8:	00001906 	br	200b820 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 200b7bc:	e0bffb17 	ldw	r2,-20(fp)
 200b7c0:	10800058 	cmpnei	r2,r2,1
 200b7c4:	1000091e 	bne	r2,zero,200b7ec <OSTaskNameGet+0x16c>
 200b7c8:	e0bff917 	ldw	r2,-28(fp)
 200b7cc:	e0bff615 	stw	r2,-40(fp)
 200b7d0:	e0bff617 	ldw	r2,-40(fp)
 200b7d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 200b7d8:	e0fffe17 	ldw	r3,-8(fp)
 200b7dc:	008010c4 	movi	r2,67
 200b7e0:	18800005 	stb	r2,0(r3)
        return (0);
 200b7e4:	e03fff15 	stw	zero,-4(fp)
 200b7e8:	00000d06 	br	200b820 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 200b7ec:	e0bffb17 	ldw	r2,-20(fp)
 200b7f0:	11401304 	addi	r5,r2,76
 200b7f4:	e13ffd17 	ldw	r4,-12(fp)
 200b7f8:	200604c0 	call	200604c <OS_StrCopy>
 200b7fc:	e0bffa05 	stb	r2,-24(fp)
 200b800:	e0bff917 	ldw	r2,-28(fp)
 200b804:	e0bff515 	stw	r2,-44(fp)
 200b808:	e0bff517 	ldw	r2,-44(fp)
 200b80c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200b810:	e0bffe17 	ldw	r2,-8(fp)
 200b814:	10000005 	stb	zero,0(r2)
    return (len);
 200b818:	e0bffa03 	ldbu	r2,-24(fp)
 200b81c:	e0bfff15 	stw	r2,-4(fp)
 200b820:	e0bfff17 	ldw	r2,-4(fp)
}
 200b824:	e037883a 	mov	sp,fp
 200b828:	dfc00117 	ldw	ra,4(sp)
 200b82c:	df000017 	ldw	fp,0(sp)
 200b830:	dec00204 	addi	sp,sp,8
 200b834:	f800283a 	ret

0200b838 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 200b838:	defff304 	addi	sp,sp,-52
 200b83c:	dfc00c15 	stw	ra,48(sp)
 200b840:	df000b15 	stw	fp,44(sp)
 200b844:	df000b04 	addi	fp,sp,44
 200b848:	e17ffe15 	stw	r5,-8(fp)
 200b84c:	e1bfff15 	stw	r6,-4(fp)
 200b850:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 200b854:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 200b858:	e0bfff17 	ldw	r2,-4(fp)
 200b85c:	1005003a 	cmpeq	r2,r2,zero
 200b860:	1000611e 	bne	r2,zero,200b9e8 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 200b864:	e0bffd03 	ldbu	r2,-12(fp)
 200b868:	10800570 	cmpltui	r2,r2,21
 200b86c:	1000071e 	bne	r2,zero,200b88c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 200b870:	e0bffd03 	ldbu	r2,-12(fp)
 200b874:	10803fe0 	cmpeqi	r2,r2,255
 200b878:	1000041e 	bne	r2,zero,200b88c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 200b87c:	e0ffff17 	ldw	r3,-4(fp)
 200b880:	00800a84 	movi	r2,42
 200b884:	18800005 	stb	r2,0(r3)
            return;
 200b888:	00005706 	br	200b9e8 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 200b88c:	e0bffe17 	ldw	r2,-8(fp)
 200b890:	1004c03a 	cmpne	r2,r2,zero
 200b894:	1000041e 	bne	r2,zero,200b8a8 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 200b898:	e0ffff17 	ldw	r3,-4(fp)
 200b89c:	00800304 	movi	r2,12
 200b8a0:	18800005 	stb	r2,0(r3)
        return;
 200b8a4:	00005006 	br	200b9e8 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 200b8a8:	00808074 	movhi	r2,513
 200b8ac:	108fd804 	addi	r2,r2,16224
 200b8b0:	10800003 	ldbu	r2,0(r2)
 200b8b4:	10803fcc 	andi	r2,r2,255
 200b8b8:	1005003a 	cmpeq	r2,r2,zero
 200b8bc:	1000041e 	bne	r2,zero,200b8d0 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 200b8c0:	e0ffff17 	ldw	r3,-4(fp)
 200b8c4:	00800484 	movi	r2,18
 200b8c8:	18800005 	stb	r2,0(r3)
        return;
 200b8cc:	00004606 	br	200b9e8 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b8d0:	0005303a 	rdctl	r2,status
 200b8d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b8d8:	e0fff917 	ldw	r3,-28(fp)
 200b8dc:	00bfff84 	movi	r2,-2
 200b8e0:	1884703a 	and	r2,r3,r2
 200b8e4:	1001703a 	wrctl	status,r2
  
  return context;
 200b8e8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 200b8ec:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 200b8f0:	e0bffd03 	ldbu	r2,-12(fp)
 200b8f4:	10803fd8 	cmpnei	r2,r2,255
 200b8f8:	1000051e 	bne	r2,zero,200b910 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 200b8fc:	00808074 	movhi	r2,513
 200b900:	108fd904 	addi	r2,r2,16228
 200b904:	10800017 	ldw	r2,0(r2)
 200b908:	10800c83 	ldbu	r2,50(r2)
 200b90c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200b910:	e0bffd03 	ldbu	r2,-12(fp)
 200b914:	00c080b4 	movhi	r3,514
 200b918:	18e46304 	addi	r3,r3,-28276
 200b91c:	1085883a 	add	r2,r2,r2
 200b920:	1085883a 	add	r2,r2,r2
 200b924:	10c5883a 	add	r2,r2,r3
 200b928:	10800017 	ldw	r2,0(r2)
 200b92c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 200b930:	e0bffb17 	ldw	r2,-20(fp)
 200b934:	1004c03a 	cmpne	r2,r2,zero
 200b938:	1000081e 	bne	r2,zero,200b95c <OSTaskNameSet+0x124>
 200b93c:	e0bffa17 	ldw	r2,-24(fp)
 200b940:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b944:	e0bff817 	ldw	r2,-32(fp)
 200b948:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 200b94c:	e0ffff17 	ldw	r3,-4(fp)
 200b950:	008010c4 	movi	r2,67
 200b954:	18800005 	stb	r2,0(r3)
        return;
 200b958:	00002306 	br	200b9e8 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 200b95c:	e0bffb17 	ldw	r2,-20(fp)
 200b960:	10800058 	cmpnei	r2,r2,1
 200b964:	1000081e 	bne	r2,zero,200b988 <OSTaskNameSet+0x150>
 200b968:	e0bffa17 	ldw	r2,-24(fp)
 200b96c:	e0bff715 	stw	r2,-36(fp)
 200b970:	e0bff717 	ldw	r2,-36(fp)
 200b974:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 200b978:	e0ffff17 	ldw	r3,-4(fp)
 200b97c:	008010c4 	movi	r2,67
 200b980:	18800005 	stb	r2,0(r3)
        return;
 200b984:	00001806 	br	200b9e8 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 200b988:	e13ffe17 	ldw	r4,-8(fp)
 200b98c:	20060cc0 	call	20060cc <OS_StrLen>
 200b990:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 200b994:	e0bffc03 	ldbu	r2,-16(fp)
 200b998:	10800830 	cmpltui	r2,r2,32
 200b99c:	1000081e 	bne	r2,zero,200b9c0 <OSTaskNameSet+0x188>
 200b9a0:	e0bffa17 	ldw	r2,-24(fp)
 200b9a4:	e0bff615 	stw	r2,-40(fp)
 200b9a8:	e0bff617 	ldw	r2,-40(fp)
 200b9ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 200b9b0:	e0ffff17 	ldw	r3,-4(fp)
 200b9b4:	00801044 	movi	r2,65
 200b9b8:	18800005 	stb	r2,0(r3)
        return;
 200b9bc:	00000a06 	br	200b9e8 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 200b9c0:	e0bffb17 	ldw	r2,-20(fp)
 200b9c4:	11001304 	addi	r4,r2,76
 200b9c8:	e17ffe17 	ldw	r5,-8(fp)
 200b9cc:	200604c0 	call	200604c <OS_StrCopy>
 200b9d0:	e0bffa17 	ldw	r2,-24(fp)
 200b9d4:	e0bff515 	stw	r2,-44(fp)
 200b9d8:	e0bff517 	ldw	r2,-44(fp)
 200b9dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200b9e0:	e0bfff17 	ldw	r2,-4(fp)
 200b9e4:	10000005 	stb	zero,0(r2)
}
 200b9e8:	e037883a 	mov	sp,fp
 200b9ec:	dfc00117 	ldw	ra,4(sp)
 200b9f0:	df000017 	ldw	fp,0(sp)
 200b9f4:	dec00204 	addi	sp,sp,8
 200b9f8:	f800283a 	ret

0200b9fc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 200b9fc:	defff304 	addi	sp,sp,-52
 200ba00:	dfc00c15 	stw	ra,48(sp)
 200ba04:	df000b15 	stw	fp,44(sp)
 200ba08:	df000b04 	addi	fp,sp,44
 200ba0c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 200ba10:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 200ba14:	e0bffe03 	ldbu	r2,-8(fp)
 200ba18:	10800530 	cmpltui	r2,r2,20
 200ba1c:	1000031e 	bne	r2,zero,200ba2c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 200ba20:	00800a84 	movi	r2,42
 200ba24:	e0bfff15 	stw	r2,-4(fp)
 200ba28:	00007406 	br	200bbfc <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ba2c:	0005303a 	rdctl	r2,status
 200ba30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ba34:	e0fffb17 	ldw	r3,-20(fp)
 200ba38:	00bfff84 	movi	r2,-2
 200ba3c:	1884703a 	and	r2,r3,r2
 200ba40:	1001703a 	wrctl	status,r2
  
  return context;
 200ba44:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200ba48:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 200ba4c:	e0bffe03 	ldbu	r2,-8(fp)
 200ba50:	00c080b4 	movhi	r3,514
 200ba54:	18e46304 	addi	r3,r3,-28276
 200ba58:	1085883a 	add	r2,r2,r2
 200ba5c:	1085883a 	add	r2,r2,r2
 200ba60:	10c5883a 	add	r2,r2,r3
 200ba64:	10800017 	ldw	r2,0(r2)
 200ba68:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 200ba6c:	e0bffd17 	ldw	r2,-12(fp)
 200ba70:	1004c03a 	cmpne	r2,r2,zero
 200ba74:	1000071e 	bne	r2,zero,200ba94 <OSTaskResume+0x98>
 200ba78:	e0bffc17 	ldw	r2,-16(fp)
 200ba7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ba80:	e0bffa17 	ldw	r2,-24(fp)
 200ba84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 200ba88:	00801184 	movi	r2,70
 200ba8c:	e0bfff15 	stw	r2,-4(fp)
 200ba90:	00005a06 	br	200bbfc <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 200ba94:	e0bffd17 	ldw	r2,-12(fp)
 200ba98:	10800058 	cmpnei	r2,r2,1
 200ba9c:	1000071e 	bne	r2,zero,200babc <OSTaskResume+0xc0>
 200baa0:	e0bffc17 	ldw	r2,-16(fp)
 200baa4:	e0bff915 	stw	r2,-28(fp)
 200baa8:	e0bff917 	ldw	r2,-28(fp)
 200baac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200bab0:	008010c4 	movi	r2,67
 200bab4:	e0bfff15 	stw	r2,-4(fp)
 200bab8:	00005006 	br	200bbfc <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 200babc:	e0bffd17 	ldw	r2,-12(fp)
 200bac0:	10800c03 	ldbu	r2,48(r2)
 200bac4:	10803fcc 	andi	r2,r2,255
 200bac8:	1080020c 	andi	r2,r2,8
 200bacc:	1005003a 	cmpeq	r2,r2,zero
 200bad0:	1000441e 	bne	r2,zero,200bbe4 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 200bad4:	e0bffd17 	ldw	r2,-12(fp)
 200bad8:	10c00c03 	ldbu	r3,48(r2)
 200badc:	00bffdc4 	movi	r2,-9
 200bae0:	1884703a 	and	r2,r3,r2
 200bae4:	1007883a 	mov	r3,r2
 200bae8:	e0bffd17 	ldw	r2,-12(fp)
 200baec:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 200baf0:	e0bffd17 	ldw	r2,-12(fp)
 200baf4:	10800c03 	ldbu	r2,48(r2)
 200baf8:	10803fcc 	andi	r2,r2,255
 200bafc:	1004c03a 	cmpne	r2,r2,zero
 200bb00:	1000321e 	bne	r2,zero,200bbcc <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 200bb04:	e0bffd17 	ldw	r2,-12(fp)
 200bb08:	10800b8b 	ldhu	r2,46(r2)
 200bb0c:	10bfffcc 	andi	r2,r2,65535
 200bb10:	1004c03a 	cmpne	r2,r2,zero
 200bb14:	1000281e 	bne	r2,zero,200bbb8 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 200bb18:	e0bffd17 	ldw	r2,-12(fp)
 200bb1c:	10c00d83 	ldbu	r3,54(r2)
 200bb20:	00808074 	movhi	r2,513
 200bb24:	108fd604 	addi	r2,r2,16216
 200bb28:	10800003 	ldbu	r2,0(r2)
 200bb2c:	1884b03a 	or	r2,r3,r2
 200bb30:	1007883a 	mov	r3,r2
 200bb34:	00808074 	movhi	r2,513
 200bb38:	108fd604 	addi	r2,r2,16216
 200bb3c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 200bb40:	e0bffd17 	ldw	r2,-12(fp)
 200bb44:	10800d03 	ldbu	r2,52(r2)
 200bb48:	11003fcc 	andi	r4,r2,255
 200bb4c:	e0bffd17 	ldw	r2,-12(fp)
 200bb50:	10800d03 	ldbu	r2,52(r2)
 200bb54:	10c03fcc 	andi	r3,r2,255
 200bb58:	00808074 	movhi	r2,513
 200bb5c:	108fd644 	addi	r2,r2,16217
 200bb60:	10c5883a 	add	r2,r2,r3
 200bb64:	10c00003 	ldbu	r3,0(r2)
 200bb68:	e0bffd17 	ldw	r2,-12(fp)
 200bb6c:	10800d43 	ldbu	r2,53(r2)
 200bb70:	1884b03a 	or	r2,r3,r2
 200bb74:	1007883a 	mov	r3,r2
 200bb78:	00808074 	movhi	r2,513
 200bb7c:	108fd644 	addi	r2,r2,16217
 200bb80:	1105883a 	add	r2,r2,r4
 200bb84:	10c00005 	stb	r3,0(r2)
 200bb88:	e0bffc17 	ldw	r2,-16(fp)
 200bb8c:	e0bff815 	stw	r2,-32(fp)
 200bb90:	e0bff817 	ldw	r2,-32(fp)
 200bb94:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 200bb98:	00808074 	movhi	r2,513
 200bb9c:	108fca44 	addi	r2,r2,16169
 200bba0:	10800003 	ldbu	r2,0(r2)
 200bba4:	10803fcc 	andi	r2,r2,255
 200bba8:	10800058 	cmpnei	r2,r2,1
 200bbac:	10000b1e 	bne	r2,zero,200bbdc <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 200bbb0:	2005f080 	call	2005f08 <OS_Sched>
 200bbb4:	00000906 	br	200bbdc <OSTaskResume+0x1e0>
 200bbb8:	e0bffc17 	ldw	r2,-16(fp)
 200bbbc:	e0bff715 	stw	r2,-36(fp)
 200bbc0:	e0bff717 	ldw	r2,-36(fp)
 200bbc4:	1001703a 	wrctl	status,r2
 200bbc8:	00000406 	br	200bbdc <OSTaskResume+0x1e0>
 200bbcc:	e0bffc17 	ldw	r2,-16(fp)
 200bbd0:	e0bff615 	stw	r2,-40(fp)
 200bbd4:	e0bff617 	ldw	r2,-40(fp)
 200bbd8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 200bbdc:	e03fff15 	stw	zero,-4(fp)
 200bbe0:	00000606 	br	200bbfc <OSTaskResume+0x200>
 200bbe4:	e0bffc17 	ldw	r2,-16(fp)
 200bbe8:	e0bff515 	stw	r2,-44(fp)
 200bbec:	e0bff517 	ldw	r2,-44(fp)
 200bbf0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 200bbf4:	00801104 	movi	r2,68
 200bbf8:	e0bfff15 	stw	r2,-4(fp)
 200bbfc:	e0bfff17 	ldw	r2,-4(fp)
}
 200bc00:	e037883a 	mov	sp,fp
 200bc04:	dfc00117 	ldw	ra,4(sp)
 200bc08:	df000017 	ldw	fp,0(sp)
 200bc0c:	dec00204 	addi	sp,sp,8
 200bc10:	f800283a 	ret

0200bc14 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 200bc14:	defff204 	addi	sp,sp,-56
 200bc18:	df000d15 	stw	fp,52(sp)
 200bc1c:	df000d04 	addi	fp,sp,52
 200bc20:	e17ffe15 	stw	r5,-8(fp)
 200bc24:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 200bc28:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 200bc2c:	e0bffd03 	ldbu	r2,-12(fp)
 200bc30:	10800570 	cmpltui	r2,r2,21
 200bc34:	1000061e 	bne	r2,zero,200bc50 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 200bc38:	e0bffd03 	ldbu	r2,-12(fp)
 200bc3c:	10803fe0 	cmpeqi	r2,r2,255
 200bc40:	1000031e 	bne	r2,zero,200bc50 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 200bc44:	00800a84 	movi	r2,42
 200bc48:	e0bfff15 	stw	r2,-4(fp)
 200bc4c:	00006b06 	br	200bdfc <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 200bc50:	e0bffe17 	ldw	r2,-8(fp)
 200bc54:	1004c03a 	cmpne	r2,r2,zero
 200bc58:	1000031e 	bne	r2,zero,200bc68 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 200bc5c:	00800244 	movi	r2,9
 200bc60:	e0bfff15 	stw	r2,-4(fp)
 200bc64:	00006506 	br	200bdfc <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 200bc68:	e0bffe17 	ldw	r2,-8(fp)
 200bc6c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 200bc70:	e0bffe17 	ldw	r2,-8(fp)
 200bc74:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200bc78:	0005303a 	rdctl	r2,status
 200bc7c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200bc80:	e0fff717 	ldw	r3,-36(fp)
 200bc84:	00bfff84 	movi	r2,-2
 200bc88:	1884703a 	and	r2,r3,r2
 200bc8c:	1001703a 	wrctl	status,r2
  
  return context;
 200bc90:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 200bc94:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 200bc98:	e0bffd03 	ldbu	r2,-12(fp)
 200bc9c:	10803fd8 	cmpnei	r2,r2,255
 200bca0:	1000051e 	bne	r2,zero,200bcb8 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 200bca4:	00808074 	movhi	r2,513
 200bca8:	108fd904 	addi	r2,r2,16228
 200bcac:	10800017 	ldw	r2,0(r2)
 200bcb0:	10800c83 	ldbu	r2,50(r2)
 200bcb4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200bcb8:	e0bffd03 	ldbu	r2,-12(fp)
 200bcbc:	00c080b4 	movhi	r3,514
 200bcc0:	18e46304 	addi	r3,r3,-28276
 200bcc4:	1085883a 	add	r2,r2,r2
 200bcc8:	1085883a 	add	r2,r2,r2
 200bccc:	10c5883a 	add	r2,r2,r3
 200bcd0:	10800017 	ldw	r2,0(r2)
 200bcd4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 200bcd8:	e0bffc17 	ldw	r2,-16(fp)
 200bcdc:	1004c03a 	cmpne	r2,r2,zero
 200bce0:	1000071e 	bne	r2,zero,200bd00 <OSTaskStkChk+0xec>
 200bce4:	e0bff817 	ldw	r2,-32(fp)
 200bce8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200bcec:	e0bff617 	ldw	r2,-40(fp)
 200bcf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200bcf4:	008010c4 	movi	r2,67
 200bcf8:	e0bfff15 	stw	r2,-4(fp)
 200bcfc:	00003f06 	br	200bdfc <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 200bd00:	e0bffc17 	ldw	r2,-16(fp)
 200bd04:	10800058 	cmpnei	r2,r2,1
 200bd08:	1000071e 	bne	r2,zero,200bd28 <OSTaskStkChk+0x114>
 200bd0c:	e0bff817 	ldw	r2,-32(fp)
 200bd10:	e0bff515 	stw	r2,-44(fp)
 200bd14:	e0bff517 	ldw	r2,-44(fp)
 200bd18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200bd1c:	008010c4 	movi	r2,67
 200bd20:	e0bfff15 	stw	r2,-4(fp)
 200bd24:	00003506 	br	200bdfc <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 200bd28:	e0bffc17 	ldw	r2,-16(fp)
 200bd2c:	1080040b 	ldhu	r2,16(r2)
 200bd30:	10bfffcc 	andi	r2,r2,65535
 200bd34:	1080004c 	andi	r2,r2,1
 200bd38:	1004c03a 	cmpne	r2,r2,zero
 200bd3c:	1000071e 	bne	r2,zero,200bd5c <OSTaskStkChk+0x148>
 200bd40:	e0bff817 	ldw	r2,-32(fp)
 200bd44:	e0bff415 	stw	r2,-48(fp)
 200bd48:	e0bff417 	ldw	r2,-48(fp)
 200bd4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 200bd50:	00801144 	movi	r2,69
 200bd54:	e0bfff15 	stw	r2,-4(fp)
 200bd58:	00002806 	br	200bdfc <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 200bd5c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 200bd60:	e0bffc17 	ldw	r2,-16(fp)
 200bd64:	10800317 	ldw	r2,12(r2)
 200bd68:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 200bd6c:	e0bffc17 	ldw	r2,-16(fp)
 200bd70:	10800217 	ldw	r2,8(r2)
 200bd74:	e0bffb15 	stw	r2,-20(fp)
 200bd78:	e0bff817 	ldw	r2,-32(fp)
 200bd7c:	e0bff315 	stw	r2,-52(fp)
 200bd80:	e0bff317 	ldw	r2,-52(fp)
 200bd84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 200bd88:	00000306 	br	200bd98 <OSTaskStkChk+0x184>
        nfree++;
 200bd8c:	e0bffa17 	ldw	r2,-24(fp)
 200bd90:	10800044 	addi	r2,r2,1
 200bd94:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 200bd98:	e0bffb17 	ldw	r2,-20(fp)
 200bd9c:	10800017 	ldw	r2,0(r2)
 200bda0:	1005003a 	cmpeq	r2,r2,zero
 200bda4:	1007883a 	mov	r3,r2
 200bda8:	e0bffb17 	ldw	r2,-20(fp)
 200bdac:	10800104 	addi	r2,r2,4
 200bdb0:	e0bffb15 	stw	r2,-20(fp)
 200bdb4:	18803fcc 	andi	r2,r3,255
 200bdb8:	1004c03a 	cmpne	r2,r2,zero
 200bdbc:	103ff31e 	bne	r2,zero,200bd8c <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 200bdc0:	e0bffa17 	ldw	r2,-24(fp)
 200bdc4:	1085883a 	add	r2,r2,r2
 200bdc8:	1085883a 	add	r2,r2,r2
 200bdcc:	1007883a 	mov	r3,r2
 200bdd0:	e0bffe17 	ldw	r2,-8(fp)
 200bdd4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 200bdd8:	e0fff917 	ldw	r3,-28(fp)
 200bddc:	e0bffa17 	ldw	r2,-24(fp)
 200bde0:	1885c83a 	sub	r2,r3,r2
 200bde4:	1085883a 	add	r2,r2,r2
 200bde8:	1085883a 	add	r2,r2,r2
 200bdec:	1007883a 	mov	r3,r2
 200bdf0:	e0bffe17 	ldw	r2,-8(fp)
 200bdf4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 200bdf8:	e03fff15 	stw	zero,-4(fp)
 200bdfc:	e0bfff17 	ldw	r2,-4(fp)
}
 200be00:	e037883a 	mov	sp,fp
 200be04:	df000017 	ldw	fp,0(sp)
 200be08:	dec00104 	addi	sp,sp,4
 200be0c:	f800283a 	ret

0200be10 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 200be10:	defff404 	addi	sp,sp,-48
 200be14:	dfc00b15 	stw	ra,44(sp)
 200be18:	df000a15 	stw	fp,40(sp)
 200be1c:	df000a04 	addi	fp,sp,40
 200be20:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200be24:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 200be28:	e0bffe03 	ldbu	r2,-8(fp)
 200be2c:	10800518 	cmpnei	r2,r2,20
 200be30:	1000031e 	bne	r2,zero,200be40 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 200be34:	008011c4 	movi	r2,71
 200be38:	e0bfff15 	stw	r2,-4(fp)
 200be3c:	00007906 	br	200c024 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 200be40:	e0bffe03 	ldbu	r2,-8(fp)
 200be44:	10800530 	cmpltui	r2,r2,20
 200be48:	1000061e 	bne	r2,zero,200be64 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 200be4c:	e0bffe03 	ldbu	r2,-8(fp)
 200be50:	10803fe0 	cmpeqi	r2,r2,255
 200be54:	1000031e 	bne	r2,zero,200be64 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 200be58:	00800a84 	movi	r2,42
 200be5c:	e0bfff15 	stw	r2,-4(fp)
 200be60:	00007006 	br	200c024 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200be64:	0005303a 	rdctl	r2,status
 200be68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200be6c:	e0fff917 	ldw	r3,-28(fp)
 200be70:	00bfff84 	movi	r2,-2
 200be74:	1884703a 	and	r2,r3,r2
 200be78:	1001703a 	wrctl	status,r2
  
  return context;
 200be7c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 200be80:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 200be84:	e0bffe03 	ldbu	r2,-8(fp)
 200be88:	10803fd8 	cmpnei	r2,r2,255
 200be8c:	1000081e 	bne	r2,zero,200beb0 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 200be90:	00808074 	movhi	r2,513
 200be94:	108fd904 	addi	r2,r2,16228
 200be98:	10800017 	ldw	r2,0(r2)
 200be9c:	10800c83 	ldbu	r2,50(r2)
 200bea0:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 200bea4:	00800044 	movi	r2,1
 200bea8:	e0bffd05 	stb	r2,-12(fp)
 200beac:	00000b06 	br	200bedc <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 200beb0:	00808074 	movhi	r2,513
 200beb4:	108fd904 	addi	r2,r2,16228
 200beb8:	10800017 	ldw	r2,0(r2)
 200bebc:	10800c83 	ldbu	r2,50(r2)
 200bec0:	10c03fcc 	andi	r3,r2,255
 200bec4:	e0bffe03 	ldbu	r2,-8(fp)
 200bec8:	1880031e 	bne	r3,r2,200bed8 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 200becc:	00800044 	movi	r2,1
 200bed0:	e0bffd05 	stb	r2,-12(fp)
 200bed4:	00000106 	br	200bedc <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 200bed8:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200bedc:	e0bffe03 	ldbu	r2,-8(fp)
 200bee0:	00c080b4 	movhi	r3,514
 200bee4:	18e46304 	addi	r3,r3,-28276
 200bee8:	1085883a 	add	r2,r2,r2
 200beec:	1085883a 	add	r2,r2,r2
 200bef0:	10c5883a 	add	r2,r2,r3
 200bef4:	10800017 	ldw	r2,0(r2)
 200bef8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 200befc:	e0bffc17 	ldw	r2,-16(fp)
 200bf00:	1004c03a 	cmpne	r2,r2,zero
 200bf04:	1000071e 	bne	r2,zero,200bf24 <OSTaskSuspend+0x114>
 200bf08:	e0bffa17 	ldw	r2,-24(fp)
 200bf0c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200bf10:	e0bff817 	ldw	r2,-32(fp)
 200bf14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 200bf18:	00801204 	movi	r2,72
 200bf1c:	e0bfff15 	stw	r2,-4(fp)
 200bf20:	00004006 	br	200c024 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 200bf24:	e0bffc17 	ldw	r2,-16(fp)
 200bf28:	10800058 	cmpnei	r2,r2,1
 200bf2c:	1000071e 	bne	r2,zero,200bf4c <OSTaskSuspend+0x13c>
 200bf30:	e0bffa17 	ldw	r2,-24(fp)
 200bf34:	e0bff715 	stw	r2,-36(fp)
 200bf38:	e0bff717 	ldw	r2,-36(fp)
 200bf3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200bf40:	008010c4 	movi	r2,67
 200bf44:	e0bfff15 	stw	r2,-4(fp)
 200bf48:	00003606 	br	200c024 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 200bf4c:	e0bffc17 	ldw	r2,-16(fp)
 200bf50:	10800d03 	ldbu	r2,52(r2)
 200bf54:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 200bf58:	e13ffb03 	ldbu	r4,-20(fp)
 200bf5c:	e0fffb03 	ldbu	r3,-20(fp)
 200bf60:	00808074 	movhi	r2,513
 200bf64:	108fd644 	addi	r2,r2,16217
 200bf68:	10c5883a 	add	r2,r2,r3
 200bf6c:	10800003 	ldbu	r2,0(r2)
 200bf70:	1007883a 	mov	r3,r2
 200bf74:	e0bffc17 	ldw	r2,-16(fp)
 200bf78:	10800d43 	ldbu	r2,53(r2)
 200bf7c:	0084303a 	nor	r2,zero,r2
 200bf80:	1884703a 	and	r2,r3,r2
 200bf84:	1007883a 	mov	r3,r2
 200bf88:	00808074 	movhi	r2,513
 200bf8c:	108fd644 	addi	r2,r2,16217
 200bf90:	1105883a 	add	r2,r2,r4
 200bf94:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 200bf98:	e0fffb03 	ldbu	r3,-20(fp)
 200bf9c:	00808074 	movhi	r2,513
 200bfa0:	108fd644 	addi	r2,r2,16217
 200bfa4:	10c5883a 	add	r2,r2,r3
 200bfa8:	10800003 	ldbu	r2,0(r2)
 200bfac:	10803fcc 	andi	r2,r2,255
 200bfb0:	1004c03a 	cmpne	r2,r2,zero
 200bfb4:	10000c1e 	bne	r2,zero,200bfe8 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 200bfb8:	e0bffc17 	ldw	r2,-16(fp)
 200bfbc:	10800d83 	ldbu	r2,54(r2)
 200bfc0:	0084303a 	nor	r2,zero,r2
 200bfc4:	1007883a 	mov	r3,r2
 200bfc8:	00808074 	movhi	r2,513
 200bfcc:	108fd604 	addi	r2,r2,16216
 200bfd0:	10800003 	ldbu	r2,0(r2)
 200bfd4:	1884703a 	and	r2,r3,r2
 200bfd8:	1007883a 	mov	r3,r2
 200bfdc:	00808074 	movhi	r2,513
 200bfe0:	108fd604 	addi	r2,r2,16216
 200bfe4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 200bfe8:	e0bffc17 	ldw	r2,-16(fp)
 200bfec:	10800c03 	ldbu	r2,48(r2)
 200bff0:	10800214 	ori	r2,r2,8
 200bff4:	1007883a 	mov	r3,r2
 200bff8:	e0bffc17 	ldw	r2,-16(fp)
 200bffc:	10c00c05 	stb	r3,48(r2)
 200c000:	e0bffa17 	ldw	r2,-24(fp)
 200c004:	e0bff615 	stw	r2,-40(fp)
 200c008:	e0bff617 	ldw	r2,-40(fp)
 200c00c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 200c010:	e0bffd03 	ldbu	r2,-12(fp)
 200c014:	10800058 	cmpnei	r2,r2,1
 200c018:	1000011e 	bne	r2,zero,200c020 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 200c01c:	2005f080 	call	2005f08 <OS_Sched>
    }
    return (OS_ERR_NONE);
 200c020:	e03fff15 	stw	zero,-4(fp)
 200c024:	e0bfff17 	ldw	r2,-4(fp)
}
 200c028:	e037883a 	mov	sp,fp
 200c02c:	dfc00117 	ldw	ra,4(sp)
 200c030:	df000017 	ldw	fp,0(sp)
 200c034:	dec00204 	addi	sp,sp,8
 200c038:	f800283a 	ret

0200c03c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 200c03c:	defff504 	addi	sp,sp,-44
 200c040:	dfc00a15 	stw	ra,40(sp)
 200c044:	df000915 	stw	fp,36(sp)
 200c048:	df000904 	addi	fp,sp,36
 200c04c:	e17ffe15 	stw	r5,-8(fp)
 200c050:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200c054:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 200c058:	e0bffd03 	ldbu	r2,-12(fp)
 200c05c:	10800570 	cmpltui	r2,r2,21
 200c060:	1000061e 	bne	r2,zero,200c07c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 200c064:	e0bffd03 	ldbu	r2,-12(fp)
 200c068:	10803fe0 	cmpeqi	r2,r2,255
 200c06c:	1000031e 	bne	r2,zero,200c07c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 200c070:	00800a84 	movi	r2,42
 200c074:	e0bfff15 	stw	r2,-4(fp)
 200c078:	00003b06 	br	200c168 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 200c07c:	e0bffe17 	ldw	r2,-8(fp)
 200c080:	1004c03a 	cmpne	r2,r2,zero
 200c084:	1000031e 	bne	r2,zero,200c094 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 200c088:	00800244 	movi	r2,9
 200c08c:	e0bfff15 	stw	r2,-4(fp)
 200c090:	00003506 	br	200c168 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c094:	0005303a 	rdctl	r2,status
 200c098:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c09c:	e0fffa17 	ldw	r3,-24(fp)
 200c0a0:	00bfff84 	movi	r2,-2
 200c0a4:	1884703a 	and	r2,r3,r2
 200c0a8:	1001703a 	wrctl	status,r2
  
  return context;
 200c0ac:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 200c0b0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 200c0b4:	e0bffd03 	ldbu	r2,-12(fp)
 200c0b8:	10803fd8 	cmpnei	r2,r2,255
 200c0bc:	1000051e 	bne	r2,zero,200c0d4 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 200c0c0:	00808074 	movhi	r2,513
 200c0c4:	108fd904 	addi	r2,r2,16228
 200c0c8:	10800017 	ldw	r2,0(r2)
 200c0cc:	10800c83 	ldbu	r2,50(r2)
 200c0d0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 200c0d4:	e0bffd03 	ldbu	r2,-12(fp)
 200c0d8:	00c080b4 	movhi	r3,514
 200c0dc:	18e46304 	addi	r3,r3,-28276
 200c0e0:	1085883a 	add	r2,r2,r2
 200c0e4:	1085883a 	add	r2,r2,r2
 200c0e8:	10c5883a 	add	r2,r2,r3
 200c0ec:	10800017 	ldw	r2,0(r2)
 200c0f0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 200c0f4:	e0bffc17 	ldw	r2,-16(fp)
 200c0f8:	1004c03a 	cmpne	r2,r2,zero
 200c0fc:	1000071e 	bne	r2,zero,200c11c <OSTaskQuery+0xe0>
 200c100:	e0bffb17 	ldw	r2,-20(fp)
 200c104:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c108:	e0bff917 	ldw	r2,-28(fp)
 200c10c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 200c110:	00800a44 	movi	r2,41
 200c114:	e0bfff15 	stw	r2,-4(fp)
 200c118:	00001306 	br	200c168 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 200c11c:	e0bffc17 	ldw	r2,-16(fp)
 200c120:	10800058 	cmpnei	r2,r2,1
 200c124:	1000071e 	bne	r2,zero,200c144 <OSTaskQuery+0x108>
 200c128:	e0bffb17 	ldw	r2,-20(fp)
 200c12c:	e0bff815 	stw	r2,-32(fp)
 200c130:	e0bff817 	ldw	r2,-32(fp)
 200c134:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 200c138:	008010c4 	movi	r2,67
 200c13c:	e0bfff15 	stw	r2,-4(fp)
 200c140:	00000906 	br	200c168 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 200c144:	e13ffe17 	ldw	r4,-8(fp)
 200c148:	e17ffc17 	ldw	r5,-16(fp)
 200c14c:	01801b04 	movi	r6,108
 200c150:	2005e9c0 	call	2005e9c <OS_MemCopy>
 200c154:	e0bffb17 	ldw	r2,-20(fp)
 200c158:	e0bff715 	stw	r2,-36(fp)
 200c15c:	e0bff717 	ldw	r2,-36(fp)
 200c160:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 200c164:	e03fff15 	stw	zero,-4(fp)
 200c168:	e0bfff17 	ldw	r2,-4(fp)
}
 200c16c:	e037883a 	mov	sp,fp
 200c170:	dfc00117 	ldw	ra,4(sp)
 200c174:	df000017 	ldw	fp,0(sp)
 200c178:	dec00204 	addi	sp,sp,8
 200c17c:	f800283a 	ret

0200c180 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 200c180:	defffc04 	addi	sp,sp,-16
 200c184:	df000315 	stw	fp,12(sp)
 200c188:	df000304 	addi	fp,sp,12
 200c18c:	e13ffd15 	stw	r4,-12(fp)
 200c190:	e17ffe15 	stw	r5,-8(fp)
 200c194:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 200c198:	e0bfff0b 	ldhu	r2,-4(fp)
 200c19c:	1080004c 	andi	r2,r2,1
 200c1a0:	10803fcc 	andi	r2,r2,255
 200c1a4:	1005003a 	cmpeq	r2,r2,zero
 200c1a8:	1000101e 	bne	r2,zero,200c1ec <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 200c1ac:	e0bfff0b 	ldhu	r2,-4(fp)
 200c1b0:	1080008c 	andi	r2,r2,2
 200c1b4:	1005003a 	cmpeq	r2,r2,zero
 200c1b8:	10000c1e 	bne	r2,zero,200c1ec <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 200c1bc:	00000806 	br	200c1e0 <OS_TaskStkClr+0x60>
                size--;
 200c1c0:	e0bffe17 	ldw	r2,-8(fp)
 200c1c4:	10bfffc4 	addi	r2,r2,-1
 200c1c8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 200c1cc:	e0bffd17 	ldw	r2,-12(fp)
 200c1d0:	10000015 	stw	zero,0(r2)
 200c1d4:	e0bffd17 	ldw	r2,-12(fp)
 200c1d8:	10800104 	addi	r2,r2,4
 200c1dc:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 200c1e0:	e0bffe17 	ldw	r2,-8(fp)
 200c1e4:	1004c03a 	cmpne	r2,r2,zero
 200c1e8:	103ff51e 	bne	r2,zero,200c1c0 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 200c1ec:	e037883a 	mov	sp,fp
 200c1f0:	df000017 	ldw	fp,0(sp)
 200c1f4:	dec00104 	addi	sp,sp,4
 200c1f8:	f800283a 	ret

0200c1fc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 200c1fc:	defff904 	addi	sp,sp,-28
 200c200:	dfc00615 	stw	ra,24(sp)
 200c204:	df000515 	stw	fp,20(sp)
 200c208:	df000504 	addi	fp,sp,20
 200c20c:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200c210:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200c214:	00808074 	movhi	r2,513
 200c218:	108fd804 	addi	r2,r2,16224
 200c21c:	10800003 	ldbu	r2,0(r2)
 200c220:	10803fcc 	andi	r2,r2,255
 200c224:	1004c03a 	cmpne	r2,r2,zero
 200c228:	1000421e 	bne	r2,zero,200c334 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 200c22c:	e0bfff0b 	ldhu	r2,-4(fp)
 200c230:	1005003a 	cmpeq	r2,r2,zero
 200c234:	10003f1e 	bne	r2,zero,200c334 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c238:	0005303a 	rdctl	r2,status
 200c23c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c240:	e0fffc17 	ldw	r3,-16(fp)
 200c244:	00bfff84 	movi	r2,-2
 200c248:	1884703a 	and	r2,r3,r2
 200c24c:	1001703a 	wrctl	status,r2
  
  return context;
 200c250:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 200c254:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 200c258:	00808074 	movhi	r2,513
 200c25c:	108fd904 	addi	r2,r2,16228
 200c260:	10800017 	ldw	r2,0(r2)
 200c264:	10800d03 	ldbu	r2,52(r2)
 200c268:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 200c26c:	e13ffe03 	ldbu	r4,-8(fp)
 200c270:	e0fffe03 	ldbu	r3,-8(fp)
 200c274:	00808074 	movhi	r2,513
 200c278:	108fd644 	addi	r2,r2,16217
 200c27c:	10c5883a 	add	r2,r2,r3
 200c280:	10800003 	ldbu	r2,0(r2)
 200c284:	1007883a 	mov	r3,r2
 200c288:	00808074 	movhi	r2,513
 200c28c:	108fd904 	addi	r2,r2,16228
 200c290:	10800017 	ldw	r2,0(r2)
 200c294:	10800d43 	ldbu	r2,53(r2)
 200c298:	0084303a 	nor	r2,zero,r2
 200c29c:	1884703a 	and	r2,r3,r2
 200c2a0:	1007883a 	mov	r3,r2
 200c2a4:	00808074 	movhi	r2,513
 200c2a8:	108fd644 	addi	r2,r2,16217
 200c2ac:	1105883a 	add	r2,r2,r4
 200c2b0:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 200c2b4:	e0fffe03 	ldbu	r3,-8(fp)
 200c2b8:	00808074 	movhi	r2,513
 200c2bc:	108fd644 	addi	r2,r2,16217
 200c2c0:	10c5883a 	add	r2,r2,r3
 200c2c4:	10800003 	ldbu	r2,0(r2)
 200c2c8:	10803fcc 	andi	r2,r2,255
 200c2cc:	1004c03a 	cmpne	r2,r2,zero
 200c2d0:	10000e1e 	bne	r2,zero,200c30c <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 200c2d4:	00808074 	movhi	r2,513
 200c2d8:	108fd904 	addi	r2,r2,16228
 200c2dc:	10800017 	ldw	r2,0(r2)
 200c2e0:	10800d83 	ldbu	r2,54(r2)
 200c2e4:	0084303a 	nor	r2,zero,r2
 200c2e8:	1007883a 	mov	r3,r2
 200c2ec:	00808074 	movhi	r2,513
 200c2f0:	108fd604 	addi	r2,r2,16216
 200c2f4:	10800003 	ldbu	r2,0(r2)
 200c2f8:	1884703a 	and	r2,r3,r2
 200c2fc:	1007883a 	mov	r3,r2
 200c300:	00808074 	movhi	r2,513
 200c304:	108fd604 	addi	r2,r2,16216
 200c308:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 200c30c:	00808074 	movhi	r2,513
 200c310:	108fd904 	addi	r2,r2,16228
 200c314:	10c00017 	ldw	r3,0(r2)
 200c318:	e0bfff0b 	ldhu	r2,-4(fp)
 200c31c:	18800b8d 	sth	r2,46(r3)
 200c320:	e0bffd17 	ldw	r2,-12(fp)
 200c324:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c328:	e0bffb17 	ldw	r2,-20(fp)
 200c32c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 200c330:	2005f080 	call	2005f08 <OS_Sched>
    }
}
 200c334:	e037883a 	mov	sp,fp
 200c338:	dfc00117 	ldw	ra,4(sp)
 200c33c:	df000017 	ldw	fp,0(sp)
 200c340:	dec00204 	addi	sp,sp,8
 200c344:	f800283a 	ret

0200c348 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 200c348:	defff604 	addi	sp,sp,-40
 200c34c:	dfc00915 	stw	ra,36(sp)
 200c350:	df000815 	stw	fp,32(sp)
 200c354:	dc000715 	stw	r16,28(sp)
 200c358:	df000704 	addi	fp,sp,28
 200c35c:	e13ffb05 	stb	r4,-20(fp)
 200c360:	e17ffc05 	stb	r5,-16(fp)
 200c364:	e1bffd05 	stb	r6,-12(fp)
 200c368:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200c36c:	00808074 	movhi	r2,513
 200c370:	108fd804 	addi	r2,r2,16224
 200c374:	10800003 	ldbu	r2,0(r2)
 200c378:	10803fcc 	andi	r2,r2,255
 200c37c:	1005003a 	cmpeq	r2,r2,zero
 200c380:	1000031e 	bne	r2,zero,200c390 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 200c384:	00801544 	movi	r2,85
 200c388:	e0bfff15 	stw	r2,-4(fp)
 200c38c:	00004406 	br	200c4a0 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 200c390:	e0bffb03 	ldbu	r2,-20(fp)
 200c394:	1004c03a 	cmpne	r2,r2,zero
 200c398:	10000c1e 	bne	r2,zero,200c3cc <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 200c39c:	e0bffc03 	ldbu	r2,-16(fp)
 200c3a0:	1004c03a 	cmpne	r2,r2,zero
 200c3a4:	1000091e 	bne	r2,zero,200c3cc <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 200c3a8:	e0bffd03 	ldbu	r2,-12(fp)
 200c3ac:	1004c03a 	cmpne	r2,r2,zero
 200c3b0:	1000061e 	bne	r2,zero,200c3cc <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 200c3b4:	e0bffe0b 	ldhu	r2,-8(fp)
 200c3b8:	1004c03a 	cmpne	r2,r2,zero
 200c3bc:	1000031e 	bne	r2,zero,200c3cc <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 200c3c0:	00801504 	movi	r2,84
 200c3c4:	e0bfff15 	stw	r2,-4(fp)
 200c3c8:	00003506 	br	200c4a0 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
 200c3cc:	e0bffc03 	ldbu	r2,-16(fp)
 200c3d0:	10800f30 	cmpltui	r2,r2,60
 200c3d4:	1000031e 	bne	r2,zero,200c3e4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 200c3d8:	00801444 	movi	r2,81
 200c3dc:	e0bfff15 	stw	r2,-4(fp)
 200c3e0:	00002f06 	br	200c4a0 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
 200c3e4:	e0bffd03 	ldbu	r2,-12(fp)
 200c3e8:	10800f30 	cmpltui	r2,r2,60
 200c3ec:	1000031e 	bne	r2,zero,200c3fc <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 200c3f0:	00801484 	movi	r2,82
 200c3f4:	e0bfff15 	stw	r2,-4(fp)
 200c3f8:	00002906 	br	200c4a0 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
 200c3fc:	e0bffe0b 	ldhu	r2,-8(fp)
 200c400:	1080fa30 	cmpltui	r2,r2,1000
 200c404:	1000031e 	bne	r2,zero,200c414 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 200c408:	008014c4 	movi	r2,83
 200c40c:	e0bfff15 	stw	r2,-4(fp)
 200c410:	00002306 	br	200c4a0 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 200c414:	e0bffb03 	ldbu	r2,-20(fp)
 200c418:	10c38424 	muli	r3,r2,3600
 200c41c:	e0bffc03 	ldbu	r2,-16(fp)
 200c420:	10800f24 	muli	r2,r2,60
 200c424:	1887883a 	add	r3,r3,r2
 200c428:	e0bffd03 	ldbu	r2,-12(fp)
 200c42c:	1885883a 	add	r2,r3,r2
 200c430:	1400fa24 	muli	r16,r2,1000
 200c434:	e0bffe0b 	ldhu	r2,-8(fp)
 200c438:	1100fa24 	muli	r4,r2,1000
 200c43c:	0140fa04 	movi	r5,1000
 200c440:	20103cc0 	call	20103cc <__udivsi3>
 200c444:	8085883a 	add	r2,r16,r2
 200c448:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 200c44c:	e0bffa17 	ldw	r2,-24(fp)
 200c450:	1004d43a 	srli	r2,r2,16
 200c454:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 200c458:	e0bffa17 	ldw	r2,-24(fp)
 200c45c:	10bfffcc 	andi	r2,r2,65535
 200c460:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 200c464:	e0bffa17 	ldw	r2,-24(fp)
 200c468:	113fffcc 	andi	r4,r2,65535
 200c46c:	200c1fc0 	call	200c1fc <OSTimeDly>
    while (loops > 0) {
 200c470:	00000706 	br	200c490 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
 200c474:	01200014 	movui	r4,32768
 200c478:	200c1fc0 	call	200c1fc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 200c47c:	01200014 	movui	r4,32768
 200c480:	200c1fc0 	call	200c1fc <OSTimeDly>
        loops--;
 200c484:	e0bff90b 	ldhu	r2,-28(fp)
 200c488:	10bfffc4 	addi	r2,r2,-1
 200c48c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 200c490:	e0bff90b 	ldhu	r2,-28(fp)
 200c494:	1004c03a 	cmpne	r2,r2,zero
 200c498:	103ff61e 	bne	r2,zero,200c474 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 200c49c:	e03fff15 	stw	zero,-4(fp)
 200c4a0:	e0bfff17 	ldw	r2,-4(fp)
}
 200c4a4:	e037883a 	mov	sp,fp
 200c4a8:	dfc00217 	ldw	ra,8(sp)
 200c4ac:	df000117 	ldw	fp,4(sp)
 200c4b0:	dc000017 	ldw	r16,0(sp)
 200c4b4:	dec00304 	addi	sp,sp,12
 200c4b8:	f800283a 	ret

0200c4bc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 200c4bc:	defff404 	addi	sp,sp,-48
 200c4c0:	dfc00b15 	stw	ra,44(sp)
 200c4c4:	df000a15 	stw	fp,40(sp)
 200c4c8:	df000a04 	addi	fp,sp,40
 200c4cc:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 200c4d0:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 200c4d4:	e0bffe03 	ldbu	r2,-8(fp)
 200c4d8:	10800530 	cmpltui	r2,r2,20
 200c4dc:	1000031e 	bne	r2,zero,200c4ec <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 200c4e0:	00800a84 	movi	r2,42
 200c4e4:	e0bfff15 	stw	r2,-4(fp)
 200c4e8:	00007206 	br	200c6b4 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c4ec:	0005303a 	rdctl	r2,status
 200c4f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c4f4:	e0fffb17 	ldw	r3,-20(fp)
 200c4f8:	00bfff84 	movi	r2,-2
 200c4fc:	1884703a 	and	r2,r3,r2
 200c500:	1001703a 	wrctl	status,r2
  
  return context;
 200c504:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 200c508:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 200c50c:	e0bffe03 	ldbu	r2,-8(fp)
 200c510:	00c080b4 	movhi	r3,514
 200c514:	18e46304 	addi	r3,r3,-28276
 200c518:	1085883a 	add	r2,r2,r2
 200c51c:	1085883a 	add	r2,r2,r2
 200c520:	10c5883a 	add	r2,r2,r3
 200c524:	10800017 	ldw	r2,0(r2)
 200c528:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 200c52c:	e0bffd17 	ldw	r2,-12(fp)
 200c530:	1004c03a 	cmpne	r2,r2,zero
 200c534:	1000071e 	bne	r2,zero,200c554 <OSTimeDlyResume+0x98>
 200c538:	e0bffc17 	ldw	r2,-16(fp)
 200c53c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c540:	e0bffa17 	ldw	r2,-24(fp)
 200c544:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 200c548:	008010c4 	movi	r2,67
 200c54c:	e0bfff15 	stw	r2,-4(fp)
 200c550:	00005806 	br	200c6b4 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 200c554:	e0bffd17 	ldw	r2,-12(fp)
 200c558:	10800058 	cmpnei	r2,r2,1
 200c55c:	1000071e 	bne	r2,zero,200c57c <OSTimeDlyResume+0xc0>
 200c560:	e0bffc17 	ldw	r2,-16(fp)
 200c564:	e0bff915 	stw	r2,-28(fp)
 200c568:	e0bff917 	ldw	r2,-28(fp)
 200c56c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 200c570:	008010c4 	movi	r2,67
 200c574:	e0bfff15 	stw	r2,-4(fp)
 200c578:	00004e06 	br	200c6b4 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 200c57c:	e0bffd17 	ldw	r2,-12(fp)
 200c580:	10800b8b 	ldhu	r2,46(r2)
 200c584:	10bfffcc 	andi	r2,r2,65535
 200c588:	1004c03a 	cmpne	r2,r2,zero
 200c58c:	1000071e 	bne	r2,zero,200c5ac <OSTimeDlyResume+0xf0>
 200c590:	e0bffc17 	ldw	r2,-16(fp)
 200c594:	e0bff815 	stw	r2,-32(fp)
 200c598:	e0bff817 	ldw	r2,-32(fp)
 200c59c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 200c5a0:	00801404 	movi	r2,80
 200c5a4:	e0bfff15 	stw	r2,-4(fp)
 200c5a8:	00004206 	br	200c6b4 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 200c5ac:	e0bffd17 	ldw	r2,-12(fp)
 200c5b0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 200c5b4:	e0bffd17 	ldw	r2,-12(fp)
 200c5b8:	10800c03 	ldbu	r2,48(r2)
 200c5bc:	10803fcc 	andi	r2,r2,255
 200c5c0:	10800dcc 	andi	r2,r2,55
 200c5c4:	1005003a 	cmpeq	r2,r2,zero
 200c5c8:	10000b1e 	bne	r2,zero,200c5f8 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 200c5cc:	e0bffd17 	ldw	r2,-12(fp)
 200c5d0:	10c00c03 	ldbu	r3,48(r2)
 200c5d4:	00bff204 	movi	r2,-56
 200c5d8:	1884703a 	and	r2,r3,r2
 200c5dc:	1007883a 	mov	r3,r2
 200c5e0:	e0bffd17 	ldw	r2,-12(fp)
 200c5e4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 200c5e8:	e0fffd17 	ldw	r3,-12(fp)
 200c5ec:	00800044 	movi	r2,1
 200c5f0:	18800c45 	stb	r2,49(r3)
 200c5f4:	00000206 	br	200c600 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 200c5f8:	e0bffd17 	ldw	r2,-12(fp)
 200c5fc:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 200c600:	e0bffd17 	ldw	r2,-12(fp)
 200c604:	10800c03 	ldbu	r2,48(r2)
 200c608:	10803fcc 	andi	r2,r2,255
 200c60c:	1080020c 	andi	r2,r2,8
 200c610:	1004c03a 	cmpne	r2,r2,zero
 200c614:	1000221e 	bne	r2,zero,200c6a0 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 200c618:	e0bffd17 	ldw	r2,-12(fp)
 200c61c:	10c00d83 	ldbu	r3,54(r2)
 200c620:	00808074 	movhi	r2,513
 200c624:	108fd604 	addi	r2,r2,16216
 200c628:	10800003 	ldbu	r2,0(r2)
 200c62c:	1884b03a 	or	r2,r3,r2
 200c630:	1007883a 	mov	r3,r2
 200c634:	00808074 	movhi	r2,513
 200c638:	108fd604 	addi	r2,r2,16216
 200c63c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 200c640:	e0bffd17 	ldw	r2,-12(fp)
 200c644:	10800d03 	ldbu	r2,52(r2)
 200c648:	11003fcc 	andi	r4,r2,255
 200c64c:	e0bffd17 	ldw	r2,-12(fp)
 200c650:	10800d03 	ldbu	r2,52(r2)
 200c654:	10c03fcc 	andi	r3,r2,255
 200c658:	00808074 	movhi	r2,513
 200c65c:	108fd644 	addi	r2,r2,16217
 200c660:	10c5883a 	add	r2,r2,r3
 200c664:	10c00003 	ldbu	r3,0(r2)
 200c668:	e0bffd17 	ldw	r2,-12(fp)
 200c66c:	10800d43 	ldbu	r2,53(r2)
 200c670:	1884b03a 	or	r2,r3,r2
 200c674:	1007883a 	mov	r3,r2
 200c678:	00808074 	movhi	r2,513
 200c67c:	108fd644 	addi	r2,r2,16217
 200c680:	1105883a 	add	r2,r2,r4
 200c684:	10c00005 	stb	r3,0(r2)
 200c688:	e0bffc17 	ldw	r2,-16(fp)
 200c68c:	e0bff715 	stw	r2,-36(fp)
 200c690:	e0bff717 	ldw	r2,-36(fp)
 200c694:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 200c698:	2005f080 	call	2005f08 <OS_Sched>
 200c69c:	00000406 	br	200c6b0 <OSTimeDlyResume+0x1f4>
 200c6a0:	e0bffc17 	ldw	r2,-16(fp)
 200c6a4:	e0bff615 	stw	r2,-40(fp)
 200c6a8:	e0bff617 	ldw	r2,-40(fp)
 200c6ac:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 200c6b0:	e03fff15 	stw	zero,-4(fp)
 200c6b4:	e0bfff17 	ldw	r2,-4(fp)
}
 200c6b8:	e037883a 	mov	sp,fp
 200c6bc:	dfc00117 	ldw	ra,4(sp)
 200c6c0:	df000017 	ldw	fp,0(sp)
 200c6c4:	dec00204 	addi	sp,sp,8
 200c6c8:	f800283a 	ret

0200c6cc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 200c6cc:	defffb04 	addi	sp,sp,-20
 200c6d0:	df000415 	stw	fp,16(sp)
 200c6d4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200c6d8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c6dc:	0005303a 	rdctl	r2,status
 200c6e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c6e4:	e0fffd17 	ldw	r3,-12(fp)
 200c6e8:	00bfff84 	movi	r2,-2
 200c6ec:	1884703a 	and	r2,r3,r2
 200c6f0:	1001703a 	wrctl	status,r2
  
  return context;
 200c6f4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 200c6f8:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 200c6fc:	00808074 	movhi	r2,513
 200c700:	108fda04 	addi	r2,r2,16232
 200c704:	10800017 	ldw	r2,0(r2)
 200c708:	e0bfff15 	stw	r2,-4(fp)
 200c70c:	e0bffe17 	ldw	r2,-8(fp)
 200c710:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c714:	e0bffc17 	ldw	r2,-16(fp)
 200c718:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 200c71c:	e0bfff17 	ldw	r2,-4(fp)
}
 200c720:	e037883a 	mov	sp,fp
 200c724:	df000017 	ldw	fp,0(sp)
 200c728:	dec00104 	addi	sp,sp,4
 200c72c:	f800283a 	ret

0200c730 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 200c730:	defffb04 	addi	sp,sp,-20
 200c734:	df000415 	stw	fp,16(sp)
 200c738:	df000404 	addi	fp,sp,16
 200c73c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200c740:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c744:	0005303a 	rdctl	r2,status
 200c748:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c74c:	e0fffd17 	ldw	r3,-12(fp)
 200c750:	00bfff84 	movi	r2,-2
 200c754:	1884703a 	and	r2,r3,r2
 200c758:	1001703a 	wrctl	status,r2
  
  return context;
 200c75c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 200c760:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 200c764:	00c08074 	movhi	r3,513
 200c768:	18cfda04 	addi	r3,r3,16232
 200c76c:	e0bfff17 	ldw	r2,-4(fp)
 200c770:	18800015 	stw	r2,0(r3)
 200c774:	e0bffe17 	ldw	r2,-8(fp)
 200c778:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c77c:	e0bffc17 	ldw	r2,-16(fp)
 200c780:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 200c784:	e037883a 	mov	sp,fp
 200c788:	df000017 	ldw	fp,0(sp)
 200c78c:	dec00104 	addi	sp,sp,4
 200c790:	f800283a 	ret

0200c794 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200c794:	defffd04 	addi	sp,sp,-12
 200c798:	dfc00215 	stw	ra,8(sp)
 200c79c:	df000115 	stw	fp,4(sp)
 200c7a0:	df000104 	addi	fp,sp,4
 200c7a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 200c7a8:	200f4700 	call	200f470 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200c7ac:	00800044 	movi	r2,1
 200c7b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200c7b4:	e037883a 	mov	sp,fp
 200c7b8:	dfc00117 	ldw	ra,4(sp)
 200c7bc:	df000017 	ldw	fp,0(sp)
 200c7c0:	dec00204 	addi	sp,sp,8
 200c7c4:	f800283a 	ret

0200c7c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200c7c8:	defffe04 	addi	sp,sp,-8
 200c7cc:	dfc00115 	stw	ra,4(sp)
 200c7d0:	df000015 	stw	fp,0(sp)
 200c7d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 200c7d8:	01010034 	movhi	r4,1024
 200c7dc:	21061804 	addi	r4,r4,6240
 200c7e0:	000b883a 	mov	r5,zero
 200c7e4:	01800044 	movi	r6,1
 200c7e8:	01c0fa04 	movi	r7,1000
 200c7ec:	200e0240 	call	200e024 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
 200c7f0:	01008074 	movhi	r4,513
 200c7f4:	21043c04 	addi	r4,r4,4336
 200c7f8:	200c8740 	call	200c874 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 200c7fc:	01008074 	movhi	r4,513
 200c800:	21047804 	addi	r4,r4,4576
 200c804:	000b883a 	mov	r5,zero
 200c808:	01800084 	movi	r6,2
 200c80c:	200d3a00 	call	200d3a0 <altera_avalon_jtag_uart_init>
 200c810:	01008074 	movhi	r4,513
 200c814:	21046e04 	addi	r4,r4,4536
 200c818:	200c83c0 	call	200c83c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_DE0_NANO_ADC_INIT ( DE0_NANO_ADC_0, de0_nano_adc_0);
 200c81c:	01008074 	movhi	r4,513
 200c820:	21088904 	addi	r4,r4,8740
 200c824:	200c83c0 	call	200c83c <alt_dev_reg>
}
 200c828:	e037883a 	mov	sp,fp
 200c82c:	dfc00117 	ldw	ra,4(sp)
 200c830:	df000017 	ldw	fp,0(sp)
 200c834:	dec00204 	addi	sp,sp,8
 200c838:	f800283a 	ret

0200c83c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200c83c:	defffd04 	addi	sp,sp,-12
 200c840:	dfc00215 	stw	ra,8(sp)
 200c844:	df000115 	stw	fp,4(sp)
 200c848:	df000104 	addi	fp,sp,4
 200c84c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200c850:	e13fff17 	ldw	r4,-4(fp)
 200c854:	01408074 	movhi	r5,513
 200c858:	29489e04 	addi	r5,r5,8824
 200c85c:	200e9200 	call	200e920 <alt_dev_llist_insert>
}
 200c860:	e037883a 	mov	sp,fp
 200c864:	dfc00117 	ldw	ra,4(sp)
 200c868:	df000017 	ldw	fp,0(sp)
 200c86c:	dec00204 	addi	sp,sp,8
 200c870:	f800283a 	ret

0200c874 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 200c874:	defffc04 	addi	sp,sp,-16
 200c878:	dfc00315 	stw	ra,12(sp)
 200c87c:	df000215 	stw	fp,8(sp)
 200c880:	df000204 	addi	fp,sp,8
 200c884:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200c888:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 200c88c:	e13fff17 	ldw	r4,-4(fp)
 200c890:	200c9000 	call	200c900 <alt_epcs_flash_query>
 200c894:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 200c898:	e0bffe17 	ldw	r2,-8(fp)
 200c89c:	1004c03a 	cmpne	r2,r2,zero
 200c8a0:	1000031e 	bne	r2,zero,200c8b0 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 200c8a4:	e13fff17 	ldw	r4,-4(fp)
 200c8a8:	200c8c80 	call	200c8c8 <alt_flash_device_register>
 200c8ac:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 200c8b0:	e0bffe17 	ldw	r2,-8(fp)
}
 200c8b4:	e037883a 	mov	sp,fp
 200c8b8:	dfc00117 	ldw	ra,4(sp)
 200c8bc:	df000017 	ldw	fp,0(sp)
 200c8c0:	dec00204 	addi	sp,sp,8
 200c8c4:	f800283a 	ret

0200c8c8 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 200c8c8:	defffd04 	addi	sp,sp,-12
 200c8cc:	dfc00215 	stw	ra,8(sp)
 200c8d0:	df000115 	stw	fp,4(sp)
 200c8d4:	df000104 	addi	fp,sp,4
 200c8d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 200c8dc:	e13fff17 	ldw	r4,-4(fp)
 200c8e0:	01408074 	movhi	r5,513
 200c8e4:	2948c204 	addi	r5,r5,8968
 200c8e8:	200e9200 	call	200e920 <alt_dev_llist_insert>
}
 200c8ec:	e037883a 	mov	sp,fp
 200c8f0:	dfc00117 	ldw	ra,4(sp)
 200c8f4:	df000017 	ldw	fp,0(sp)
 200c8f8:	dec00204 	addi	sp,sp,8
 200c8fc:	f800283a 	ret

0200c900 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 200c900:	defffc04 	addi	sp,sp,-16
 200c904:	dfc00315 	stw	ra,12(sp)
 200c908:	df000215 	stw	fp,8(sp)
 200c90c:	df000204 	addi	fp,sp,8
 200c910:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200c914:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 200c918:	e0bfff17 	ldw	r2,-4(fp)
 200c91c:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 200c920:	e0bfff17 	ldw	r2,-4(fp)
 200c924:	11002d17 	ldw	r4,180(r2)
 200c928:	200e5ec0 	call	200e5ec <epcs_read_electronic_signature>
 200c92c:	10c03fcc 	andi	r3,r2,255
 200c930:	e0bfff17 	ldw	r2,-4(fp)
 200c934:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 200c938:	e0bfff17 	ldw	r2,-4(fp)
 200c93c:	10802f17 	ldw	r2,188(r2)
 200c940:	10800598 	cmpnei	r2,r2,22
 200c944:	10000a1e 	bne	r2,zero,200c970 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 200c948:	e0ffff17 	ldw	r3,-4(fp)
 200c94c:	00802034 	movhi	r2,128
 200c950:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 200c954:	e0ffff17 	ldw	r3,-4(fp)
 200c958:	00802004 	movi	r2,128
 200c95c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 200c960:	e0ffff17 	ldw	r3,-4(fp)
 200c964:	00800074 	movhi	r2,1
 200c968:	18801015 	stw	r2,64(r3)
 200c96c:	00007306 	br	200cb3c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 200c970:	e0bfff17 	ldw	r2,-4(fp)
 200c974:	10802f17 	ldw	r2,188(r2)
 200c978:	10800518 	cmpnei	r2,r2,20
 200c97c:	10000a1e 	bne	r2,zero,200c9a8 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 200c980:	e0ffff17 	ldw	r3,-4(fp)
 200c984:	00800834 	movhi	r2,32
 200c988:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 200c98c:	e0ffff17 	ldw	r3,-4(fp)
 200c990:	00800804 	movi	r2,32
 200c994:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 200c998:	e0ffff17 	ldw	r3,-4(fp)
 200c99c:	00800074 	movhi	r2,1
 200c9a0:	18801015 	stw	r2,64(r3)
 200c9a4:	00006506 	br	200cb3c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 200c9a8:	e0bfff17 	ldw	r2,-4(fp)
 200c9ac:	10802f17 	ldw	r2,188(r2)
 200c9b0:	108004d8 	cmpnei	r2,r2,19
 200c9b4:	10000a1e 	bne	r2,zero,200c9e0 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 200c9b8:	e0ffff17 	ldw	r3,-4(fp)
 200c9bc:	00800434 	movhi	r2,16
 200c9c0:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 200c9c4:	e0ffff17 	ldw	r3,-4(fp)
 200c9c8:	00800404 	movi	r2,16
 200c9cc:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 200c9d0:	e0ffff17 	ldw	r3,-4(fp)
 200c9d4:	00800074 	movhi	r2,1
 200c9d8:	18801015 	stw	r2,64(r3)
 200c9dc:	00005706 	br	200cb3c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 200c9e0:	e0bfff17 	ldw	r2,-4(fp)
 200c9e4:	10802f17 	ldw	r2,188(r2)
 200c9e8:	10800498 	cmpnei	r2,r2,18
 200c9ec:	10000a1e 	bne	r2,zero,200ca18 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 200c9f0:	e0ffff17 	ldw	r3,-4(fp)
 200c9f4:	00800234 	movhi	r2,8
 200c9f8:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 200c9fc:	e0ffff17 	ldw	r3,-4(fp)
 200ca00:	00800204 	movi	r2,8
 200ca04:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 200ca08:	e0ffff17 	ldw	r3,-4(fp)
 200ca0c:	00800074 	movhi	r2,1
 200ca10:	18801015 	stw	r2,64(r3)
 200ca14:	00004906 	br	200cb3c <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 200ca18:	e0bfff17 	ldw	r2,-4(fp)
 200ca1c:	10802f17 	ldw	r2,188(r2)
 200ca20:	10800418 	cmpnei	r2,r2,16
 200ca24:	10000a1e 	bne	r2,zero,200ca50 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 200ca28:	e0ffff17 	ldw	r3,-4(fp)
 200ca2c:	008000b4 	movhi	r2,2
 200ca30:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 200ca34:	e0ffff17 	ldw	r3,-4(fp)
 200ca38:	00800104 	movi	r2,4
 200ca3c:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 200ca40:	e0ffff17 	ldw	r3,-4(fp)
 200ca44:	00a00014 	movui	r2,32768
 200ca48:	18801015 	stw	r2,64(r3)
 200ca4c:	00003b06 	br	200cb3c <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 200ca50:	e0bfff17 	ldw	r2,-4(fp)
 200ca54:	11002d17 	ldw	r4,180(r2)
 200ca58:	200e6580 	call	200e658 <epcs_read_device_id>
 200ca5c:	1007883a 	mov	r3,r2
 200ca60:	e0bfff17 	ldw	r2,-4(fp)
 200ca64:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 200ca68:	e0bfff17 	ldw	r2,-4(fp)
 200ca6c:	10c02f17 	ldw	r3,188(r2)
 200ca70:	00804034 	movhi	r2,256
 200ca74:	10bfffc4 	addi	r2,r2,-1
 200ca78:	1886703a 	and	r3,r3,r2
 200ca7c:	00800874 	movhi	r2,33
 200ca80:	10ae8604 	addi	r2,r2,-17896
 200ca84:	18800a1e 	bne	r3,r2,200cab0 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200ca88:	e0ffff17 	ldw	r3,-4(fp)
 200ca8c:	00804034 	movhi	r2,256
 200ca90:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 200ca94:	e0ffff17 	ldw	r3,-4(fp)
 200ca98:	00804004 	movi	r2,256
 200ca9c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200caa0:	e0ffff17 	ldw	r3,-4(fp)
 200caa4:	00800074 	movhi	r2,1
 200caa8:	18801015 	stw	r2,64(r3)
 200caac:	00002306 	br	200cb3c <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 200cab0:	e0bfff17 	ldw	r2,-4(fp)
 200cab4:	10802f17 	ldw	r2,188(r2)
 200cab8:	10803fcc 	andi	r2,r2,255
 200cabc:	10800618 	cmpnei	r2,r2,24
 200cac0:	10000a1e 	bne	r2,zero,200caec <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200cac4:	e0ffff17 	ldw	r3,-4(fp)
 200cac8:	00804034 	movhi	r2,256
 200cacc:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 200cad0:	e0ffff17 	ldw	r3,-4(fp)
 200cad4:	00801004 	movi	r2,64
 200cad8:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 200cadc:	e0ffff17 	ldw	r3,-4(fp)
 200cae0:	00800134 	movhi	r2,4
 200cae4:	18801015 	stw	r2,64(r3)
 200cae8:	00001406 	br	200cb3c <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 200caec:	e0bfff17 	ldw	r2,-4(fp)
 200caf0:	10802f17 	ldw	r2,188(r2)
 200caf4:	10803fcc 	andi	r2,r2,255
 200caf8:	10800658 	cmpnei	r2,r2,25
 200cafc:	10000d1e 	bne	r2,zero,200cb34 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 200cb00:	e0ffff17 	ldw	r3,-4(fp)
 200cb04:	00808034 	movhi	r2,512
 200cb08:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 200cb0c:	e0ffff17 	ldw	r3,-4(fp)
 200cb10:	00808004 	movi	r2,512
 200cb14:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200cb18:	e0ffff17 	ldw	r3,-4(fp)
 200cb1c:	00800074 	movhi	r2,1
 200cb20:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 200cb24:	e0ffff17 	ldw	r3,-4(fp)
 200cb28:	00800044 	movi	r2,1
 200cb2c:	18803115 	stw	r2,196(r3)
 200cb30:	00000206 	br	200cb3c <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 200cb34:	00bffb44 	movi	r2,-19
 200cb38:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 200cb3c:	e0bfff17 	ldw	r2,-4(fp)
 200cb40:	10800e17 	ldw	r2,56(r2)
 200cb44:	1007883a 	mov	r3,r2
 200cb48:	e0bfff17 	ldw	r2,-4(fp)
 200cb4c:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 200cb50:	e0ffff17 	ldw	r3,-4(fp)
 200cb54:	00800044 	movi	r2,1
 200cb58:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 200cb5c:	e0bfff17 	ldw	r2,-4(fp)
 200cb60:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 200cb64:	e0ffff17 	ldw	r3,-4(fp)
 200cb68:	00804004 	movi	r2,256
 200cb6c:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 200cb70:	e0bffe17 	ldw	r2,-8(fp)
}
 200cb74:	e037883a 	mov	sp,fp
 200cb78:	dfc00117 	ldw	ra,4(sp)
 200cb7c:	df000017 	ldw	fp,0(sp)
 200cb80:	dec00204 	addi	sp,sp,8
 200cb84:	f800283a 	ret

0200cb88 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 200cb88:	deffeb04 	addi	sp,sp,-84
 200cb8c:	dfc01415 	stw	ra,80(sp)
 200cb90:	df001315 	stw	fp,76(sp)
 200cb94:	df001304 	addi	fp,sp,76
 200cb98:	e13ff915 	stw	r4,-28(fp)
 200cb9c:	e17ffa15 	stw	r5,-24(fp)
 200cba0:	e1bffb15 	stw	r6,-20(fp)
 200cba4:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 200cba8:	00800804 	movi	r2,32
 200cbac:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 200cbb0:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 200cbb4:	00002c06 	br	200cc68 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 200cbb8:	e0bff017 	ldw	r2,-64(fp)
 200cbbc:	e0bfff15 	stw	r2,-4(fp)
 200cbc0:	e0fffc17 	ldw	r3,-16(fp)
 200cbc4:	e0fffe15 	stw	r3,-8(fp)
 200cbc8:	e0bfff17 	ldw	r2,-4(fp)
 200cbcc:	e0fffe17 	ldw	r3,-8(fp)
 200cbd0:	10c0022e 	bgeu	r2,r3,200cbdc <alt_epcs_flash_memcmp+0x54>
 200cbd4:	e0bfff17 	ldw	r2,-4(fp)
 200cbd8:	e0bffe15 	stw	r2,-8(fp)
 200cbdc:	e0fffe17 	ldw	r3,-8(fp)
 200cbe0:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 200cbe4:	e0fffb17 	ldw	r3,-20(fp)
 200cbe8:	e0bfef17 	ldw	r2,-68(fp)
 200cbec:	188b883a 	add	r5,r3,r2
 200cbf0:	e1bff104 	addi	r6,fp,-60
 200cbf4:	e13ff917 	ldw	r4,-28(fp)
 200cbf8:	e1ffee17 	ldw	r7,-72(fp)
 200cbfc:	200d1c00 	call	200d1c0 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 200cc00:	1004403a 	cmpge	r2,r2,zero
 200cc04:	1000031e 	bne	r2,zero,200cc14 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 200cc08:	00bfffc4 	movi	r2,-1
 200cc0c:	e0bffd15 	stw	r2,-12(fp)
 200cc10:	00001906 	br	200cc78 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 200cc14:	e0fffa17 	ldw	r3,-24(fp)
 200cc18:	e0bfef17 	ldw	r2,-68(fp)
 200cc1c:	1889883a 	add	r4,r3,r2
 200cc20:	e1bfee17 	ldw	r6,-72(fp)
 200cc24:	e17ff104 	addi	r5,fp,-60
 200cc28:	200ff340 	call	200ff34 <memcmp>
 200cc2c:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 200cc30:	e0bfed17 	ldw	r2,-76(fp)
 200cc34:	1005003a 	cmpeq	r2,r2,zero
 200cc38:	1000031e 	bne	r2,zero,200cc48 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 200cc3c:	e0ffed17 	ldw	r3,-76(fp)
 200cc40:	e0fffd15 	stw	r3,-12(fp)
 200cc44:	00000c06 	br	200cc78 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 200cc48:	e0ffee17 	ldw	r3,-72(fp)
 200cc4c:	e0bffc17 	ldw	r2,-16(fp)
 200cc50:	10c5c83a 	sub	r2,r2,r3
 200cc54:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 200cc58:	e0ffef17 	ldw	r3,-68(fp)
 200cc5c:	e0bfee17 	ldw	r2,-72(fp)
 200cc60:	1885883a 	add	r2,r3,r2
 200cc64:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 200cc68:	e0bffc17 	ldw	r2,-16(fp)
 200cc6c:	1004c03a 	cmpne	r2,r2,zero
 200cc70:	103fd11e 	bne	r2,zero,200cbb8 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 200cc74:	e03ffd15 	stw	zero,-12(fp)
 200cc78:	e0bffd17 	ldw	r2,-12(fp)
}
 200cc7c:	e037883a 	mov	sp,fp
 200cc80:	dfc00117 	ldw	ra,4(sp)
 200cc84:	df000017 	ldw	fp,0(sp)
 200cc88:	dec00204 	addi	sp,sp,8
 200cc8c:	f800283a 	ret

0200cc90 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 200cc90:	defff204 	addi	sp,sp,-56
 200cc94:	dfc00d15 	stw	ra,52(sp)
 200cc98:	df000c15 	stw	fp,48(sp)
 200cc9c:	df000c04 	addi	fp,sp,48
 200cca0:	e13ffa15 	stw	r4,-24(fp)
 200cca4:	e17ffb15 	stw	r5,-20(fp)
 200cca8:	e1bffc15 	stw	r6,-16(fp)
 200ccac:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 200ccb0:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200ccb4:	e03ff815 	stw	zero,-32(fp)
 200ccb8:	00008b06 	br	200cee8 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 200ccbc:	e0bff817 	ldw	r2,-32(fp)
 200ccc0:	e0fffa17 	ldw	r3,-24(fp)
 200ccc4:	1004913a 	slli	r2,r2,4
 200ccc8:	10c5883a 	add	r2,r2,r3
 200cccc:	10800d04 	addi	r2,r2,52
 200ccd0:	10c00017 	ldw	r3,0(r2)
 200ccd4:	e0bffb17 	ldw	r2,-20(fp)
 200ccd8:	10c08016 	blt	r2,r3,200cedc <alt_epcs_flash_write+0x24c>
 200ccdc:	e0bff817 	ldw	r2,-32(fp)
 200cce0:	e0fffa17 	ldw	r3,-24(fp)
 200cce4:	1004913a 	slli	r2,r2,4
 200cce8:	10c5883a 	add	r2,r2,r3
 200ccec:	10800d04 	addi	r2,r2,52
 200ccf0:	11000017 	ldw	r4,0(r2)
 200ccf4:	e0bff817 	ldw	r2,-32(fp)
 200ccf8:	e0fffa17 	ldw	r3,-24(fp)
 200ccfc:	1004913a 	slli	r2,r2,4
 200cd00:	10c5883a 	add	r2,r2,r3
 200cd04:	10800e04 	addi	r2,r2,56
 200cd08:	10800017 	ldw	r2,0(r2)
 200cd0c:	2087883a 	add	r3,r4,r2
 200cd10:	e0bffb17 	ldw	r2,-20(fp)
 200cd14:	10c0710e 	bge	r2,r3,200cedc <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 200cd18:	e0bff817 	ldw	r2,-32(fp)
 200cd1c:	e0fffa17 	ldw	r3,-24(fp)
 200cd20:	1004913a 	slli	r2,r2,4
 200cd24:	10c5883a 	add	r2,r2,r3
 200cd28:	10800d04 	addi	r2,r2,52
 200cd2c:	10800017 	ldw	r2,0(r2)
 200cd30:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200cd34:	e03ff715 	stw	zero,-36(fp)
 200cd38:	00006006 	br	200cebc <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 200cd3c:	e0fffb17 	ldw	r3,-20(fp)
 200cd40:	e0bff517 	ldw	r2,-44(fp)
 200cd44:	18805116 	blt	r3,r2,200ce8c <alt_epcs_flash_write+0x1fc>
 200cd48:	e0bff817 	ldw	r2,-32(fp)
 200cd4c:	e0fffa17 	ldw	r3,-24(fp)
 200cd50:	1004913a 	slli	r2,r2,4
 200cd54:	10c5883a 	add	r2,r2,r3
 200cd58:	10801004 	addi	r2,r2,64
 200cd5c:	10c00017 	ldw	r3,0(r2)
 200cd60:	e0bff517 	ldw	r2,-44(fp)
 200cd64:	1887883a 	add	r3,r3,r2
 200cd68:	e0bffb17 	ldw	r2,-20(fp)
 200cd6c:	10c0470e 	bge	r2,r3,200ce8c <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 200cd70:	e0bff817 	ldw	r2,-32(fp)
 200cd74:	e0fffa17 	ldw	r3,-24(fp)
 200cd78:	1004913a 	slli	r2,r2,4
 200cd7c:	10c5883a 	add	r2,r2,r3
 200cd80:	10801004 	addi	r2,r2,64
 200cd84:	10c00017 	ldw	r3,0(r2)
 200cd88:	e0bff517 	ldw	r2,-44(fp)
 200cd8c:	1887883a 	add	r3,r3,r2
 200cd90:	e0bffb17 	ldw	r2,-20(fp)
 200cd94:	1885c83a 	sub	r2,r3,r2
 200cd98:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 200cd9c:	e0bff617 	ldw	r2,-40(fp)
 200cda0:	e0bfff15 	stw	r2,-4(fp)
 200cda4:	e0fffd17 	ldw	r3,-12(fp)
 200cda8:	e0fffe15 	stw	r3,-8(fp)
 200cdac:	e0bfff17 	ldw	r2,-4(fp)
 200cdb0:	e0fffe17 	ldw	r3,-8(fp)
 200cdb4:	10c0020e 	bge	r2,r3,200cdc0 <alt_epcs_flash_write+0x130>
 200cdb8:	e0bfff17 	ldw	r2,-4(fp)
 200cdbc:	e0bffe15 	stw	r2,-8(fp)
 200cdc0:	e0fffe17 	ldw	r3,-8(fp)
 200cdc4:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 200cdc8:	e1fff617 	ldw	r7,-40(fp)
 200cdcc:	e13ffa17 	ldw	r4,-24(fp)
 200cdd0:	e17ffc17 	ldw	r5,-16(fp)
 200cdd4:	e1bffb17 	ldw	r6,-20(fp)
 200cdd8:	200cb880 	call	200cb88 <alt_epcs_flash_memcmp>
 200cddc:	1005003a 	cmpeq	r2,r2,zero
 200cde0:	1000131e 	bne	r2,zero,200ce30 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 200cde4:	e0bffa17 	ldw	r2,-24(fp)
 200cde8:	10800817 	ldw	r2,32(r2)
 200cdec:	e13ffa17 	ldw	r4,-24(fp)
 200cdf0:	e17ff517 	ldw	r5,-44(fp)
 200cdf4:	103ee83a 	callr	r2
 200cdf8:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 200cdfc:	e0bff917 	ldw	r2,-28(fp)
 200ce00:	1004c03a 	cmpne	r2,r2,zero
 200ce04:	10000a1e 	bne	r2,zero,200ce30 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 200ce08:	e0bffa17 	ldw	r2,-24(fp)
 200ce0c:	10c00917 	ldw	r3,36(r2)
 200ce10:	e0bff617 	ldw	r2,-40(fp)
 200ce14:	d8800015 	stw	r2,0(sp)
 200ce18:	e13ffa17 	ldw	r4,-24(fp)
 200ce1c:	e17ff517 	ldw	r5,-44(fp)
 200ce20:	e1bffb17 	ldw	r6,-20(fp)
 200ce24:	e1fffc17 	ldw	r7,-16(fp)
 200ce28:	183ee83a 	callr	r3
 200ce2c:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 200ce30:	e0fffd17 	ldw	r3,-12(fp)
 200ce34:	e0bff617 	ldw	r2,-40(fp)
 200ce38:	18802f26 	beq	r3,r2,200cef8 <alt_epcs_flash_write+0x268>
 200ce3c:	e0bff917 	ldw	r2,-28(fp)
 200ce40:	1004c03a 	cmpne	r2,r2,zero
 200ce44:	10002c1e 	bne	r2,zero,200cef8 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 200ce48:	e0fffd17 	ldw	r3,-12(fp)
 200ce4c:	e0bff617 	ldw	r2,-40(fp)
 200ce50:	1885c83a 	sub	r2,r3,r2
 200ce54:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 200ce58:	e0bff817 	ldw	r2,-32(fp)
 200ce5c:	e0fffa17 	ldw	r3,-24(fp)
 200ce60:	1004913a 	slli	r2,r2,4
 200ce64:	10c5883a 	add	r2,r2,r3
 200ce68:	10801004 	addi	r2,r2,64
 200ce6c:	10c00017 	ldw	r3,0(r2)
 200ce70:	e0bff517 	ldw	r2,-44(fp)
 200ce74:	1885883a 	add	r2,r3,r2
 200ce78:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 200ce7c:	e0fffc17 	ldw	r3,-16(fp)
 200ce80:	e0bff617 	ldw	r2,-40(fp)
 200ce84:	1885883a 	add	r2,r3,r2
 200ce88:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 200ce8c:	e0bff817 	ldw	r2,-32(fp)
 200ce90:	e0fffa17 	ldw	r3,-24(fp)
 200ce94:	1004913a 	slli	r2,r2,4
 200ce98:	10c5883a 	add	r2,r2,r3
 200ce9c:	10801004 	addi	r2,r2,64
 200cea0:	10c00017 	ldw	r3,0(r2)
 200cea4:	e0bff517 	ldw	r2,-44(fp)
 200cea8:	10c5883a 	add	r2,r2,r3
 200ceac:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200ceb0:	e0bff717 	ldw	r2,-36(fp)
 200ceb4:	10800044 	addi	r2,r2,1
 200ceb8:	e0bff715 	stw	r2,-36(fp)
 200cebc:	e0bff817 	ldw	r2,-32(fp)
 200cec0:	e0fffa17 	ldw	r3,-24(fp)
 200cec4:	1004913a 	slli	r2,r2,4
 200cec8:	10c5883a 	add	r2,r2,r3
 200cecc:	10800f04 	addi	r2,r2,60
 200ced0:	10c00017 	ldw	r3,0(r2)
 200ced4:	e0bff717 	ldw	r2,-36(fp)
 200ced8:	10ff9816 	blt	r2,r3,200cd3c <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200cedc:	e0bff817 	ldw	r2,-32(fp)
 200cee0:	10800044 	addi	r2,r2,1
 200cee4:	e0bff815 	stw	r2,-32(fp)
 200cee8:	e0bffa17 	ldw	r2,-24(fp)
 200ceec:	10c00c17 	ldw	r3,48(r2)
 200cef0:	e0bff817 	ldw	r2,-32(fp)
 200cef4:	10ff7116 	blt	r2,r3,200ccbc <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 200cef8:	e0bff917 	ldw	r2,-28(fp)
}
 200cefc:	e037883a 	mov	sp,fp
 200cf00:	dfc00117 	ldw	ra,4(sp)
 200cf04:	df000017 	ldw	fp,0(sp)
 200cf08:	dec00204 	addi	sp,sp,8
 200cf0c:	f800283a 	ret

0200cf10 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 200cf10:	defffa04 	addi	sp,sp,-24
 200cf14:	df000515 	stw	fp,20(sp)
 200cf18:	df000504 	addi	fp,sp,20
 200cf1c:	e13ffd15 	stw	r4,-12(fp)
 200cf20:	e17ffe15 	stw	r5,-8(fp)
 200cf24:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 200cf28:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 200cf2c:	e0bffd17 	ldw	r2,-12(fp)
 200cf30:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 200cf34:	e0bffb17 	ldw	r2,-20(fp)
 200cf38:	10c00c17 	ldw	r3,48(r2)
 200cf3c:	e0bfff17 	ldw	r2,-4(fp)
 200cf40:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 200cf44:	e0bffb17 	ldw	r2,-20(fp)
 200cf48:	10800c17 	ldw	r2,48(r2)
 200cf4c:	1004c03a 	cmpne	r2,r2,zero
 200cf50:	1000031e 	bne	r2,zero,200cf60 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 200cf54:	00bffec4 	movi	r2,-5
 200cf58:	e0bffc15 	stw	r2,-16(fp)
 200cf5c:	00000b06 	br	200cf8c <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 200cf60:	e0bffb17 	ldw	r2,-20(fp)
 200cf64:	10800c17 	ldw	r2,48(r2)
 200cf68:	10800250 	cmplti	r2,r2,9
 200cf6c:	1000031e 	bne	r2,zero,200cf7c <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 200cf70:	00bffd04 	movi	r2,-12
 200cf74:	e0bffc15 	stw	r2,-16(fp)
 200cf78:	00000406 	br	200cf8c <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 200cf7c:	e0bffb17 	ldw	r2,-20(fp)
 200cf80:	10c00d04 	addi	r3,r2,52
 200cf84:	e0bffe17 	ldw	r2,-8(fp)
 200cf88:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 200cf8c:	e0bffc17 	ldw	r2,-16(fp)
}
 200cf90:	e037883a 	mov	sp,fp
 200cf94:	df000017 	ldw	fp,0(sp)
 200cf98:	dec00104 	addi	sp,sp,4
 200cf9c:	f800283a 	ret

0200cfa0 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 200cfa0:	defffa04 	addi	sp,sp,-24
 200cfa4:	dfc00515 	stw	ra,20(sp)
 200cfa8:	df000415 	stw	fp,16(sp)
 200cfac:	df000404 	addi	fp,sp,16
 200cfb0:	e13ffe15 	stw	r4,-8(fp)
 200cfb4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200cfb8:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200cfbc:	e0bffe17 	ldw	r2,-8(fp)
 200cfc0:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 200cfc4:	e13ffe17 	ldw	r4,-8(fp)
 200cfc8:	e17fff17 	ldw	r5,-4(fp)
 200cfcc:	200d0100 	call	200d010 <alt_epcs_test_address>
 200cfd0:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 200cfd4:	e0bffd17 	ldw	r2,-12(fp)
 200cfd8:	1004803a 	cmplt	r2,r2,zero
 200cfdc:	1000061e 	bne	r2,zero,200cff8 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 200cfe0:	e0bffc17 	ldw	r2,-16(fp)
 200cfe4:	11002d17 	ldw	r4,180(r2)
 200cfe8:	e17fff17 	ldw	r5,-4(fp)
 200cfec:	e0bffc17 	ldw	r2,-16(fp)
 200cff0:	11803117 	ldw	r6,196(r2)
 200cff4:	200e1140 	call	200e114 <epcs_sector_erase>
  }
  return ret_code;
 200cff8:	e0bffd17 	ldw	r2,-12(fp)
}
 200cffc:	e037883a 	mov	sp,fp
 200d000:	dfc00117 	ldw	ra,4(sp)
 200d004:	df000017 	ldw	fp,0(sp)
 200d008:	dec00204 	addi	sp,sp,8
 200d00c:	f800283a 	ret

0200d010 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 200d010:	defff904 	addi	sp,sp,-28
 200d014:	df000615 	stw	fp,24(sp)
 200d018:	df000604 	addi	fp,sp,24
 200d01c:	e13ffe15 	stw	r4,-8(fp)
 200d020:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200d024:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200d028:	e0bffe17 	ldw	r2,-8(fp)
 200d02c:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 200d030:	e0bffc17 	ldw	r2,-16(fp)
 200d034:	10800c17 	ldw	r2,48(r2)
 200d038:	10bfffc4 	addi	r2,r2,-1
 200d03c:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 200d040:	e0bffb17 	ldw	r2,-20(fp)
 200d044:	e0fffc17 	ldw	r3,-16(fp)
 200d048:	1004913a 	slli	r2,r2,4
 200d04c:	10c5883a 	add	r2,r2,r3
 200d050:	10800d04 	addi	r2,r2,52
 200d054:	11000017 	ldw	r4,0(r2)
 200d058:	e0bffb17 	ldw	r2,-20(fp)
 200d05c:	e0fffc17 	ldw	r3,-16(fp)
 200d060:	1004913a 	slli	r2,r2,4
 200d064:	10c5883a 	add	r2,r2,r3
 200d068:	10800e04 	addi	r2,r2,56
 200d06c:	10800017 	ldw	r2,0(r2)
 200d070:	2085883a 	add	r2,r4,r2
 200d074:	10bfffc4 	addi	r2,r2,-1
 200d078:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 200d07c:	e0ffff17 	ldw	r3,-4(fp)
 200d080:	e0bffa17 	ldw	r2,-24(fp)
 200d084:	10c0022e 	bgeu	r2,r3,200d090 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 200d088:	00bffec4 	movi	r2,-5
 200d08c:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 200d090:	e0bffd17 	ldw	r2,-12(fp)
}
 200d094:	e037883a 	mov	sp,fp
 200d098:	df000017 	ldw	fp,0(sp)
 200d09c:	dec00104 	addi	sp,sp,4
 200d0a0:	f800283a 	ret

0200d0a4 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 200d0a4:	defff204 	addi	sp,sp,-56
 200d0a8:	dfc00d15 	stw	ra,52(sp)
 200d0ac:	df000c15 	stw	fp,48(sp)
 200d0b0:	df000c04 	addi	fp,sp,48
 200d0b4:	e13ffa15 	stw	r4,-24(fp)
 200d0b8:	e17ffb15 	stw	r5,-20(fp)
 200d0bc:	e1bffc15 	stw	r6,-16(fp)
 200d0c0:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200d0c4:	e0bffa17 	ldw	r2,-24(fp)
 200d0c8:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 200d0cc:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 200d0d0:	e13ffa17 	ldw	r4,-24(fp)
 200d0d4:	e17ffc17 	ldw	r5,-16(fp)
 200d0d8:	200d0100 	call	200d010 <alt_epcs_test_address>
 200d0dc:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 200d0e0:	e0bff917 	ldw	r2,-28(fp)
 200d0e4:	1004803a 	cmplt	r2,r2,zero
 200d0e8:	10002f1e 	bne	r2,zero,200d1a8 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200d0ec:	00002b06 	br	200d19c <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 200d0f0:	e0bff817 	ldw	r2,-32(fp)
 200d0f4:	10c03017 	ldw	r3,192(r2)
 200d0f8:	e0bffc17 	ldw	r2,-16(fp)
 200d0fc:	1887883a 	add	r3,r3,r2
 200d100:	e0bff817 	ldw	r2,-32(fp)
 200d104:	10803017 	ldw	r2,192(r2)
 200d108:	0085c83a 	sub	r2,zero,r2
 200d10c:	1884703a 	and	r2,r3,r2
 200d110:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 200d114:	e0fff517 	ldw	r3,-44(fp)
 200d118:	e0bffc17 	ldw	r2,-16(fp)
 200d11c:	1885c83a 	sub	r2,r3,r2
 200d120:	e0c00217 	ldw	r3,8(fp)
 200d124:	e0ffff15 	stw	r3,-4(fp)
 200d128:	e0bffe15 	stw	r2,-8(fp)
 200d12c:	e0bfff17 	ldw	r2,-4(fp)
 200d130:	e0fffe17 	ldw	r3,-8(fp)
 200d134:	10c0020e 	bge	r2,r3,200d140 <alt_epcs_flash_write_block+0x9c>
 200d138:	e0bfff17 	ldw	r2,-4(fp)
 200d13c:	e0bffe15 	stw	r2,-8(fp)
 200d140:	e0fffe17 	ldw	r3,-8(fp)
 200d144:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 200d148:	e0bff817 	ldw	r2,-32(fp)
 200d14c:	11002d17 	ldw	r4,180(r2)
 200d150:	e0fffd17 	ldw	r3,-12(fp)
 200d154:	e0bff717 	ldw	r2,-36(fp)
 200d158:	188d883a 	add	r6,r3,r2
 200d15c:	e0bff817 	ldw	r2,-32(fp)
 200d160:	10803117 	ldw	r2,196(r2)
 200d164:	d8800015 	stw	r2,0(sp)
 200d168:	e17ffc17 	ldw	r5,-16(fp)
 200d16c:	e1fff617 	ldw	r7,-40(fp)
 200d170:	200e47c0 	call	200e47c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 200d174:	e0c00217 	ldw	r3,8(fp)
 200d178:	e0bff617 	ldw	r2,-40(fp)
 200d17c:	1885c83a 	sub	r2,r3,r2
 200d180:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 200d184:	e0fff717 	ldw	r3,-36(fp)
 200d188:	e0bff617 	ldw	r2,-40(fp)
 200d18c:	1885883a 	add	r2,r3,r2
 200d190:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 200d194:	e0bff517 	ldw	r2,-44(fp)
 200d198:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200d19c:	e0800217 	ldw	r2,8(fp)
 200d1a0:	1004c03a 	cmpne	r2,r2,zero
 200d1a4:	103fd21e 	bne	r2,zero,200d0f0 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 200d1a8:	e0bff917 	ldw	r2,-28(fp)
}
 200d1ac:	e037883a 	mov	sp,fp
 200d1b0:	dfc00117 	ldw	ra,4(sp)
 200d1b4:	df000017 	ldw	fp,0(sp)
 200d1b8:	dec00204 	addi	sp,sp,8
 200d1bc:	f800283a 	ret

0200d1c0 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 200d1c0:	defff704 	addi	sp,sp,-36
 200d1c4:	dfc00815 	stw	ra,32(sp)
 200d1c8:	df000715 	stw	fp,28(sp)
 200d1cc:	df000704 	addi	fp,sp,28
 200d1d0:	e13ffc15 	stw	r4,-16(fp)
 200d1d4:	e17ffd15 	stw	r5,-12(fp)
 200d1d8:	e1bffe15 	stw	r6,-8(fp)
 200d1dc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 200d1e0:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200d1e4:	e0bffc17 	ldw	r2,-16(fp)
 200d1e8:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 200d1ec:	e13ffc17 	ldw	r4,-16(fp)
 200d1f0:	e17ffd17 	ldw	r5,-12(fp)
 200d1f4:	200d0100 	call	200d010 <alt_epcs_test_address>
 200d1f8:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 200d1fc:	e0bffb17 	ldw	r2,-20(fp)
 200d200:	1004803a 	cmplt	r2,r2,zero
 200d204:	10000e1e 	bne	r2,zero,200d240 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 200d208:	e0bffa17 	ldw	r2,-24(fp)
 200d20c:	11002d17 	ldw	r4,180(r2)
 200d210:	e1bffe17 	ldw	r6,-8(fp)
 200d214:	e0bffa17 	ldw	r2,-24(fp)
 200d218:	10803117 	ldw	r2,196(r2)
 200d21c:	d8800015 	stw	r2,0(sp)
 200d220:	e17ffd17 	ldw	r5,-12(fp)
 200d224:	e1ffff17 	ldw	r7,-4(fp)
 200d228:	200e27c0 	call	200e27c <epcs_read_buffer>
 200d22c:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 200d230:	e0fffb17 	ldw	r3,-20(fp)
 200d234:	e0bfff17 	ldw	r2,-4(fp)
 200d238:	1880011e 	bne	r3,r2,200d240 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 200d23c:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 200d240:	e0bffb17 	ldw	r2,-20(fp)
}
 200d244:	e037883a 	mov	sp,fp
 200d248:	dfc00117 	ldw	ra,4(sp)
 200d24c:	df000017 	ldw	fp,0(sp)
 200d250:	dec00204 	addi	sp,sp,8
 200d254:	f800283a 	ret

0200d258 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200d258:	defffa04 	addi	sp,sp,-24
 200d25c:	dfc00515 	stw	ra,20(sp)
 200d260:	df000415 	stw	fp,16(sp)
 200d264:	df000404 	addi	fp,sp,16
 200d268:	e13ffd15 	stw	r4,-12(fp)
 200d26c:	e17ffe15 	stw	r5,-8(fp)
 200d270:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200d274:	e0bffd17 	ldw	r2,-12(fp)
 200d278:	10800017 	ldw	r2,0(r2)
 200d27c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200d280:	e0bffc17 	ldw	r2,-16(fp)
 200d284:	11000a04 	addi	r4,r2,40
 200d288:	e0bffd17 	ldw	r2,-12(fp)
 200d28c:	11c00217 	ldw	r7,8(r2)
 200d290:	e17ffe17 	ldw	r5,-8(fp)
 200d294:	e1bfff17 	ldw	r6,-4(fp)
 200d298:	200da180 	call	200da18 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200d29c:	e037883a 	mov	sp,fp
 200d2a0:	dfc00117 	ldw	ra,4(sp)
 200d2a4:	df000017 	ldw	fp,0(sp)
 200d2a8:	dec00204 	addi	sp,sp,8
 200d2ac:	f800283a 	ret

0200d2b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200d2b0:	defffa04 	addi	sp,sp,-24
 200d2b4:	dfc00515 	stw	ra,20(sp)
 200d2b8:	df000415 	stw	fp,16(sp)
 200d2bc:	df000404 	addi	fp,sp,16
 200d2c0:	e13ffd15 	stw	r4,-12(fp)
 200d2c4:	e17ffe15 	stw	r5,-8(fp)
 200d2c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200d2cc:	e0bffd17 	ldw	r2,-12(fp)
 200d2d0:	10800017 	ldw	r2,0(r2)
 200d2d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200d2d8:	e0bffc17 	ldw	r2,-16(fp)
 200d2dc:	11000a04 	addi	r4,r2,40
 200d2e0:	e0bffd17 	ldw	r2,-12(fp)
 200d2e4:	11c00217 	ldw	r7,8(r2)
 200d2e8:	e17ffe17 	ldw	r5,-8(fp)
 200d2ec:	e1bfff17 	ldw	r6,-4(fp)
 200d2f0:	200dcd80 	call	200dcd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200d2f4:	e037883a 	mov	sp,fp
 200d2f8:	dfc00117 	ldw	ra,4(sp)
 200d2fc:	df000017 	ldw	fp,0(sp)
 200d300:	dec00204 	addi	sp,sp,8
 200d304:	f800283a 	ret

0200d308 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200d308:	defffc04 	addi	sp,sp,-16
 200d30c:	dfc00315 	stw	ra,12(sp)
 200d310:	df000215 	stw	fp,8(sp)
 200d314:	df000204 	addi	fp,sp,8
 200d318:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200d31c:	e0bfff17 	ldw	r2,-4(fp)
 200d320:	10800017 	ldw	r2,0(r2)
 200d324:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200d328:	e0bffe17 	ldw	r2,-8(fp)
 200d32c:	11000a04 	addi	r4,r2,40
 200d330:	e0bfff17 	ldw	r2,-4(fp)
 200d334:	11400217 	ldw	r5,8(r2)
 200d338:	200d8b00 	call	200d8b0 <altera_avalon_jtag_uart_close>
}
 200d33c:	e037883a 	mov	sp,fp
 200d340:	dfc00117 	ldw	ra,4(sp)
 200d344:	df000017 	ldw	fp,0(sp)
 200d348:	dec00204 	addi	sp,sp,8
 200d34c:	f800283a 	ret

0200d350 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200d350:	defffa04 	addi	sp,sp,-24
 200d354:	dfc00515 	stw	ra,20(sp)
 200d358:	df000415 	stw	fp,16(sp)
 200d35c:	df000404 	addi	fp,sp,16
 200d360:	e13ffd15 	stw	r4,-12(fp)
 200d364:	e17ffe15 	stw	r5,-8(fp)
 200d368:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200d36c:	e0bffd17 	ldw	r2,-12(fp)
 200d370:	10800017 	ldw	r2,0(r2)
 200d374:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200d378:	e0bffc17 	ldw	r2,-16(fp)
 200d37c:	11000a04 	addi	r4,r2,40
 200d380:	e17ffe17 	ldw	r5,-8(fp)
 200d384:	e1bfff17 	ldw	r6,-4(fp)
 200d388:	200d9240 	call	200d924 <altera_avalon_jtag_uart_ioctl>
}
 200d38c:	e037883a 	mov	sp,fp
 200d390:	dfc00117 	ldw	ra,4(sp)
 200d394:	df000017 	ldw	fp,0(sp)
 200d398:	dec00204 	addi	sp,sp,8
 200d39c:	f800283a 	ret

0200d3a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200d3a0:	defff404 	addi	sp,sp,-48
 200d3a4:	dfc00b15 	stw	ra,44(sp)
 200d3a8:	df000a15 	stw	fp,40(sp)
 200d3ac:	df000a04 	addi	fp,sp,40
 200d3b0:	e13ffd15 	stw	r4,-12(fp)
 200d3b4:	e17ffe15 	stw	r5,-8(fp)
 200d3b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 200d3bc:	e0bffd17 	ldw	r2,-12(fp)
 200d3c0:	10800c04 	addi	r2,r2,48
 200d3c4:	e0bffb15 	stw	r2,-20(fp)
 200d3c8:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 200d3cc:	e13ffc0b 	ldhu	r4,-16(fp)
 200d3d0:	e17ffc84 	addi	r5,fp,-14
 200d3d4:	2006ab00 	call	2006ab0 <OSFlagCreate>
 200d3d8:	1007883a 	mov	r3,r2
 200d3dc:	e0bffb17 	ldw	r2,-20(fp)
 200d3e0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 200d3e4:	e0bffd17 	ldw	r2,-12(fp)
 200d3e8:	10800a04 	addi	r2,r2,40
 200d3ec:	e0bff915 	stw	r2,-28(fp)
 200d3f0:	00800044 	movi	r2,1
 200d3f4:	e0bffa0d 	sth	r2,-24(fp)
 200d3f8:	e13ffa0b 	ldhu	r4,-24(fp)
 200d3fc:	2009cb40 	call	2009cb4 <OSSemCreate>
 200d400:	1007883a 	mov	r3,r2
 200d404:	e0bff917 	ldw	r2,-28(fp)
 200d408:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 200d40c:	e0bffd17 	ldw	r2,-12(fp)
 200d410:	10800b04 	addi	r2,r2,44
 200d414:	e0bff715 	stw	r2,-36(fp)
 200d418:	00800044 	movi	r2,1
 200d41c:	e0bff80d 	sth	r2,-32(fp)
 200d420:	e13ff80b 	ldhu	r4,-32(fp)
 200d424:	2009cb40 	call	2009cb4 <OSSemCreate>
 200d428:	1007883a 	mov	r3,r2
 200d42c:	e0bff717 	ldw	r2,-36(fp)
 200d430:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200d434:	e0fffd17 	ldw	r3,-12(fp)
 200d438:	00800044 	movi	r2,1
 200d43c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200d440:	e0bffd17 	ldw	r2,-12(fp)
 200d444:	10800017 	ldw	r2,0(r2)
 200d448:	11000104 	addi	r4,r2,4
 200d44c:	e0bffd17 	ldw	r2,-12(fp)
 200d450:	10800817 	ldw	r2,32(r2)
 200d454:	1007883a 	mov	r3,r2
 200d458:	2005883a 	mov	r2,r4
 200d45c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200d460:	e13ffe17 	ldw	r4,-8(fp)
 200d464:	e17fff17 	ldw	r5,-4(fp)
 200d468:	d8000015 	stw	zero,0(sp)
 200d46c:	01808074 	movhi	r6,513
 200d470:	31b53604 	addi	r6,r6,-11048
 200d474:	e1fffd17 	ldw	r7,-12(fp)
 200d478:	200ebfc0 	call	200ebfc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200d47c:	e0bffd17 	ldw	r2,-12(fp)
 200d480:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200d484:	e0bffd17 	ldw	r2,-12(fp)
 200d488:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200d48c:	00808074 	movhi	r2,513
 200d490:	108fdf04 	addi	r2,r2,16252
 200d494:	10800017 	ldw	r2,0(r2)
 200d498:	100b883a 	mov	r5,r2
 200d49c:	01808074 	movhi	r6,513
 200d4a0:	31b5e704 	addi	r6,r6,-10340
 200d4a4:	e1fffd17 	ldw	r7,-12(fp)
 200d4a8:	200e7880 	call	200e788 <alt_alarm_start>
 200d4ac:	1004403a 	cmpge	r2,r2,zero
 200d4b0:	1000041e 	bne	r2,zero,200d4c4 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200d4b4:	e0fffd17 	ldw	r3,-12(fp)
 200d4b8:	00a00034 	movhi	r2,32768
 200d4bc:	10bfffc4 	addi	r2,r2,-1
 200d4c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200d4c4:	e037883a 	mov	sp,fp
 200d4c8:	dfc00117 	ldw	ra,4(sp)
 200d4cc:	df000017 	ldw	fp,0(sp)
 200d4d0:	dec00204 	addi	sp,sp,8
 200d4d4:	f800283a 	ret

0200d4d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200d4d8:	defff204 	addi	sp,sp,-56
 200d4dc:	dfc00d15 	stw	ra,52(sp)
 200d4e0:	df000c15 	stw	fp,48(sp)
 200d4e4:	df000c04 	addi	fp,sp,48
 200d4e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200d4ec:	e0bfff17 	ldw	r2,-4(fp)
 200d4f0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 200d4f4:	e0bffd17 	ldw	r2,-12(fp)
 200d4f8:	10800017 	ldw	r2,0(r2)
 200d4fc:	e0bffc15 	stw	r2,-16(fp)
 200d500:	00000006 	br	200d504 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200d504:	e0bffc17 	ldw	r2,-16(fp)
 200d508:	10800104 	addi	r2,r2,4
 200d50c:	10800037 	ldwio	r2,0(r2)
 200d510:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200d514:	e0bffb17 	ldw	r2,-20(fp)
 200d518:	1080c00c 	andi	r2,r2,768
 200d51c:	1005003a 	cmpeq	r2,r2,zero
 200d520:	1000991e 	bne	r2,zero,200d788 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200d524:	e0bffb17 	ldw	r2,-20(fp)
 200d528:	1080400c 	andi	r2,r2,256
 200d52c:	1005003a 	cmpeq	r2,r2,zero
 200d530:	1000481e 	bne	r2,zero,200d654 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200d534:	00800074 	movhi	r2,1
 200d538:	e0bffa15 	stw	r2,-24(fp)
 200d53c:	00000006 	br	200d540 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200d540:	e0bffd17 	ldw	r2,-12(fp)
 200d544:	10800d17 	ldw	r2,52(r2)
 200d548:	10800044 	addi	r2,r2,1
 200d54c:	1081ffcc 	andi	r2,r2,2047
 200d550:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 200d554:	e0bffd17 	ldw	r2,-12(fp)
 200d558:	10c00e17 	ldw	r3,56(r2)
 200d55c:	e0bff917 	ldw	r2,-28(fp)
 200d560:	18802826 	beq	r3,r2,200d604 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200d564:	e0bffc17 	ldw	r2,-16(fp)
 200d568:	10800037 	ldwio	r2,0(r2)
 200d56c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200d570:	e0bffa17 	ldw	r2,-24(fp)
 200d574:	10a0000c 	andi	r2,r2,32768
 200d578:	1005003a 	cmpeq	r2,r2,zero
 200d57c:	1000211e 	bne	r2,zero,200d604 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200d580:	e0bffd17 	ldw	r2,-12(fp)
 200d584:	10c00d17 	ldw	r3,52(r2)
 200d588:	e0bffa17 	ldw	r2,-24(fp)
 200d58c:	1009883a 	mov	r4,r2
 200d590:	e0bffd17 	ldw	r2,-12(fp)
 200d594:	1885883a 	add	r2,r3,r2
 200d598:	10801104 	addi	r2,r2,68
 200d59c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200d5a0:	e0bffd17 	ldw	r2,-12(fp)
 200d5a4:	10800d17 	ldw	r2,52(r2)
 200d5a8:	10800044 	addi	r2,r2,1
 200d5ac:	10c1ffcc 	andi	r3,r2,2047
 200d5b0:	e0bffd17 	ldw	r2,-12(fp)
 200d5b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 200d5b8:	e0bffd17 	ldw	r2,-12(fp)
 200d5bc:	10800c17 	ldw	r2,48(r2)
 200d5c0:	e0bff615 	stw	r2,-40(fp)
 200d5c4:	00800044 	movi	r2,1
 200d5c8:	e0bff70d 	sth	r2,-36(fp)
 200d5cc:	00800044 	movi	r2,1
 200d5d0:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 200d5d4:	00808074 	movhi	r2,513
 200d5d8:	108fca44 	addi	r2,r2,16169
 200d5dc:	10800003 	ldbu	r2,0(r2)
 200d5e0:	10803fcc 	andi	r2,r2,255
 200d5e4:	1005003a 	cmpeq	r2,r2,zero
 200d5e8:	103fd51e 	bne	r2,zero,200d540 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 200d5ec:	e17ff70b 	ldhu	r5,-36(fp)
 200d5f0:	e1bff783 	ldbu	r6,-34(fp)
 200d5f4:	e1fffe04 	addi	r7,fp,-8
 200d5f8:	e13ff617 	ldw	r4,-40(fp)
 200d5fc:	20077d80 	call	20077d8 <OSFlagPost>
    return err;
 200d600:	003fcf06 	br	200d540 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200d604:	e0bffa17 	ldw	r2,-24(fp)
 200d608:	10bfffec 	andhi	r2,r2,65535
 200d60c:	1005003a 	cmpeq	r2,r2,zero
 200d610:	1000101e 	bne	r2,zero,200d654 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200d614:	e0bffd17 	ldw	r2,-12(fp)
 200d618:	10c00817 	ldw	r3,32(r2)
 200d61c:	00bfff84 	movi	r2,-2
 200d620:	1886703a 	and	r3,r3,r2
 200d624:	e0bffd17 	ldw	r2,-12(fp)
 200d628:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200d62c:	e0bffc17 	ldw	r2,-16(fp)
 200d630:	11000104 	addi	r4,r2,4
 200d634:	e0bffd17 	ldw	r2,-12(fp)
 200d638:	10800817 	ldw	r2,32(r2)
 200d63c:	1007883a 	mov	r3,r2
 200d640:	2005883a 	mov	r2,r4
 200d644:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200d648:	e0bffc17 	ldw	r2,-16(fp)
 200d64c:	10800104 	addi	r2,r2,4
 200d650:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200d654:	e0bffb17 	ldw	r2,-20(fp)
 200d658:	1080800c 	andi	r2,r2,512
 200d65c:	1005003a 	cmpeq	r2,r2,zero
 200d660:	103fa81e 	bne	r2,zero,200d504 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200d664:	e0bffb17 	ldw	r2,-20(fp)
 200d668:	10bfffec 	andhi	r2,r2,65535
 200d66c:	1004d43a 	srli	r2,r2,16
 200d670:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200d674:	00002706 	br	200d714 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200d678:	e13ffc17 	ldw	r4,-16(fp)
 200d67c:	e0bffd17 	ldw	r2,-12(fp)
 200d680:	10c01017 	ldw	r3,64(r2)
 200d684:	e0bffd17 	ldw	r2,-12(fp)
 200d688:	1885883a 	add	r2,r3,r2
 200d68c:	10821104 	addi	r2,r2,2116
 200d690:	10800003 	ldbu	r2,0(r2)
 200d694:	10c03fcc 	andi	r3,r2,255
 200d698:	18c0201c 	xori	r3,r3,128
 200d69c:	18ffe004 	addi	r3,r3,-128
 200d6a0:	2005883a 	mov	r2,r4
 200d6a4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200d6a8:	e0bffd17 	ldw	r2,-12(fp)
 200d6ac:	10801017 	ldw	r2,64(r2)
 200d6b0:	10800044 	addi	r2,r2,1
 200d6b4:	10c1ffcc 	andi	r3,r2,2047
 200d6b8:	e0bffd17 	ldw	r2,-12(fp)
 200d6bc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 200d6c0:	e0bffd17 	ldw	r2,-12(fp)
 200d6c4:	10800c17 	ldw	r2,48(r2)
 200d6c8:	e0bff415 	stw	r2,-48(fp)
 200d6cc:	00800084 	movi	r2,2
 200d6d0:	e0bff50d 	sth	r2,-44(fp)
 200d6d4:	00800044 	movi	r2,1
 200d6d8:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 200d6dc:	00808074 	movhi	r2,513
 200d6e0:	108fca44 	addi	r2,r2,16169
 200d6e4:	10800003 	ldbu	r2,0(r2)
 200d6e8:	10803fcc 	andi	r2,r2,255
 200d6ec:	1005003a 	cmpeq	r2,r2,zero
 200d6f0:	1000051e 	bne	r2,zero,200d708 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 200d6f4:	e17ff50b 	ldhu	r5,-44(fp)
 200d6f8:	e1bff583 	ldbu	r6,-42(fp)
 200d6fc:	e1fffe44 	addi	r7,fp,-7
 200d700:	e13ff417 	ldw	r4,-48(fp)
 200d704:	20077d80 	call	20077d8 <OSFlagPost>

        space--;
 200d708:	e0bff817 	ldw	r2,-32(fp)
 200d70c:	10bfffc4 	addi	r2,r2,-1
 200d710:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200d714:	e0bff817 	ldw	r2,-32(fp)
 200d718:	1005003a 	cmpeq	r2,r2,zero
 200d71c:	1000051e 	bne	r2,zero,200d734 <altera_avalon_jtag_uart_irq+0x25c>
 200d720:	e0bffd17 	ldw	r2,-12(fp)
 200d724:	10c01017 	ldw	r3,64(r2)
 200d728:	e0bffd17 	ldw	r2,-12(fp)
 200d72c:	10800f17 	ldw	r2,60(r2)
 200d730:	18bfd11e 	bne	r3,r2,200d678 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200d734:	e0bff817 	ldw	r2,-32(fp)
 200d738:	1005003a 	cmpeq	r2,r2,zero
 200d73c:	103f711e 	bne	r2,zero,200d504 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200d740:	e0bffd17 	ldw	r2,-12(fp)
 200d744:	10c00817 	ldw	r3,32(r2)
 200d748:	00bfff44 	movi	r2,-3
 200d74c:	1886703a 	and	r3,r3,r2
 200d750:	e0bffd17 	ldw	r2,-12(fp)
 200d754:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200d758:	e0bffd17 	ldw	r2,-12(fp)
 200d75c:	10800017 	ldw	r2,0(r2)
 200d760:	11000104 	addi	r4,r2,4
 200d764:	e0bffd17 	ldw	r2,-12(fp)
 200d768:	10800817 	ldw	r2,32(r2)
 200d76c:	1007883a 	mov	r3,r2
 200d770:	2005883a 	mov	r2,r4
 200d774:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200d778:	e0bffc17 	ldw	r2,-16(fp)
 200d77c:	10800104 	addi	r2,r2,4
 200d780:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200d784:	003f5f06 	br	200d504 <altera_avalon_jtag_uart_irq+0x2c>
}
 200d788:	e037883a 	mov	sp,fp
 200d78c:	dfc00117 	ldw	ra,4(sp)
 200d790:	df000017 	ldw	fp,0(sp)
 200d794:	dec00204 	addi	sp,sp,8
 200d798:	f800283a 	ret

0200d79c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200d79c:	defff804 	addi	sp,sp,-32
 200d7a0:	dfc00715 	stw	ra,28(sp)
 200d7a4:	df000615 	stw	fp,24(sp)
 200d7a8:	df000604 	addi	fp,sp,24
 200d7ac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200d7b0:	e0bfff17 	ldw	r2,-4(fp)
 200d7b4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200d7b8:	e0bffd17 	ldw	r2,-12(fp)
 200d7bc:	10800017 	ldw	r2,0(r2)
 200d7c0:	10800104 	addi	r2,r2,4
 200d7c4:	10800037 	ldwio	r2,0(r2)
 200d7c8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200d7cc:	e0bffc17 	ldw	r2,-16(fp)
 200d7d0:	1081000c 	andi	r2,r2,1024
 200d7d4:	1005003a 	cmpeq	r2,r2,zero
 200d7d8:	10000c1e 	bne	r2,zero,200d80c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200d7dc:	e0bffd17 	ldw	r2,-12(fp)
 200d7e0:	10800017 	ldw	r2,0(r2)
 200d7e4:	11000104 	addi	r4,r2,4
 200d7e8:	e0bffd17 	ldw	r2,-12(fp)
 200d7ec:	10800817 	ldw	r2,32(r2)
 200d7f0:	10810014 	ori	r2,r2,1024
 200d7f4:	1007883a 	mov	r3,r2
 200d7f8:	2005883a 	mov	r2,r4
 200d7fc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 200d800:	e0bffd17 	ldw	r2,-12(fp)
 200d804:	10000915 	stw	zero,36(r2)
 200d808:	00002106 	br	200d890 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200d80c:	e0bffd17 	ldw	r2,-12(fp)
 200d810:	10c00917 	ldw	r3,36(r2)
 200d814:	00a00034 	movhi	r2,32768
 200d818:	10bfff04 	addi	r2,r2,-4
 200d81c:	10c01c36 	bltu	r2,r3,200d890 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 200d820:	e0bffd17 	ldw	r2,-12(fp)
 200d824:	10800917 	ldw	r2,36(r2)
 200d828:	10c00044 	addi	r3,r2,1
 200d82c:	e0bffd17 	ldw	r2,-12(fp)
 200d830:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 200d834:	e0bffd17 	ldw	r2,-12(fp)
 200d838:	10c00917 	ldw	r3,36(r2)
 200d83c:	e0bffd17 	ldw	r2,-12(fp)
 200d840:	10800117 	ldw	r2,4(r2)
 200d844:	18801236 	bltu	r3,r2,200d890 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 200d848:	e0bffd17 	ldw	r2,-12(fp)
 200d84c:	10800c17 	ldw	r2,48(r2)
 200d850:	e0bffa15 	stw	r2,-24(fp)
 200d854:	00800104 	movi	r2,4
 200d858:	e0bffb0d 	sth	r2,-20(fp)
 200d85c:	00800044 	movi	r2,1
 200d860:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 200d864:	00808074 	movhi	r2,513
 200d868:	108fca44 	addi	r2,r2,16169
 200d86c:	10800003 	ldbu	r2,0(r2)
 200d870:	10803fcc 	andi	r2,r2,255
 200d874:	1005003a 	cmpeq	r2,r2,zero
 200d878:	1000051e 	bne	r2,zero,200d890 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 200d87c:	e17ffb0b 	ldhu	r5,-20(fp)
 200d880:	e1bffb83 	ldbu	r6,-18(fp)
 200d884:	e1fffe04 	addi	r7,fp,-8
 200d888:	e13ffa17 	ldw	r4,-24(fp)
 200d88c:	20077d80 	call	20077d8 <OSFlagPost>
 200d890:	00808074 	movhi	r2,513
 200d894:	108fdf04 	addi	r2,r2,16252
 200d898:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 200d89c:	e037883a 	mov	sp,fp
 200d8a0:	dfc00117 	ldw	ra,4(sp)
 200d8a4:	df000017 	ldw	fp,0(sp)
 200d8a8:	dec00204 	addi	sp,sp,8
 200d8ac:	f800283a 	ret

0200d8b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200d8b0:	defffc04 	addi	sp,sp,-16
 200d8b4:	df000315 	stw	fp,12(sp)
 200d8b8:	df000304 	addi	fp,sp,12
 200d8bc:	e13ffd15 	stw	r4,-12(fp)
 200d8c0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200d8c4:	00000706 	br	200d8e4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 200d8c8:	e0bffe17 	ldw	r2,-8(fp)
 200d8cc:	1090000c 	andi	r2,r2,16384
 200d8d0:	1005003a 	cmpeq	r2,r2,zero
 200d8d4:	1000031e 	bne	r2,zero,200d8e4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 200d8d8:	00bffd44 	movi	r2,-11
 200d8dc:	e0bfff15 	stw	r2,-4(fp)
 200d8e0:	00000b06 	br	200d910 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200d8e4:	e0bffd17 	ldw	r2,-12(fp)
 200d8e8:	10c01017 	ldw	r3,64(r2)
 200d8ec:	e0bffd17 	ldw	r2,-12(fp)
 200d8f0:	10800f17 	ldw	r2,60(r2)
 200d8f4:	18800526 	beq	r3,r2,200d90c <altera_avalon_jtag_uart_close+0x5c>
 200d8f8:	e0bffd17 	ldw	r2,-12(fp)
 200d8fc:	10c00917 	ldw	r3,36(r2)
 200d900:	e0bffd17 	ldw	r2,-12(fp)
 200d904:	10800117 	ldw	r2,4(r2)
 200d908:	18bfef36 	bltu	r3,r2,200d8c8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200d90c:	e03fff15 	stw	zero,-4(fp)
 200d910:	e0bfff17 	ldw	r2,-4(fp)
}
 200d914:	e037883a 	mov	sp,fp
 200d918:	df000017 	ldw	fp,0(sp)
 200d91c:	dec00104 	addi	sp,sp,4
 200d920:	f800283a 	ret

0200d924 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200d924:	defff804 	addi	sp,sp,-32
 200d928:	df000715 	stw	fp,28(sp)
 200d92c:	df000704 	addi	fp,sp,28
 200d930:	e13ffb15 	stw	r4,-20(fp)
 200d934:	e17ffc15 	stw	r5,-16(fp)
 200d938:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 200d93c:	00bff9c4 	movi	r2,-25
 200d940:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 200d944:	e0bffc17 	ldw	r2,-16(fp)
 200d948:	e0bfff15 	stw	r2,-4(fp)
 200d94c:	e0ffff17 	ldw	r3,-4(fp)
 200d950:	189a8060 	cmpeqi	r2,r3,27137
 200d954:	1000041e 	bne	r2,zero,200d968 <altera_avalon_jtag_uart_ioctl+0x44>
 200d958:	e0ffff17 	ldw	r3,-4(fp)
 200d95c:	189a80a0 	cmpeqi	r2,r3,27138
 200d960:	10001b1e 	bne	r2,zero,200d9d0 <altera_avalon_jtag_uart_ioctl+0xac>
 200d964:	00002706 	br	200da04 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200d968:	e0bffb17 	ldw	r2,-20(fp)
 200d96c:	10c00117 	ldw	r3,4(r2)
 200d970:	00a00034 	movhi	r2,32768
 200d974:	10bfffc4 	addi	r2,r2,-1
 200d978:	18802226 	beq	r3,r2,200da04 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 200d97c:	e0bffd17 	ldw	r2,-12(fp)
 200d980:	10800017 	ldw	r2,0(r2)
 200d984:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200d988:	e0bff917 	ldw	r2,-28(fp)
 200d98c:	10800090 	cmplti	r2,r2,2
 200d990:	1000071e 	bne	r2,zero,200d9b0 <altera_avalon_jtag_uart_ioctl+0x8c>
 200d994:	e0fff917 	ldw	r3,-28(fp)
 200d998:	00a00034 	movhi	r2,32768
 200d99c:	10bfffc4 	addi	r2,r2,-1
 200d9a0:	18800326 	beq	r3,r2,200d9b0 <altera_avalon_jtag_uart_ioctl+0x8c>
 200d9a4:	e0bff917 	ldw	r2,-28(fp)
 200d9a8:	e0bffe15 	stw	r2,-8(fp)
 200d9ac:	00000306 	br	200d9bc <altera_avalon_jtag_uart_ioctl+0x98>
 200d9b0:	00e00034 	movhi	r3,32768
 200d9b4:	18ffff84 	addi	r3,r3,-2
 200d9b8:	e0fffe15 	stw	r3,-8(fp)
 200d9bc:	e0bffb17 	ldw	r2,-20(fp)
 200d9c0:	e0fffe17 	ldw	r3,-8(fp)
 200d9c4:	10c00115 	stw	r3,4(r2)
      rc = 0;
 200d9c8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 200d9cc:	00000d06 	br	200da04 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200d9d0:	e0bffb17 	ldw	r2,-20(fp)
 200d9d4:	10c00117 	ldw	r3,4(r2)
 200d9d8:	00a00034 	movhi	r2,32768
 200d9dc:	10bfffc4 	addi	r2,r2,-1
 200d9e0:	18800826 	beq	r3,r2,200da04 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200d9e4:	e13ffd17 	ldw	r4,-12(fp)
 200d9e8:	e0bffb17 	ldw	r2,-20(fp)
 200d9ec:	10c00917 	ldw	r3,36(r2)
 200d9f0:	e0bffb17 	ldw	r2,-20(fp)
 200d9f4:	10800117 	ldw	r2,4(r2)
 200d9f8:	1885803a 	cmpltu	r2,r3,r2
 200d9fc:	20800015 	stw	r2,0(r4)
      rc = 0;
 200da00:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 200da04:	e0bffa17 	ldw	r2,-24(fp)
}
 200da08:	e037883a 	mov	sp,fp
 200da0c:	df000017 	ldw	fp,0(sp)
 200da10:	dec00104 	addi	sp,sp,4
 200da14:	f800283a 	ret

0200da18 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200da18:	deffeb04 	addi	sp,sp,-84
 200da1c:	dfc01415 	stw	ra,80(sp)
 200da20:	df001315 	stw	fp,76(sp)
 200da24:	df001304 	addi	fp,sp,76
 200da28:	e13ffb15 	stw	r4,-20(fp)
 200da2c:	e17ffc15 	stw	r5,-16(fp)
 200da30:	e1bffd15 	stw	r6,-12(fp)
 200da34:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 200da38:	e0bffc17 	ldw	r2,-16(fp)
 200da3c:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 200da40:	e0bffb17 	ldw	r2,-20(fp)
 200da44:	10800a17 	ldw	r2,40(r2)
 200da48:	e0bff315 	stw	r2,-52(fp)
 200da4c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 200da50:	e17ff40b 	ldhu	r5,-48(fp)
 200da54:	e1bffa44 	addi	r6,fp,-23
 200da58:	e13ff317 	ldw	r4,-52(fp)
 200da5c:	200a0680 	call	200a068 <OSSemPend>

  while (space > 0)
 200da60:	00006406 	br	200dbf4 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200da64:	e0bffb17 	ldw	r2,-20(fp)
 200da68:	10800d17 	ldw	r2,52(r2)
 200da6c:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 200da70:	e0bffb17 	ldw	r2,-20(fp)
 200da74:	10800e17 	ldw	r2,56(r2)
 200da78:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 200da7c:	e0fff617 	ldw	r3,-40(fp)
 200da80:	e0bff517 	ldw	r2,-44(fp)
 200da84:	18800536 	bltu	r3,r2,200da9c <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 200da88:	e0bff617 	ldw	r2,-40(fp)
 200da8c:	e0fff517 	ldw	r3,-44(fp)
 200da90:	10c5c83a 	sub	r2,r2,r3
 200da94:	e0bff715 	stw	r2,-36(fp)
 200da98:	00000406 	br	200daac <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200da9c:	00820004 	movi	r2,2048
 200daa0:	e0fff517 	ldw	r3,-44(fp)
 200daa4:	10c5c83a 	sub	r2,r2,r3
 200daa8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 200daac:	e0bff717 	ldw	r2,-36(fp)
 200dab0:	1005003a 	cmpeq	r2,r2,zero
 200dab4:	10001f1e 	bne	r2,zero,200db34 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 200dab8:	e0fffd17 	ldw	r3,-12(fp)
 200dabc:	e0bff717 	ldw	r2,-36(fp)
 200dac0:	1880022e 	bgeu	r3,r2,200dacc <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 200dac4:	e0bffd17 	ldw	r2,-12(fp)
 200dac8:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200dacc:	e0bffb17 	ldw	r2,-20(fp)
 200dad0:	10c01104 	addi	r3,r2,68
 200dad4:	e0bff517 	ldw	r2,-44(fp)
 200dad8:	1887883a 	add	r3,r3,r2
 200dadc:	e0bff917 	ldw	r2,-28(fp)
 200dae0:	1009883a 	mov	r4,r2
 200dae4:	180b883a 	mov	r5,r3
 200dae8:	e1bff717 	ldw	r6,-36(fp)
 200daec:	20020740 	call	2002074 <memcpy>
      ptr   += n;
 200daf0:	e0fff717 	ldw	r3,-36(fp)
 200daf4:	e0bff917 	ldw	r2,-28(fp)
 200daf8:	10c5883a 	add	r2,r2,r3
 200dafc:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 200db00:	e0fffd17 	ldw	r3,-12(fp)
 200db04:	e0bff717 	ldw	r2,-36(fp)
 200db08:	1885c83a 	sub	r2,r3,r2
 200db0c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200db10:	e0fff517 	ldw	r3,-44(fp)
 200db14:	e0bff717 	ldw	r2,-36(fp)
 200db18:	1885883a 	add	r2,r3,r2
 200db1c:	10c1ffcc 	andi	r3,r2,2047
 200db20:	e0bffb17 	ldw	r2,-20(fp)
 200db24:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 200db28:	e0bffd17 	ldw	r2,-12(fp)
 200db2c:	10800048 	cmpgei	r2,r2,1
 200db30:	103fcc1e 	bne	r2,zero,200da64 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 200db34:	e0fff917 	ldw	r3,-28(fp)
 200db38:	e0bffc17 	ldw	r2,-16(fp)
 200db3c:	1880301e 	bne	r3,r2,200dc00 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200db40:	e0bffe17 	ldw	r2,-8(fp)
 200db44:	1090000c 	andi	r2,r2,16384
 200db48:	1004c03a 	cmpne	r2,r2,zero
 200db4c:	10002c1e 	bne	r2,zero,200dc00 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 200db50:	00808074 	movhi	r2,513
 200db54:	108fca44 	addi	r2,r2,16169
 200db58:	10800003 	ldbu	r2,0(r2)
 200db5c:	10803fcc 	andi	r2,r2,255
 200db60:	10800058 	cmpnei	r2,r2,1
 200db64:	1000161e 	bne	r2,zero,200dbc0 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 200db68:	e0bffb17 	ldw	r2,-20(fp)
 200db6c:	10800c17 	ldw	r2,48(r2)
 200db70:	e0bff015 	stw	r2,-64(fp)
 200db74:	00800144 	movi	r2,5
 200db78:	e0bff10d 	sth	r2,-60(fp)
 200db7c:	00bfe0c4 	movi	r2,-125
 200db80:	e0bff185 	stb	r2,-58(fp)
 200db84:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 200db88:	00808074 	movhi	r2,513
 200db8c:	108fca44 	addi	r2,r2,16169
 200db90:	10800003 	ldbu	r2,0(r2)
 200db94:	10803fcc 	andi	r2,r2,255
 200db98:	1005003a 	cmpeq	r2,r2,zero
 200db9c:	1000111e 	bne	r2,zero,200dbe4 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 200dba0:	e17ff10b 	ldhu	r5,-60(fp)
 200dba4:	e1bff183 	ldbu	r6,-58(fp)
 200dba8:	e1fff20b 	ldhu	r7,-56(fp)
 200dbac:	e0bffa04 	addi	r2,fp,-24
 200dbb0:	d8800015 	stw	r2,0(sp)
 200dbb4:	e13ff017 	ldw	r4,-64(fp)
 200dbb8:	200712c0 	call	200712c <OSFlagPend>
    return err;
 200dbbc:	00000906 	br	200dbe4 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200dbc0:	e0bffb17 	ldw	r2,-20(fp)
 200dbc4:	10c00d17 	ldw	r3,52(r2)
 200dbc8:	e0bff617 	ldw	r2,-40(fp)
 200dbcc:	1880051e 	bne	r3,r2,200dbe4 <altera_avalon_jtag_uart_read+0x1cc>
 200dbd0:	e0bffb17 	ldw	r2,-20(fp)
 200dbd4:	10c00917 	ldw	r3,36(r2)
 200dbd8:	e0bffb17 	ldw	r2,-20(fp)
 200dbdc:	10800117 	ldw	r2,4(r2)
 200dbe0:	18bff736 	bltu	r3,r2,200dbc0 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200dbe4:	e0bffb17 	ldw	r2,-20(fp)
 200dbe8:	10c00d17 	ldw	r3,52(r2)
 200dbec:	e0bff617 	ldw	r2,-40(fp)
 200dbf0:	18800326 	beq	r3,r2,200dc00 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200dbf4:	e0bffd17 	ldw	r2,-12(fp)
 200dbf8:	10800048 	cmpgei	r2,r2,1
 200dbfc:	103f991e 	bne	r2,zero,200da64 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 200dc00:	e0bffb17 	ldw	r2,-20(fp)
 200dc04:	11000a17 	ldw	r4,40(r2)
 200dc08:	200a4600 	call	200a460 <OSSemPost>

  if (ptr != buffer)
 200dc0c:	e0fff917 	ldw	r3,-28(fp)
 200dc10:	e0bffc17 	ldw	r2,-16(fp)
 200dc14:	18801926 	beq	r3,r2,200dc7c <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200dc18:	0005303a 	rdctl	r2,status
 200dc1c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200dc20:	e0ffef17 	ldw	r3,-68(fp)
 200dc24:	00bfff84 	movi	r2,-2
 200dc28:	1884703a 	and	r2,r3,r2
 200dc2c:	1001703a 	wrctl	status,r2
  
  return context;
 200dc30:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200dc34:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200dc38:	e0bffb17 	ldw	r2,-20(fp)
 200dc3c:	10800817 	ldw	r2,32(r2)
 200dc40:	10c00054 	ori	r3,r2,1
 200dc44:	e0bffb17 	ldw	r2,-20(fp)
 200dc48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200dc4c:	e0bffb17 	ldw	r2,-20(fp)
 200dc50:	10800017 	ldw	r2,0(r2)
 200dc54:	11000104 	addi	r4,r2,4
 200dc58:	e0bffb17 	ldw	r2,-20(fp)
 200dc5c:	10800817 	ldw	r2,32(r2)
 200dc60:	1007883a 	mov	r3,r2
 200dc64:	2005883a 	mov	r2,r4
 200dc68:	10c00035 	stwio	r3,0(r2)
 200dc6c:	e0bff817 	ldw	r2,-32(fp)
 200dc70:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200dc74:	e0bfee17 	ldw	r2,-72(fp)
 200dc78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200dc7c:	e0fff917 	ldw	r3,-28(fp)
 200dc80:	e0bffc17 	ldw	r2,-16(fp)
 200dc84:	18800526 	beq	r3,r2,200dc9c <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 200dc88:	e0fff917 	ldw	r3,-28(fp)
 200dc8c:	e0bffc17 	ldw	r2,-16(fp)
 200dc90:	1887c83a 	sub	r3,r3,r2
 200dc94:	e0ffff15 	stw	r3,-4(fp)
 200dc98:	00000906 	br	200dcc0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 200dc9c:	e0bffe17 	ldw	r2,-8(fp)
 200dca0:	1090000c 	andi	r2,r2,16384
 200dca4:	1005003a 	cmpeq	r2,r2,zero
 200dca8:	1000031e 	bne	r2,zero,200dcb8 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 200dcac:	00bffd44 	movi	r2,-11
 200dcb0:	e0bfff15 	stw	r2,-4(fp)
 200dcb4:	00000206 	br	200dcc0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 200dcb8:	00bffec4 	movi	r2,-5
 200dcbc:	e0bfff15 	stw	r2,-4(fp)
 200dcc0:	e0bfff17 	ldw	r2,-4(fp)
}
 200dcc4:	e037883a 	mov	sp,fp
 200dcc8:	dfc00117 	ldw	ra,4(sp)
 200dccc:	df000017 	ldw	fp,0(sp)
 200dcd0:	dec00204 	addi	sp,sp,8
 200dcd4:	f800283a 	ret

0200dcd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200dcd8:	deffeb04 	addi	sp,sp,-84
 200dcdc:	dfc01415 	stw	ra,80(sp)
 200dce0:	df001315 	stw	fp,76(sp)
 200dce4:	df001304 	addi	fp,sp,76
 200dce8:	e13ffb15 	stw	r4,-20(fp)
 200dcec:	e17ffc15 	stw	r5,-16(fp)
 200dcf0:	e1bffd15 	stw	r6,-12(fp)
 200dcf4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200dcf8:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200dcfc:	e0bffc17 	ldw	r2,-16(fp)
 200dd00:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 200dd04:	e0bffb17 	ldw	r2,-20(fp)
 200dd08:	10800b17 	ldw	r2,44(r2)
 200dd0c:	e0bff315 	stw	r2,-52(fp)
 200dd10:	e03ff40d 	sth	zero,-48(fp)
 200dd14:	e17ff40b 	ldhu	r5,-48(fp)
 200dd18:	e1bffa04 	addi	r6,fp,-24
 200dd1c:	e13ff317 	ldw	r4,-52(fp)
 200dd20:	200a0680 	call	200a068 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200dd24:	00003a06 	br	200de10 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200dd28:	e0bffb17 	ldw	r2,-20(fp)
 200dd2c:	10800f17 	ldw	r2,60(r2)
 200dd30:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 200dd34:	e0bffb17 	ldw	r2,-20(fp)
 200dd38:	10801017 	ldw	r2,64(r2)
 200dd3c:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 200dd40:	e0fff917 	ldw	r3,-28(fp)
 200dd44:	e0bff817 	ldw	r2,-32(fp)
 200dd48:	1880062e 	bgeu	r3,r2,200dd64 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 200dd4c:	e0fff817 	ldw	r3,-32(fp)
 200dd50:	e0bff917 	ldw	r2,-28(fp)
 200dd54:	1885c83a 	sub	r2,r3,r2
 200dd58:	10bfffc4 	addi	r2,r2,-1
 200dd5c:	e0bff715 	stw	r2,-36(fp)
 200dd60:	00000c06 	br	200dd94 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 200dd64:	e0bff817 	ldw	r2,-32(fp)
 200dd68:	1005003a 	cmpeq	r2,r2,zero
 200dd6c:	1000051e 	bne	r2,zero,200dd84 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200dd70:	00820004 	movi	r2,2048
 200dd74:	e0fff917 	ldw	r3,-28(fp)
 200dd78:	10c5c83a 	sub	r2,r2,r3
 200dd7c:	e0bff715 	stw	r2,-36(fp)
 200dd80:	00000406 	br	200dd94 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200dd84:	0081ffc4 	movi	r2,2047
 200dd88:	e0fff917 	ldw	r3,-28(fp)
 200dd8c:	10c5c83a 	sub	r2,r2,r3
 200dd90:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 200dd94:	e0bff717 	ldw	r2,-36(fp)
 200dd98:	1005003a 	cmpeq	r2,r2,zero
 200dd9c:	10001f1e 	bne	r2,zero,200de1c <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 200dda0:	e0fffd17 	ldw	r3,-12(fp)
 200dda4:	e0bff717 	ldw	r2,-36(fp)
 200dda8:	1880022e 	bgeu	r3,r2,200ddb4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 200ddac:	e0bffd17 	ldw	r2,-12(fp)
 200ddb0:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200ddb4:	e0bffb17 	ldw	r2,-20(fp)
 200ddb8:	10c21104 	addi	r3,r2,2116
 200ddbc:	e0bff917 	ldw	r2,-28(fp)
 200ddc0:	1885883a 	add	r2,r3,r2
 200ddc4:	e0fffc17 	ldw	r3,-16(fp)
 200ddc8:	1009883a 	mov	r4,r2
 200ddcc:	180b883a 	mov	r5,r3
 200ddd0:	e1bff717 	ldw	r6,-36(fp)
 200ddd4:	20020740 	call	2002074 <memcpy>
      ptr   += n;
 200ddd8:	e0fff717 	ldw	r3,-36(fp)
 200dddc:	e0bffc17 	ldw	r2,-16(fp)
 200dde0:	10c5883a 	add	r2,r2,r3
 200dde4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 200dde8:	e0fffd17 	ldw	r3,-12(fp)
 200ddec:	e0bff717 	ldw	r2,-36(fp)
 200ddf0:	1885c83a 	sub	r2,r3,r2
 200ddf4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200ddf8:	e0fff917 	ldw	r3,-28(fp)
 200ddfc:	e0bff717 	ldw	r2,-36(fp)
 200de00:	1885883a 	add	r2,r3,r2
 200de04:	10c1ffcc 	andi	r3,r2,2047
 200de08:	e0bffb17 	ldw	r2,-20(fp)
 200de0c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200de10:	e0bffd17 	ldw	r2,-12(fp)
 200de14:	10800048 	cmpgei	r2,r2,1
 200de18:	103fc31e 	bne	r2,zero,200dd28 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200de1c:	0005303a 	rdctl	r2,status
 200de20:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200de24:	e0fff217 	ldw	r3,-56(fp)
 200de28:	00bfff84 	movi	r2,-2
 200de2c:	1884703a 	and	r2,r3,r2
 200de30:	1001703a 	wrctl	status,r2
  
  return context;
 200de34:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200de38:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200de3c:	e0bffb17 	ldw	r2,-20(fp)
 200de40:	10800817 	ldw	r2,32(r2)
 200de44:	10c00094 	ori	r3,r2,2
 200de48:	e0bffb17 	ldw	r2,-20(fp)
 200de4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200de50:	e0bffb17 	ldw	r2,-20(fp)
 200de54:	10800017 	ldw	r2,0(r2)
 200de58:	11000104 	addi	r4,r2,4
 200de5c:	e0bffb17 	ldw	r2,-20(fp)
 200de60:	10800817 	ldw	r2,32(r2)
 200de64:	1007883a 	mov	r3,r2
 200de68:	2005883a 	mov	r2,r4
 200de6c:	10c00035 	stwio	r3,0(r2)
 200de70:	e0bff617 	ldw	r2,-40(fp)
 200de74:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200de78:	e0bff117 	ldw	r2,-60(fp)
 200de7c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200de80:	e0bffd17 	ldw	r2,-12(fp)
 200de84:	10800050 	cmplti	r2,r2,1
 200de88:	10002d1e 	bne	r2,zero,200df40 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 200de8c:	e0bffe17 	ldw	r2,-8(fp)
 200de90:	1090000c 	andi	r2,r2,16384
 200de94:	1004c03a 	cmpne	r2,r2,zero
 200de98:	10002c1e 	bne	r2,zero,200df4c <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 200de9c:	00808074 	movhi	r2,513
 200dea0:	108fca44 	addi	r2,r2,16169
 200dea4:	10800003 	ldbu	r2,0(r2)
 200dea8:	10803fcc 	andi	r2,r2,255
 200deac:	10800058 	cmpnei	r2,r2,1
 200deb0:	1000161e 	bne	r2,zero,200df0c <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 200deb4:	e0bffb17 	ldw	r2,-20(fp)
 200deb8:	10800c17 	ldw	r2,48(r2)
 200debc:	e0bfee15 	stw	r2,-72(fp)
 200dec0:	00800184 	movi	r2,6
 200dec4:	e0bfef0d 	sth	r2,-68(fp)
 200dec8:	00bfe0c4 	movi	r2,-125
 200decc:	e0bfef85 	stb	r2,-66(fp)
 200ded0:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 200ded4:	00808074 	movhi	r2,513
 200ded8:	108fca44 	addi	r2,r2,16169
 200dedc:	10800003 	ldbu	r2,0(r2)
 200dee0:	10803fcc 	andi	r2,r2,255
 200dee4:	1005003a 	cmpeq	r2,r2,zero
 200dee8:	1000111e 	bne	r2,zero,200df30 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 200deec:	e17fef0b 	ldhu	r5,-68(fp)
 200def0:	e1bfef83 	ldbu	r6,-66(fp)
 200def4:	e1fff00b 	ldhu	r7,-64(fp)
 200def8:	e0bffa44 	addi	r2,fp,-23
 200defc:	d8800015 	stw	r2,0(sp)
 200df00:	e13fee17 	ldw	r4,-72(fp)
 200df04:	200712c0 	call	200712c <OSFlagPend>
    return err;
 200df08:	00000906 	br	200df30 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200df0c:	e0bffb17 	ldw	r2,-20(fp)
 200df10:	10c01017 	ldw	r3,64(r2)
 200df14:	e0bff817 	ldw	r2,-32(fp)
 200df18:	1880051e 	bne	r3,r2,200df30 <altera_avalon_jtag_uart_write+0x258>
 200df1c:	e0bffb17 	ldw	r2,-20(fp)
 200df20:	10c00917 	ldw	r3,36(r2)
 200df24:	e0bffb17 	ldw	r2,-20(fp)
 200df28:	10800117 	ldw	r2,4(r2)
 200df2c:	18bff736 	bltu	r3,r2,200df0c <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 200df30:	e0bffb17 	ldw	r2,-20(fp)
 200df34:	10c01017 	ldw	r3,64(r2)
 200df38:	e0bff817 	ldw	r2,-32(fp)
 200df3c:	18800326 	beq	r3,r2,200df4c <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 200df40:	e0bffd17 	ldw	r2,-12(fp)
 200df44:	10800048 	cmpgei	r2,r2,1
 200df48:	103fb11e 	bne	r2,zero,200de10 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 200df4c:	e0bffb17 	ldw	r2,-20(fp)
 200df50:	11000b17 	ldw	r4,44(r2)
 200df54:	200a4600 	call	200a460 <OSSemPost>

  if (ptr != start)
 200df58:	e0fffc17 	ldw	r3,-16(fp)
 200df5c:	e0bff517 	ldw	r2,-44(fp)
 200df60:	18800526 	beq	r3,r2,200df78 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 200df64:	e0fffc17 	ldw	r3,-16(fp)
 200df68:	e0bff517 	ldw	r2,-44(fp)
 200df6c:	1887c83a 	sub	r3,r3,r2
 200df70:	e0ffff15 	stw	r3,-4(fp)
 200df74:	00000906 	br	200df9c <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 200df78:	e0bffe17 	ldw	r2,-8(fp)
 200df7c:	1090000c 	andi	r2,r2,16384
 200df80:	1005003a 	cmpeq	r2,r2,zero
 200df84:	1000031e 	bne	r2,zero,200df94 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 200df88:	00bffd44 	movi	r2,-11
 200df8c:	e0bfff15 	stw	r2,-4(fp)
 200df90:	00000206 	br	200df9c <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 200df94:	00bffec4 	movi	r2,-5
 200df98:	e0bfff15 	stw	r2,-4(fp)
 200df9c:	e0bfff17 	ldw	r2,-4(fp)
}
 200dfa0:	e037883a 	mov	sp,fp
 200dfa4:	dfc00117 	ldw	ra,4(sp)
 200dfa8:	df000017 	ldw	fp,0(sp)
 200dfac:	dec00204 	addi	sp,sp,8
 200dfb0:	f800283a 	ret

0200dfb4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 200dfb4:	defffa04 	addi	sp,sp,-24
 200dfb8:	dfc00515 	stw	ra,20(sp)
 200dfbc:	df000415 	stw	fp,16(sp)
 200dfc0:	df000404 	addi	fp,sp,16
 200dfc4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 200dfc8:	e0bfff17 	ldw	r2,-4(fp)
 200dfcc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 200dfd0:	e0bfff17 	ldw	r2,-4(fp)
 200dfd4:	10800104 	addi	r2,r2,4
 200dfd8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200dfdc:	0005303a 	rdctl	r2,status
 200dfe0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200dfe4:	e0fffd17 	ldw	r3,-12(fp)
 200dfe8:	00bfff84 	movi	r2,-2
 200dfec:	1884703a 	and	r2,r3,r2
 200dff0:	1001703a 	wrctl	status,r2
  
  return context;
 200dff4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 200dff8:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 200dffc:	200f3600 	call	200f360 <alt_tick>
 200e000:	e0bffe17 	ldw	r2,-8(fp)
 200e004:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e008:	e0bffc17 	ldw	r2,-16(fp)
 200e00c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 200e010:	e037883a 	mov	sp,fp
 200e014:	dfc00117 	ldw	ra,4(sp)
 200e018:	df000017 	ldw	fp,0(sp)
 200e01c:	dec00204 	addi	sp,sp,8
 200e020:	f800283a 	ret

0200e024 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 200e024:	defff804 	addi	sp,sp,-32
 200e028:	dfc00715 	stw	ra,28(sp)
 200e02c:	df000615 	stw	fp,24(sp)
 200e030:	df000604 	addi	fp,sp,24
 200e034:	e13ffc15 	stw	r4,-16(fp)
 200e038:	e17ffd15 	stw	r5,-12(fp)
 200e03c:	e1bffe15 	stw	r6,-8(fp)
 200e040:	e1ffff15 	stw	r7,-4(fp)
 200e044:	e0bfff17 	ldw	r2,-4(fp)
 200e048:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 200e04c:	00808074 	movhi	r2,513
 200e050:	108fdf04 	addi	r2,r2,16252
 200e054:	10800017 	ldw	r2,0(r2)
 200e058:	1004c03a 	cmpne	r2,r2,zero
 200e05c:	1000041e 	bne	r2,zero,200e070 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 200e060:	00c08074 	movhi	r3,513
 200e064:	18cfdf04 	addi	r3,r3,16252
 200e068:	e0bffb17 	ldw	r2,-20(fp)
 200e06c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 200e070:	e0bffc17 	ldw	r2,-16(fp)
 200e074:	10800104 	addi	r2,r2,4
 200e078:	1007883a 	mov	r3,r2
 200e07c:	008001c4 	movi	r2,7
 200e080:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 200e084:	d8000015 	stw	zero,0(sp)
 200e088:	e13ffd17 	ldw	r4,-12(fp)
 200e08c:	e17ffe17 	ldw	r5,-8(fp)
 200e090:	01808074 	movhi	r6,513
 200e094:	31b7ed04 	addi	r6,r6,-8268
 200e098:	e1fffc17 	ldw	r7,-16(fp)
 200e09c:	200ebfc0 	call	200ebfc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 200e0a0:	e037883a 	mov	sp,fp
 200e0a4:	dfc00117 	ldw	ra,4(sp)
 200e0a8:	df000017 	ldw	fp,0(sp)
 200e0ac:	dec00204 	addi	sp,sp,8
 200e0b0:	f800283a 	ret

0200e0b4 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 200e0b4:	defff904 	addi	sp,sp,-28
 200e0b8:	dfc00615 	stw	ra,24(sp)
 200e0bc:	df000515 	stw	fp,20(sp)
 200e0c0:	df000504 	addi	fp,sp,20
 200e0c4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 200e0c8:	00800144 	movi	r2,5
 200e0cc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 200e0d0:	00800044 	movi	r2,1
 200e0d4:	d8800015 	stw	r2,0(sp)
 200e0d8:	e0bffe44 	addi	r2,fp,-7
 200e0dc:	d8800115 	stw	r2,4(sp)
 200e0e0:	d8000215 	stw	zero,8(sp)
 200e0e4:	e13fff17 	ldw	r4,-4(fp)
 200e0e8:	000b883a 	mov	r5,zero
 200e0ec:	01800044 	movi	r6,1
 200e0f0:	e1fffe04 	addi	r7,fp,-8
 200e0f4:	200f9780 	call	200f978 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 200e0f8:	e0bffe43 	ldbu	r2,-7(fp)
 200e0fc:	10803fcc 	andi	r2,r2,255
}
 200e100:	e037883a 	mov	sp,fp
 200e104:	dfc00117 	ldw	ra,4(sp)
 200e108:	df000017 	ldw	fp,0(sp)
 200e10c:	dec00204 	addi	sp,sp,8
 200e110:	f800283a 	ret

0200e114 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 200e114:	defff604 	addi	sp,sp,-40
 200e118:	dfc00915 	stw	ra,36(sp)
 200e11c:	df000815 	stw	fp,32(sp)
 200e120:	df000804 	addi	fp,sp,32
 200e124:	e13ffd15 	stw	r4,-12(fp)
 200e128:	e17ffe15 	stw	r5,-8(fp)
 200e12c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 200e130:	e0bfff17 	ldw	r2,-4(fp)
 200e134:	1005003a 	cmpeq	r2,r2,zero
 200e138:	1000121e 	bne	r2,zero,200e184 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 200e13c:	00bff604 	movi	r2,-40
 200e140:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 200e144:	e0bffe17 	ldw	r2,-8(fp)
 200e148:	1004d63a 	srli	r2,r2,24
 200e14c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 200e150:	e0bffe17 	ldw	r2,-8(fp)
 200e154:	1004d43a 	srli	r2,r2,16
 200e158:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 200e15c:	e0bffe17 	ldw	r2,-8(fp)
 200e160:	1004d23a 	srli	r2,r2,8
 200e164:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 200e168:	e0bffe17 	ldw	r2,-8(fp)
 200e16c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 200e170:	00800144 	movi	r2,5
 200e174:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 200e178:	e13ffd17 	ldw	r4,-12(fp)
 200e17c:	200e6d80 	call	200e6d8 <epcs_enter_4_bytes_mode>
 200e180:	00000c06 	br	200e1b4 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 200e184:	00bff604 	movi	r2,-40
 200e188:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 200e18c:	e0bffe17 	ldw	r2,-8(fp)
 200e190:	1004d43a 	srli	r2,r2,16
 200e194:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 200e198:	e0bffe17 	ldw	r2,-8(fp)
 200e19c:	1004d23a 	srli	r2,r2,8
 200e1a0:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 200e1a4:	e0bffe17 	ldw	r2,-8(fp)
 200e1a8:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 200e1ac:	00800104 	movi	r2,4
 200e1b0:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 200e1b4:	e13ffd17 	ldw	r4,-12(fp)
 200e1b8:	200e3c80 	call	200e3c8 <epcs_write_enable>

  alt_avalon_spi_command(
 200e1bc:	e1bffb03 	ldbu	r6,-20(fp)
 200e1c0:	e1fffb44 	addi	r7,fp,-19
 200e1c4:	d8000015 	stw	zero,0(sp)
 200e1c8:	d8000115 	stw	zero,4(sp)
 200e1cc:	d8000215 	stw	zero,8(sp)
 200e1d0:	e13ffd17 	ldw	r4,-12(fp)
 200e1d4:	000b883a 	mov	r5,zero
 200e1d8:	200f9780 	call	200f978 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 200e1dc:	e13ffd17 	ldw	r4,-12(fp)
 200e1e0:	200e20c0 	call	200e20c <epcs_await_wip_released>

  if(four_bytes_mode)
 200e1e4:	e0bfff17 	ldw	r2,-4(fp)
 200e1e8:	1005003a 	cmpeq	r2,r2,zero
 200e1ec:	1000021e 	bne	r2,zero,200e1f8 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 200e1f0:	e13ffd17 	ldw	r4,-12(fp)
 200e1f4:	200e7300 	call	200e730 <epcs_exit_4_bytes_mode>
  }
}
 200e1f8:	e037883a 	mov	sp,fp
 200e1fc:	dfc00117 	ldw	ra,4(sp)
 200e200:	df000017 	ldw	fp,0(sp)
 200e204:	dec00204 	addi	sp,sp,8
 200e208:	f800283a 	ret

0200e20c <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 200e20c:	defffd04 	addi	sp,sp,-12
 200e210:	dfc00215 	stw	ra,8(sp)
 200e214:	df000115 	stw	fp,4(sp)
 200e218:	df000104 	addi	fp,sp,4
 200e21c:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 200e220:	e13fff17 	ldw	r4,-4(fp)
 200e224:	200e2440 	call	200e244 <epcs_test_wip>
 200e228:	1004c03a 	cmpne	r2,r2,zero
 200e22c:	103ffc1e 	bne	r2,zero,200e220 <epcs_await_wip_released+0x14>
  {
  }
}
 200e230:	e037883a 	mov	sp,fp
 200e234:	dfc00117 	ldw	ra,4(sp)
 200e238:	df000017 	ldw	fp,0(sp)
 200e23c:	dec00204 	addi	sp,sp,8
 200e240:	f800283a 	ret

0200e244 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 200e244:	defffd04 	addi	sp,sp,-12
 200e248:	dfc00215 	stw	ra,8(sp)
 200e24c:	df000115 	stw	fp,4(sp)
 200e250:	df000104 	addi	fp,sp,4
 200e254:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 200e258:	e13fff17 	ldw	r4,-4(fp)
 200e25c:	200e0b40 	call	200e0b4 <epcs_read_status_register>
 200e260:	10803fcc 	andi	r2,r2,255
 200e264:	1080004c 	andi	r2,r2,1
}
 200e268:	e037883a 	mov	sp,fp
 200e26c:	dfc00117 	ldw	ra,4(sp)
 200e270:	df000017 	ldw	fp,0(sp)
 200e274:	dec00204 	addi	sp,sp,8
 200e278:	f800283a 	ret

0200e27c <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 200e27c:	defff404 	addi	sp,sp,-48
 200e280:	dfc00b15 	stw	ra,44(sp)
 200e284:	df000a15 	stw	fp,40(sp)
 200e288:	df000a04 	addi	fp,sp,40
 200e28c:	e13ffc15 	stw	r4,-16(fp)
 200e290:	e17ffd15 	stw	r5,-12(fp)
 200e294:	e1bffe15 	stw	r6,-8(fp)
 200e298:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 200e29c:	008000c4 	movi	r2,3
 200e2a0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 200e2a4:	e0800217 	ldw	r2,8(fp)
 200e2a8:	1005003a 	cmpeq	r2,r2,zero
 200e2ac:	10001c1e 	bne	r2,zero,200e320 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 200e2b0:	e0bffd17 	ldw	r2,-12(fp)
 200e2b4:	1005d63a 	srai	r2,r2,24
 200e2b8:	1007883a 	mov	r3,r2
 200e2bc:	00bfffc4 	movi	r2,-1
 200e2c0:	1884703a 	and	r2,r3,r2
 200e2c4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 200e2c8:	e0bffd17 	ldw	r2,-12(fp)
 200e2cc:	1005d43a 	srai	r2,r2,16
 200e2d0:	1007883a 	mov	r3,r2
 200e2d4:	00bfffc4 	movi	r2,-1
 200e2d8:	1884703a 	and	r2,r3,r2
 200e2dc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 200e2e0:	e0bffd17 	ldw	r2,-12(fp)
 200e2e4:	1005d23a 	srai	r2,r2,8
 200e2e8:	1007883a 	mov	r3,r2
 200e2ec:	00bfffc4 	movi	r2,-1
 200e2f0:	1884703a 	and	r2,r3,r2
 200e2f4:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 200e2f8:	e0bffd17 	ldw	r2,-12(fp)
 200e2fc:	1007883a 	mov	r3,r2
 200e300:	00bfffc4 	movi	r2,-1
 200e304:	1884703a 	and	r2,r3,r2
 200e308:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 200e30c:	00800144 	movi	r2,5
 200e310:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 200e314:	e13ffc17 	ldw	r4,-16(fp)
 200e318:	200e6d80 	call	200e6d8 <epcs_enter_4_bytes_mode>
 200e31c:	00001306 	br	200e36c <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 200e320:	e0bffd17 	ldw	r2,-12(fp)
 200e324:	1005d43a 	srai	r2,r2,16
 200e328:	1007883a 	mov	r3,r2
 200e32c:	00bfffc4 	movi	r2,-1
 200e330:	1884703a 	and	r2,r3,r2
 200e334:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 200e338:	e0bffd17 	ldw	r2,-12(fp)
 200e33c:	1005d23a 	srai	r2,r2,8
 200e340:	1007883a 	mov	r3,r2
 200e344:	00bfffc4 	movi	r2,-1
 200e348:	1884703a 	and	r2,r3,r2
 200e34c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 200e350:	e0bffd17 	ldw	r2,-12(fp)
 200e354:	1007883a 	mov	r3,r2
 200e358:	00bfffc4 	movi	r2,-1
 200e35c:	1884703a 	and	r2,r3,r2
 200e360:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 200e364:	00800104 	movi	r2,4
 200e368:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 200e36c:	e13ffc17 	ldw	r4,-16(fp)
 200e370:	200e20c0 	call	200e20c <epcs_await_wip_released>

  alt_avalon_spi_command(
 200e374:	e0bfff17 	ldw	r2,-4(fp)
 200e378:	e1fffa04 	addi	r7,fp,-24
 200e37c:	d8800015 	stw	r2,0(sp)
 200e380:	e0bffe17 	ldw	r2,-8(fp)
 200e384:	d8800115 	stw	r2,4(sp)
 200e388:	d8000215 	stw	zero,8(sp)
 200e38c:	e13ffc17 	ldw	r4,-16(fp)
 200e390:	000b883a 	mov	r5,zero
 200e394:	e1bff917 	ldw	r6,-28(fp)
 200e398:	200f9780 	call	200f978 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 200e39c:	e0800217 	ldw	r2,8(fp)
 200e3a0:	1005003a 	cmpeq	r2,r2,zero
 200e3a4:	1000021e 	bne	r2,zero,200e3b0 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 200e3a8:	e13ffc17 	ldw	r4,-16(fp)
 200e3ac:	200e7300 	call	200e730 <epcs_exit_4_bytes_mode>
  }

  return length;
 200e3b0:	e0bfff17 	ldw	r2,-4(fp)
}
 200e3b4:	e037883a 	mov	sp,fp
 200e3b8:	dfc00117 	ldw	ra,4(sp)
 200e3bc:	df000017 	ldw	fp,0(sp)
 200e3c0:	dec00204 	addi	sp,sp,8
 200e3c4:	f800283a 	ret

0200e3c8 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 200e3c8:	defff904 	addi	sp,sp,-28
 200e3cc:	dfc00615 	stw	ra,24(sp)
 200e3d0:	df000515 	stw	fp,20(sp)
 200e3d4:	df000504 	addi	fp,sp,20
 200e3d8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 200e3dc:	00800184 	movi	r2,6
 200e3e0:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 200e3e4:	d8000015 	stw	zero,0(sp)
 200e3e8:	d8000115 	stw	zero,4(sp)
 200e3ec:	d8000215 	stw	zero,8(sp)
 200e3f0:	e13fff17 	ldw	r4,-4(fp)
 200e3f4:	000b883a 	mov	r5,zero
 200e3f8:	01800044 	movi	r6,1
 200e3fc:	e1fffe04 	addi	r7,fp,-8
 200e400:	200f9780 	call	200f978 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 200e404:	e037883a 	mov	sp,fp
 200e408:	dfc00117 	ldw	ra,4(sp)
 200e40c:	df000017 	ldw	fp,0(sp)
 200e410:	dec00204 	addi	sp,sp,8
 200e414:	f800283a 	ret

0200e418 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 200e418:	defff804 	addi	sp,sp,-32
 200e41c:	dfc00715 	stw	ra,28(sp)
 200e420:	df000615 	stw	fp,24(sp)
 200e424:	df000604 	addi	fp,sp,24
 200e428:	e13ffe15 	stw	r4,-8(fp)
 200e42c:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 200e430:	00800044 	movi	r2,1
 200e434:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 200e438:	e0bfff03 	ldbu	r2,-4(fp)
 200e43c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 200e440:	d8000015 	stw	zero,0(sp)
 200e444:	d8000115 	stw	zero,4(sp)
 200e448:	d8000215 	stw	zero,8(sp)
 200e44c:	e13ffe17 	ldw	r4,-8(fp)
 200e450:	000b883a 	mov	r5,zero
 200e454:	01800084 	movi	r6,2
 200e458:	e1fffd04 	addi	r7,fp,-12
 200e45c:	200f9780 	call	200f978 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 200e460:	e13ffe17 	ldw	r4,-8(fp)
 200e464:	200e20c0 	call	200e20c <epcs_await_wip_released>
}
 200e468:	e037883a 	mov	sp,fp
 200e46c:	dfc00117 	ldw	ra,4(sp)
 200e470:	df000017 	ldw	fp,0(sp)
 200e474:	dec00204 	addi	sp,sp,8
 200e478:	f800283a 	ret

0200e47c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 200e47c:	defff404 	addi	sp,sp,-48
 200e480:	dfc00b15 	stw	ra,44(sp)
 200e484:	df000a15 	stw	fp,40(sp)
 200e488:	df000a04 	addi	fp,sp,40
 200e48c:	e13ffc15 	stw	r4,-16(fp)
 200e490:	e17ffd15 	stw	r5,-12(fp)
 200e494:	e1bffe15 	stw	r6,-8(fp)
 200e498:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 200e49c:	00800084 	movi	r2,2
 200e4a0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 200e4a4:	e0800217 	ldw	r2,8(fp)
 200e4a8:	1005003a 	cmpeq	r2,r2,zero
 200e4ac:	10001c1e 	bne	r2,zero,200e520 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 200e4b0:	e0bffd17 	ldw	r2,-12(fp)
 200e4b4:	1005d63a 	srai	r2,r2,24
 200e4b8:	1007883a 	mov	r3,r2
 200e4bc:	00bfffc4 	movi	r2,-1
 200e4c0:	1884703a 	and	r2,r3,r2
 200e4c4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 200e4c8:	e0bffd17 	ldw	r2,-12(fp)
 200e4cc:	1005d43a 	srai	r2,r2,16
 200e4d0:	1007883a 	mov	r3,r2
 200e4d4:	00bfffc4 	movi	r2,-1
 200e4d8:	1884703a 	and	r2,r3,r2
 200e4dc:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 200e4e0:	e0bffd17 	ldw	r2,-12(fp)
 200e4e4:	1005d23a 	srai	r2,r2,8
 200e4e8:	1007883a 	mov	r3,r2
 200e4ec:	00bfffc4 	movi	r2,-1
 200e4f0:	1884703a 	and	r2,r3,r2
 200e4f4:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 200e4f8:	e0bffd17 	ldw	r2,-12(fp)
 200e4fc:	1007883a 	mov	r3,r2
 200e500:	00bfffc4 	movi	r2,-1
 200e504:	1884703a 	and	r2,r3,r2
 200e508:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 200e50c:	00800144 	movi	r2,5
 200e510:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 200e514:	e13ffc17 	ldw	r4,-16(fp)
 200e518:	200e6d80 	call	200e6d8 <epcs_enter_4_bytes_mode>
 200e51c:	00001306 	br	200e56c <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 200e520:	e0bffd17 	ldw	r2,-12(fp)
 200e524:	1005d43a 	srai	r2,r2,16
 200e528:	1007883a 	mov	r3,r2
 200e52c:	00bfffc4 	movi	r2,-1
 200e530:	1884703a 	and	r2,r3,r2
 200e534:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 200e538:	e0bffd17 	ldw	r2,-12(fp)
 200e53c:	1005d23a 	srai	r2,r2,8
 200e540:	1007883a 	mov	r3,r2
 200e544:	00bfffc4 	movi	r2,-1
 200e548:	1884703a 	and	r2,r3,r2
 200e54c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 200e550:	e0bffd17 	ldw	r2,-12(fp)
 200e554:	1007883a 	mov	r3,r2
 200e558:	00bfffc4 	movi	r2,-1
 200e55c:	1884703a 	and	r2,r3,r2
 200e560:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 200e564:	00800104 	movi	r2,4
 200e568:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 200e56c:	e13ffc17 	ldw	r4,-16(fp)
 200e570:	200e3c80 	call	200e3c8 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 200e574:	e1fffa04 	addi	r7,fp,-24
 200e578:	d8000015 	stw	zero,0(sp)
 200e57c:	d8000115 	stw	zero,4(sp)
 200e580:	00800044 	movi	r2,1
 200e584:	d8800215 	stw	r2,8(sp)
 200e588:	e13ffc17 	ldw	r4,-16(fp)
 200e58c:	000b883a 	mov	r5,zero
 200e590:	e1bff917 	ldw	r6,-28(fp)
 200e594:	200f9780 	call	200f978 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 200e598:	e1bfff17 	ldw	r6,-4(fp)
 200e59c:	d8000015 	stw	zero,0(sp)
 200e5a0:	d8000115 	stw	zero,4(sp)
 200e5a4:	d8000215 	stw	zero,8(sp)
 200e5a8:	e13ffc17 	ldw	r4,-16(fp)
 200e5ac:	000b883a 	mov	r5,zero
 200e5b0:	e1fffe17 	ldw	r7,-8(fp)
 200e5b4:	200f9780 	call	200f978 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 200e5b8:	e13ffc17 	ldw	r4,-16(fp)
 200e5bc:	200e20c0 	call	200e20c <epcs_await_wip_released>

  if(four_bytes_mode)
 200e5c0:	e0800217 	ldw	r2,8(fp)
 200e5c4:	1005003a 	cmpeq	r2,r2,zero
 200e5c8:	1000021e 	bne	r2,zero,200e5d4 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 200e5cc:	e13ffc17 	ldw	r4,-16(fp)
 200e5d0:	200e7300 	call	200e730 <epcs_exit_4_bytes_mode>
  }

  return length;
 200e5d4:	e0bfff17 	ldw	r2,-4(fp)
}
 200e5d8:	e037883a 	mov	sp,fp
 200e5dc:	dfc00117 	ldw	ra,4(sp)
 200e5e0:	df000017 	ldw	fp,0(sp)
 200e5e4:	dec00204 	addi	sp,sp,8
 200e5e8:	f800283a 	ret

0200e5ec <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 200e5ec:	defff804 	addi	sp,sp,-32
 200e5f0:	dfc00715 	stw	ra,28(sp)
 200e5f4:	df000615 	stw	fp,24(sp)
 200e5f8:	df000604 	addi	fp,sp,24
 200e5fc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 200e600:	00bfeac4 	movi	r2,-85
 200e604:	e0bffd05 	stb	r2,-12(fp)
 200e608:	e03ffd45 	stb	zero,-11(fp)
 200e60c:	e03ffd85 	stb	zero,-10(fp)
 200e610:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 200e614:	00800044 	movi	r2,1
 200e618:	d8800015 	stw	r2,0(sp)
 200e61c:	e0bffe04 	addi	r2,fp,-8
 200e620:	d8800115 	stw	r2,4(sp)
 200e624:	d8000215 	stw	zero,8(sp)
 200e628:	e13fff17 	ldw	r4,-4(fp)
 200e62c:	000b883a 	mov	r5,zero
 200e630:	01800104 	movi	r6,4
 200e634:	e1fffd04 	addi	r7,fp,-12
 200e638:	200f9780 	call	200f978 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 200e63c:	e0bffe03 	ldbu	r2,-8(fp)
 200e640:	10803fcc 	andi	r2,r2,255
}
 200e644:	e037883a 	mov	sp,fp
 200e648:	dfc00117 	ldw	ra,4(sp)
 200e64c:	df000017 	ldw	fp,0(sp)
 200e650:	dec00204 	addi	sp,sp,8
 200e654:	f800283a 	ret

0200e658 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 200e658:	defff904 	addi	sp,sp,-28
 200e65c:	dfc00615 	stw	ra,24(sp)
 200e660:	df000515 	stw	fp,20(sp)
 200e664:	df000504 	addi	fp,sp,20
 200e668:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 200e66c:	00bfe7c4 	movi	r2,-97
 200e670:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 200e674:	008000c4 	movi	r2,3
 200e678:	d8800015 	stw	r2,0(sp)
 200e67c:	e0bffe44 	addi	r2,fp,-7
 200e680:	d8800115 	stw	r2,4(sp)
 200e684:	d8000215 	stw	zero,8(sp)
 200e688:	e13fff17 	ldw	r4,-4(fp)
 200e68c:	000b883a 	mov	r5,zero
 200e690:	01800044 	movi	r6,1
 200e694:	e1fffe04 	addi	r7,fp,-8
 200e698:	200f9780 	call	200f978 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 200e69c:	e0bffe43 	ldbu	r2,-7(fp)
 200e6a0:	10803fcc 	andi	r2,r2,255
 200e6a4:	1006943a 	slli	r3,r2,16
 200e6a8:	e0bffe83 	ldbu	r2,-6(fp)
 200e6ac:	10803fcc 	andi	r2,r2,255
 200e6b0:	1004923a 	slli	r2,r2,8
 200e6b4:	1886b03a 	or	r3,r3,r2
 200e6b8:	e0bffec3 	ldbu	r2,-5(fp)
 200e6bc:	10803fcc 	andi	r2,r2,255
 200e6c0:	1884b03a 	or	r2,r3,r2
}
 200e6c4:	e037883a 	mov	sp,fp
 200e6c8:	dfc00117 	ldw	ra,4(sp)
 200e6cc:	df000017 	ldw	fp,0(sp)
 200e6d0:	dec00204 	addi	sp,sp,8
 200e6d4:	f800283a 	ret

0200e6d8 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 200e6d8:	defff904 	addi	sp,sp,-28
 200e6dc:	dfc00615 	stw	ra,24(sp)
 200e6e0:	df000515 	stw	fp,20(sp)
 200e6e4:	df000504 	addi	fp,sp,20
 200e6e8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 200e6ec:	00bfedc4 	movi	r2,-73
 200e6f0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 200e6f4:	e13fff17 	ldw	r4,-4(fp)
 200e6f8:	200e3c80 	call	200e3c8 <epcs_write_enable>

  alt_avalon_spi_command(
 200e6fc:	d8000015 	stw	zero,0(sp)
 200e700:	d8000115 	stw	zero,4(sp)
 200e704:	d8000215 	stw	zero,8(sp)
 200e708:	e13fff17 	ldw	r4,-4(fp)
 200e70c:	000b883a 	mov	r5,zero
 200e710:	01800044 	movi	r6,1
 200e714:	e1fffe04 	addi	r7,fp,-8
 200e718:	200f9780 	call	200f978 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 200e71c:	e037883a 	mov	sp,fp
 200e720:	dfc00117 	ldw	ra,4(sp)
 200e724:	df000017 	ldw	fp,0(sp)
 200e728:	dec00204 	addi	sp,sp,8
 200e72c:	f800283a 	ret

0200e730 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 200e730:	defff904 	addi	sp,sp,-28
 200e734:	dfc00615 	stw	ra,24(sp)
 200e738:	df000515 	stw	fp,20(sp)
 200e73c:	df000504 	addi	fp,sp,20
 200e740:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 200e744:	00bffa44 	movi	r2,-23
 200e748:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 200e74c:	e13fff17 	ldw	r4,-4(fp)
 200e750:	200e3c80 	call	200e3c8 <epcs_write_enable>

  alt_avalon_spi_command(
 200e754:	d8000015 	stw	zero,0(sp)
 200e758:	d8000115 	stw	zero,4(sp)
 200e75c:	d8000215 	stw	zero,8(sp)
 200e760:	e13fff17 	ldw	r4,-4(fp)
 200e764:	000b883a 	mov	r5,zero
 200e768:	01800044 	movi	r6,1
 200e76c:	e1fffe04 	addi	r7,fp,-8
 200e770:	200f9780 	call	200f978 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 200e774:	e037883a 	mov	sp,fp
 200e778:	dfc00117 	ldw	ra,4(sp)
 200e77c:	df000017 	ldw	fp,0(sp)
 200e780:	dec00204 	addi	sp,sp,8
 200e784:	f800283a 	ret

0200e788 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200e788:	defff404 	addi	sp,sp,-48
 200e78c:	df000b15 	stw	fp,44(sp)
 200e790:	df000b04 	addi	fp,sp,44
 200e794:	e13ffb15 	stw	r4,-20(fp)
 200e798:	e17ffc15 	stw	r5,-16(fp)
 200e79c:	e1bffd15 	stw	r6,-12(fp)
 200e7a0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200e7a4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200e7a8:	00808074 	movhi	r2,513
 200e7ac:	108fdf04 	addi	r2,r2,16252
 200e7b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 200e7b4:	1005003a 	cmpeq	r2,r2,zero
 200e7b8:	1000411e 	bne	r2,zero,200e8c0 <alt_alarm_start+0x138>
  {
    if (alarm)
 200e7bc:	e0bffb17 	ldw	r2,-20(fp)
 200e7c0:	1005003a 	cmpeq	r2,r2,zero
 200e7c4:	10003b1e 	bne	r2,zero,200e8b4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 200e7c8:	e0fffb17 	ldw	r3,-20(fp)
 200e7cc:	e0bffd17 	ldw	r2,-12(fp)
 200e7d0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 200e7d4:	e0fffb17 	ldw	r3,-20(fp)
 200e7d8:	e0bffe17 	ldw	r2,-8(fp)
 200e7dc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e7e0:	0005303a 	rdctl	r2,status
 200e7e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e7e8:	e0fff817 	ldw	r3,-32(fp)
 200e7ec:	00bfff84 	movi	r2,-2
 200e7f0:	1884703a 	and	r2,r3,r2
 200e7f4:	1001703a 	wrctl	status,r2
  
  return context;
 200e7f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 200e7fc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200e800:	00808074 	movhi	r2,513
 200e804:	108fe004 	addi	r2,r2,16256
 200e808:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 200e80c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 200e810:	e0fffc17 	ldw	r3,-16(fp)
 200e814:	e0bff917 	ldw	r2,-28(fp)
 200e818:	1885883a 	add	r2,r3,r2
 200e81c:	10c00044 	addi	r3,r2,1
 200e820:	e0bffb17 	ldw	r2,-20(fp)
 200e824:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200e828:	e0bffb17 	ldw	r2,-20(fp)
 200e82c:	10c00217 	ldw	r3,8(r2)
 200e830:	e0bff917 	ldw	r2,-28(fp)
 200e834:	1880042e 	bgeu	r3,r2,200e848 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 200e838:	e0fffb17 	ldw	r3,-20(fp)
 200e83c:	00800044 	movi	r2,1
 200e840:	18800405 	stb	r2,16(r3)
 200e844:	00000206 	br	200e850 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 200e848:	e0bffb17 	ldw	r2,-20(fp)
 200e84c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200e850:	e0fffb17 	ldw	r3,-20(fp)
 200e854:	00808074 	movhi	r2,513
 200e858:	1088c504 	addi	r2,r2,8980
 200e85c:	e0bff615 	stw	r2,-40(fp)
 200e860:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200e864:	e0fff717 	ldw	r3,-36(fp)
 200e868:	e0bff617 	ldw	r2,-40(fp)
 200e86c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200e870:	e0bff617 	ldw	r2,-40(fp)
 200e874:	10c00017 	ldw	r3,0(r2)
 200e878:	e0bff717 	ldw	r2,-36(fp)
 200e87c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200e880:	e0bff617 	ldw	r2,-40(fp)
 200e884:	10c00017 	ldw	r3,0(r2)
 200e888:	e0bff717 	ldw	r2,-36(fp)
 200e88c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200e890:	e0fff617 	ldw	r3,-40(fp)
 200e894:	e0bff717 	ldw	r2,-36(fp)
 200e898:	18800015 	stw	r2,0(r3)
 200e89c:	e0bffa17 	ldw	r2,-24(fp)
 200e8a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e8a4:	e0bff517 	ldw	r2,-44(fp)
 200e8a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 200e8ac:	e03fff15 	stw	zero,-4(fp)
 200e8b0:	00000506 	br	200e8c8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 200e8b4:	00bffa84 	movi	r2,-22
 200e8b8:	e0bfff15 	stw	r2,-4(fp)
 200e8bc:	00000206 	br	200e8c8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 200e8c0:	00bfde84 	movi	r2,-134
 200e8c4:	e0bfff15 	stw	r2,-4(fp)
 200e8c8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 200e8cc:	e037883a 	mov	sp,fp
 200e8d0:	df000017 	ldw	fp,0(sp)
 200e8d4:	dec00104 	addi	sp,sp,4
 200e8d8:	f800283a 	ret

0200e8dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 200e8dc:	defffe04 	addi	sp,sp,-8
 200e8e0:	df000115 	stw	fp,4(sp)
 200e8e4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 200e8e8:	e03fff15 	stw	zero,-4(fp)
 200e8ec:	00000506 	br	200e904 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 200e8f0:	e0bfff17 	ldw	r2,-4(fp)
 200e8f4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 200e8f8:	e0bfff17 	ldw	r2,-4(fp)
 200e8fc:	10800804 	addi	r2,r2,32
 200e900:	e0bfff15 	stw	r2,-4(fp)
 200e904:	e0bfff17 	ldw	r2,-4(fp)
 200e908:	10840030 	cmpltui	r2,r2,4096
 200e90c:	103ff81e 	bne	r2,zero,200e8f0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200e910:	e037883a 	mov	sp,fp
 200e914:	df000017 	ldw	fp,0(sp)
 200e918:	dec00104 	addi	sp,sp,4
 200e91c:	f800283a 	ret

0200e920 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 200e920:	defff904 	addi	sp,sp,-28
 200e924:	dfc00615 	stw	ra,24(sp)
 200e928:	df000515 	stw	fp,20(sp)
 200e92c:	df000504 	addi	fp,sp,20
 200e930:	e13ffd15 	stw	r4,-12(fp)
 200e934:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200e938:	e0bffd17 	ldw	r2,-12(fp)
 200e93c:	1005003a 	cmpeq	r2,r2,zero
 200e940:	1000041e 	bne	r2,zero,200e954 <alt_dev_llist_insert+0x34>
 200e944:	e0bffd17 	ldw	r2,-12(fp)
 200e948:	10800217 	ldw	r2,8(r2)
 200e94c:	1004c03a 	cmpne	r2,r2,zero
 200e950:	1000071e 	bne	r2,zero,200e970 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 200e954:	200e9d40 	call	200e9d4 <alt_get_errno>
 200e958:	1007883a 	mov	r3,r2
 200e95c:	00800584 	movi	r2,22
 200e960:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 200e964:	00bffa84 	movi	r2,-22
 200e968:	e0bfff15 	stw	r2,-4(fp)
 200e96c:	00001306 	br	200e9bc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 200e970:	e0fffd17 	ldw	r3,-12(fp)
 200e974:	e0bffe17 	ldw	r2,-8(fp)
 200e978:	e0bffb15 	stw	r2,-20(fp)
 200e97c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200e980:	e0fffc17 	ldw	r3,-16(fp)
 200e984:	e0bffb17 	ldw	r2,-20(fp)
 200e988:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200e98c:	e0bffb17 	ldw	r2,-20(fp)
 200e990:	10c00017 	ldw	r3,0(r2)
 200e994:	e0bffc17 	ldw	r2,-16(fp)
 200e998:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200e99c:	e0bffb17 	ldw	r2,-20(fp)
 200e9a0:	10c00017 	ldw	r3,0(r2)
 200e9a4:	e0bffc17 	ldw	r2,-16(fp)
 200e9a8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200e9ac:	e0fffb17 	ldw	r3,-20(fp)
 200e9b0:	e0bffc17 	ldw	r2,-16(fp)
 200e9b4:	18800015 	stw	r2,0(r3)

  return 0;  
 200e9b8:	e03fff15 	stw	zero,-4(fp)
 200e9bc:	e0bfff17 	ldw	r2,-4(fp)
}
 200e9c0:	e037883a 	mov	sp,fp
 200e9c4:	dfc00117 	ldw	ra,4(sp)
 200e9c8:	df000017 	ldw	fp,0(sp)
 200e9cc:	dec00204 	addi	sp,sp,8
 200e9d0:	f800283a 	ret

0200e9d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e9d4:	defffd04 	addi	sp,sp,-12
 200e9d8:	dfc00215 	stw	ra,8(sp)
 200e9dc:	df000115 	stw	fp,4(sp)
 200e9e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200e9e4:	00808074 	movhi	r2,513
 200e9e8:	1088a104 	addi	r2,r2,8836
 200e9ec:	10800017 	ldw	r2,0(r2)
 200e9f0:	1005003a 	cmpeq	r2,r2,zero
 200e9f4:	1000061e 	bne	r2,zero,200ea10 <alt_get_errno+0x3c>
 200e9f8:	00808074 	movhi	r2,513
 200e9fc:	1088a104 	addi	r2,r2,8836
 200ea00:	10800017 	ldw	r2,0(r2)
 200ea04:	103ee83a 	callr	r2
 200ea08:	e0bfff15 	stw	r2,-4(fp)
 200ea0c:	00000306 	br	200ea1c <alt_get_errno+0x48>
 200ea10:	00808074 	movhi	r2,513
 200ea14:	108fc104 	addi	r2,r2,16132
 200ea18:	e0bfff15 	stw	r2,-4(fp)
 200ea1c:	e0bfff17 	ldw	r2,-4(fp)
}
 200ea20:	e037883a 	mov	sp,fp
 200ea24:	dfc00117 	ldw	ra,4(sp)
 200ea28:	df000017 	ldw	fp,0(sp)
 200ea2c:	dec00204 	addi	sp,sp,8
 200ea30:	f800283a 	ret

0200ea34 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200ea34:	defffd04 	addi	sp,sp,-12
 200ea38:	dfc00215 	stw	ra,8(sp)
 200ea3c:	df000115 	stw	fp,4(sp)
 200ea40:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200ea44:	00bfff04 	movi	r2,-4
 200ea48:	00c08074 	movhi	r3,513
 200ea4c:	18c11404 	addi	r3,r3,1104
 200ea50:	1885883a 	add	r2,r3,r2
 200ea54:	e0bfff15 	stw	r2,-4(fp)
 200ea58:	00000606 	br	200ea74 <_do_ctors+0x40>
        (*ctor) (); 
 200ea5c:	e0bfff17 	ldw	r2,-4(fp)
 200ea60:	10800017 	ldw	r2,0(r2)
 200ea64:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200ea68:	e0bfff17 	ldw	r2,-4(fp)
 200ea6c:	10bfff04 	addi	r2,r2,-4
 200ea70:	e0bfff15 	stw	r2,-4(fp)
 200ea74:	e0ffff17 	ldw	r3,-4(fp)
 200ea78:	00808074 	movhi	r2,513
 200ea7c:	10811204 	addi	r2,r2,1096
 200ea80:	18bff62e 	bgeu	r3,r2,200ea5c <_do_ctors+0x28>
        (*ctor) (); 
}
 200ea84:	e037883a 	mov	sp,fp
 200ea88:	dfc00117 	ldw	ra,4(sp)
 200ea8c:	df000017 	ldw	fp,0(sp)
 200ea90:	dec00204 	addi	sp,sp,8
 200ea94:	f800283a 	ret

0200ea98 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 200ea98:	defffd04 	addi	sp,sp,-12
 200ea9c:	dfc00215 	stw	ra,8(sp)
 200eaa0:	df000115 	stw	fp,4(sp)
 200eaa4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200eaa8:	00bfff04 	movi	r2,-4
 200eaac:	00c08074 	movhi	r3,513
 200eab0:	18c11504 	addi	r3,r3,1108
 200eab4:	1885883a 	add	r2,r3,r2
 200eab8:	e0bfff15 	stw	r2,-4(fp)
 200eabc:	00000606 	br	200ead8 <_do_dtors+0x40>
        (*dtor) (); 
 200eac0:	e0bfff17 	ldw	r2,-4(fp)
 200eac4:	10800017 	ldw	r2,0(r2)
 200eac8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200eacc:	e0bfff17 	ldw	r2,-4(fp)
 200ead0:	10bfff04 	addi	r2,r2,-4
 200ead4:	e0bfff15 	stw	r2,-4(fp)
 200ead8:	e0ffff17 	ldw	r3,-4(fp)
 200eadc:	00808074 	movhi	r2,513
 200eae0:	10811404 	addi	r2,r2,1104
 200eae4:	18bff62e 	bgeu	r3,r2,200eac0 <_do_dtors+0x28>
        (*dtor) (); 
}
 200eae8:	e037883a 	mov	sp,fp
 200eaec:	dfc00117 	ldw	ra,4(sp)
 200eaf0:	df000017 	ldw	fp,0(sp)
 200eaf4:	dec00204 	addi	sp,sp,8
 200eaf8:	f800283a 	ret

0200eafc <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 200eafc:	defffb04 	addi	sp,sp,-20
 200eb00:	dfc00415 	stw	ra,16(sp)
 200eb04:	df000315 	stw	fp,12(sp)
 200eb08:	df000304 	addi	fp,sp,12
 200eb0c:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 200eb10:	e13ffe17 	ldw	r4,-8(fp)
 200eb14:	d1602e04 	addi	r5,gp,-32584
 200eb18:	200fbb00 	call	200fbb0 <alt_find_dev>
 200eb1c:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 200eb20:	e0bffd17 	ldw	r2,-12(fp)
 200eb24:	1005003a 	cmpeq	r2,r2,zero
 200eb28:	10000b1e 	bne	r2,zero,200eb58 <alt_flash_open_dev+0x5c>
 200eb2c:	e0bffd17 	ldw	r2,-12(fp)
 200eb30:	10800317 	ldw	r2,12(r2)
 200eb34:	1005003a 	cmpeq	r2,r2,zero
 200eb38:	1000071e 	bne	r2,zero,200eb58 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 200eb3c:	e0bffd17 	ldw	r2,-12(fp)
 200eb40:	10800317 	ldw	r2,12(r2)
 200eb44:	e13ffd17 	ldw	r4,-12(fp)
 200eb48:	e17ffe17 	ldw	r5,-8(fp)
 200eb4c:	103ee83a 	callr	r2
 200eb50:	e0bfff15 	stw	r2,-4(fp)
 200eb54:	00000206 	br	200eb60 <alt_flash_open_dev+0x64>
  }

  return dev;
 200eb58:	e0bffd17 	ldw	r2,-12(fp)
 200eb5c:	e0bfff15 	stw	r2,-4(fp)
 200eb60:	e0bfff17 	ldw	r2,-4(fp)
}
 200eb64:	e037883a 	mov	sp,fp
 200eb68:	dfc00117 	ldw	ra,4(sp)
 200eb6c:	df000017 	ldw	fp,0(sp)
 200eb70:	dec00204 	addi	sp,sp,8
 200eb74:	f800283a 	ret

0200eb78 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 200eb78:	defffd04 	addi	sp,sp,-12
 200eb7c:	dfc00215 	stw	ra,8(sp)
 200eb80:	df000115 	stw	fp,4(sp)
 200eb84:	df000104 	addi	fp,sp,4
 200eb88:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 200eb8c:	e0bfff17 	ldw	r2,-4(fp)
 200eb90:	1005003a 	cmpeq	r2,r2,zero
 200eb94:	1000081e 	bne	r2,zero,200ebb8 <alt_flash_close_dev+0x40>
 200eb98:	e0bfff17 	ldw	r2,-4(fp)
 200eb9c:	10800417 	ldw	r2,16(r2)
 200eba0:	1005003a 	cmpeq	r2,r2,zero
 200eba4:	1000041e 	bne	r2,zero,200ebb8 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 200eba8:	e0bfff17 	ldw	r2,-4(fp)
 200ebac:	10800417 	ldw	r2,16(r2)
 200ebb0:	e13fff17 	ldw	r4,-4(fp)
 200ebb4:	103ee83a 	callr	r2
  }
  return;
}
 200ebb8:	e037883a 	mov	sp,fp
 200ebbc:	dfc00117 	ldw	ra,4(sp)
 200ebc0:	df000017 	ldw	fp,0(sp)
 200ebc4:	dec00204 	addi	sp,sp,8
 200ebc8:	f800283a 	ret

0200ebcc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 200ebcc:	defffe04 	addi	sp,sp,-8
 200ebd0:	dfc00115 	stw	ra,4(sp)
 200ebd4:	df000015 	stw	fp,0(sp)
 200ebd8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 200ebdc:	0009883a 	mov	r4,zero
 200ebe0:	01480004 	movi	r5,8192
 200ebe4:	200fe580 	call	200fe58 <alt_icache_flush>
#endif
}
 200ebe8:	e037883a 	mov	sp,fp
 200ebec:	dfc00117 	ldw	ra,4(sp)
 200ebf0:	df000017 	ldw	fp,0(sp)
 200ebf4:	dec00204 	addi	sp,sp,8
 200ebf8:	f800283a 	ret

0200ebfc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200ebfc:	defff904 	addi	sp,sp,-28
 200ec00:	dfc00615 	stw	ra,24(sp)
 200ec04:	df000515 	stw	fp,20(sp)
 200ec08:	df000504 	addi	fp,sp,20
 200ec0c:	e13ffc15 	stw	r4,-16(fp)
 200ec10:	e17ffd15 	stw	r5,-12(fp)
 200ec14:	e1bffe15 	stw	r6,-8(fp)
 200ec18:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 200ec1c:	e0800217 	ldw	r2,8(fp)
 200ec20:	d8800015 	stw	r2,0(sp)
 200ec24:	e13ffc17 	ldw	r4,-16(fp)
 200ec28:	e17ffd17 	ldw	r5,-12(fp)
 200ec2c:	e1bffe17 	ldw	r6,-8(fp)
 200ec30:	e1ffff17 	ldw	r7,-4(fp)
 200ec34:	200edd00 	call	200edd0 <alt_iic_isr_register>
}  
 200ec38:	e037883a 	mov	sp,fp
 200ec3c:	dfc00117 	ldw	ra,4(sp)
 200ec40:	df000017 	ldw	fp,0(sp)
 200ec44:	dec00204 	addi	sp,sp,8
 200ec48:	f800283a 	ret

0200ec4c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 200ec4c:	defff904 	addi	sp,sp,-28
 200ec50:	df000615 	stw	fp,24(sp)
 200ec54:	df000604 	addi	fp,sp,24
 200ec58:	e13ffe15 	stw	r4,-8(fp)
 200ec5c:	e17fff15 	stw	r5,-4(fp)
 200ec60:	e0bfff17 	ldw	r2,-4(fp)
 200ec64:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ec68:	0005303a 	rdctl	r2,status
 200ec6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ec70:	e0fffb17 	ldw	r3,-20(fp)
 200ec74:	00bfff84 	movi	r2,-2
 200ec78:	1884703a 	and	r2,r3,r2
 200ec7c:	1001703a 	wrctl	status,r2
  
  return context;
 200ec80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200ec84:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 200ec88:	e0fffc17 	ldw	r3,-16(fp)
 200ec8c:	00800044 	movi	r2,1
 200ec90:	10c4983a 	sll	r2,r2,r3
 200ec94:	1007883a 	mov	r3,r2
 200ec98:	00808074 	movhi	r2,513
 200ec9c:	108fde04 	addi	r2,r2,16248
 200eca0:	10800017 	ldw	r2,0(r2)
 200eca4:	1886b03a 	or	r3,r3,r2
 200eca8:	00808074 	movhi	r2,513
 200ecac:	108fde04 	addi	r2,r2,16248
 200ecb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200ecb4:	00808074 	movhi	r2,513
 200ecb8:	108fde04 	addi	r2,r2,16248
 200ecbc:	10800017 	ldw	r2,0(r2)
 200ecc0:	100170fa 	wrctl	ienable,r2
 200ecc4:	e0bffd17 	ldw	r2,-12(fp)
 200ecc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200eccc:	e0bffa17 	ldw	r2,-24(fp)
 200ecd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200ecd4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 200ecd8:	e037883a 	mov	sp,fp
 200ecdc:	df000017 	ldw	fp,0(sp)
 200ece0:	dec00104 	addi	sp,sp,4
 200ece4:	f800283a 	ret

0200ece8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 200ece8:	defff904 	addi	sp,sp,-28
 200ecec:	df000615 	stw	fp,24(sp)
 200ecf0:	df000604 	addi	fp,sp,24
 200ecf4:	e13ffe15 	stw	r4,-8(fp)
 200ecf8:	e17fff15 	stw	r5,-4(fp)
 200ecfc:	e0bfff17 	ldw	r2,-4(fp)
 200ed00:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ed04:	0005303a 	rdctl	r2,status
 200ed08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ed0c:	e0fffb17 	ldw	r3,-20(fp)
 200ed10:	00bfff84 	movi	r2,-2
 200ed14:	1884703a 	and	r2,r3,r2
 200ed18:	1001703a 	wrctl	status,r2
  
  return context;
 200ed1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200ed20:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 200ed24:	e0fffc17 	ldw	r3,-16(fp)
 200ed28:	00800044 	movi	r2,1
 200ed2c:	10c4983a 	sll	r2,r2,r3
 200ed30:	0084303a 	nor	r2,zero,r2
 200ed34:	1007883a 	mov	r3,r2
 200ed38:	00808074 	movhi	r2,513
 200ed3c:	108fde04 	addi	r2,r2,16248
 200ed40:	10800017 	ldw	r2,0(r2)
 200ed44:	1886703a 	and	r3,r3,r2
 200ed48:	00808074 	movhi	r2,513
 200ed4c:	108fde04 	addi	r2,r2,16248
 200ed50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200ed54:	00808074 	movhi	r2,513
 200ed58:	108fde04 	addi	r2,r2,16248
 200ed5c:	10800017 	ldw	r2,0(r2)
 200ed60:	100170fa 	wrctl	ienable,r2
 200ed64:	e0bffd17 	ldw	r2,-12(fp)
 200ed68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ed6c:	e0bffa17 	ldw	r2,-24(fp)
 200ed70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200ed74:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 200ed78:	e037883a 	mov	sp,fp
 200ed7c:	df000017 	ldw	fp,0(sp)
 200ed80:	dec00104 	addi	sp,sp,4
 200ed84:	f800283a 	ret

0200ed88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 200ed88:	defffc04 	addi	sp,sp,-16
 200ed8c:	df000315 	stw	fp,12(sp)
 200ed90:	df000304 	addi	fp,sp,12
 200ed94:	e13ffe15 	stw	r4,-8(fp)
 200ed98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 200ed9c:	000530fa 	rdctl	r2,ienable
 200eda0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 200eda4:	e0ffff17 	ldw	r3,-4(fp)
 200eda8:	00800044 	movi	r2,1
 200edac:	10c4983a 	sll	r2,r2,r3
 200edb0:	1007883a 	mov	r3,r2
 200edb4:	e0bffd17 	ldw	r2,-12(fp)
 200edb8:	1884703a 	and	r2,r3,r2
 200edbc:	1004c03a 	cmpne	r2,r2,zero
}
 200edc0:	e037883a 	mov	sp,fp
 200edc4:	df000017 	ldw	fp,0(sp)
 200edc8:	dec00104 	addi	sp,sp,4
 200edcc:	f800283a 	ret

0200edd0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200edd0:	defff404 	addi	sp,sp,-48
 200edd4:	dfc00b15 	stw	ra,44(sp)
 200edd8:	df000a15 	stw	fp,40(sp)
 200eddc:	df000a04 	addi	fp,sp,40
 200ede0:	e13ffb15 	stw	r4,-20(fp)
 200ede4:	e17ffc15 	stw	r5,-16(fp)
 200ede8:	e1bffd15 	stw	r6,-12(fp)
 200edec:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 200edf0:	00bffa84 	movi	r2,-22
 200edf4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 200edf8:	e0bffc17 	ldw	r2,-16(fp)
 200edfc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200ee00:	e0bff917 	ldw	r2,-28(fp)
 200ee04:	10800808 	cmpgei	r2,r2,32
 200ee08:	1000291e 	bne	r2,zero,200eeb0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ee0c:	0005303a 	rdctl	r2,status
 200ee10:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ee14:	e0fff717 	ldw	r3,-36(fp)
 200ee18:	00bfff84 	movi	r2,-2
 200ee1c:	1884703a 	and	r2,r3,r2
 200ee20:	1001703a 	wrctl	status,r2
  
  return context;
 200ee24:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 200ee28:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 200ee2c:	e0bff917 	ldw	r2,-28(fp)
 200ee30:	00c080b4 	movhi	r3,514
 200ee34:	18e47804 	addi	r3,r3,-28192
 200ee38:	100490fa 	slli	r2,r2,3
 200ee3c:	10c7883a 	add	r3,r2,r3
 200ee40:	e0bffd17 	ldw	r2,-12(fp)
 200ee44:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 200ee48:	e0bff917 	ldw	r2,-28(fp)
 200ee4c:	00c080b4 	movhi	r3,514
 200ee50:	18e47804 	addi	r3,r3,-28192
 200ee54:	100490fa 	slli	r2,r2,3
 200ee58:	10c5883a 	add	r2,r2,r3
 200ee5c:	10c00104 	addi	r3,r2,4
 200ee60:	e0bffe17 	ldw	r2,-8(fp)
 200ee64:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 200ee68:	e0bffd17 	ldw	r2,-12(fp)
 200ee6c:	1005003a 	cmpeq	r2,r2,zero
 200ee70:	1000051e 	bne	r2,zero,200ee88 <alt_iic_isr_register+0xb8>
 200ee74:	e17ff917 	ldw	r5,-28(fp)
 200ee78:	e13ffb17 	ldw	r4,-20(fp)
 200ee7c:	200ec4c0 	call	200ec4c <alt_ic_irq_enable>
 200ee80:	e0bfff15 	stw	r2,-4(fp)
 200ee84:	00000406 	br	200ee98 <alt_iic_isr_register+0xc8>
 200ee88:	e17ff917 	ldw	r5,-28(fp)
 200ee8c:	e13ffb17 	ldw	r4,-20(fp)
 200ee90:	200ece80 	call	200ece8 <alt_ic_irq_disable>
 200ee94:	e0bfff15 	stw	r2,-4(fp)
 200ee98:	e0bfff17 	ldw	r2,-4(fp)
 200ee9c:	e0bffa15 	stw	r2,-24(fp)
 200eea0:	e0bff817 	ldw	r2,-32(fp)
 200eea4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200eea8:	e0bff617 	ldw	r2,-40(fp)
 200eeac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 200eeb0:	e0bffa17 	ldw	r2,-24(fp)
}
 200eeb4:	e037883a 	mov	sp,fp
 200eeb8:	dfc00117 	ldw	ra,4(sp)
 200eebc:	df000017 	ldw	fp,0(sp)
 200eec0:	dec00204 	addi	sp,sp,8
 200eec4:	f800283a 	ret

0200eec8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 200eec8:	defff904 	addi	sp,sp,-28
 200eecc:	dfc00615 	stw	ra,24(sp)
 200eed0:	df000515 	stw	fp,20(sp)
 200eed4:	df000504 	addi	fp,sp,20
 200eed8:	e13ffc15 	stw	r4,-16(fp)
 200eedc:	e17ffd15 	stw	r5,-12(fp)
 200eee0:	e1bffe15 	stw	r6,-8(fp)
 200eee4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 200eee8:	e13ffd17 	ldw	r4,-12(fp)
 200eeec:	e17ffe17 	ldw	r5,-8(fp)
 200eef0:	e1bfff17 	ldw	r6,-4(fp)
 200eef4:	200f0e00 	call	200f0e0 <open>
 200eef8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 200eefc:	e0bffb17 	ldw	r2,-20(fp)
 200ef00:	1004803a 	cmplt	r2,r2,zero
 200ef04:	10001c1e 	bne	r2,zero,200ef78 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 200ef08:	e0bffb17 	ldw	r2,-20(fp)
 200ef0c:	00c08074 	movhi	r3,513
 200ef10:	18c3dc04 	addi	r3,r3,3952
 200ef14:	10800324 	muli	r2,r2,12
 200ef18:	10c5883a 	add	r2,r2,r3
 200ef1c:	10c00017 	ldw	r3,0(r2)
 200ef20:	e0bffc17 	ldw	r2,-16(fp)
 200ef24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 200ef28:	e0bffb17 	ldw	r2,-20(fp)
 200ef2c:	00c08074 	movhi	r3,513
 200ef30:	18c3dc04 	addi	r3,r3,3952
 200ef34:	10800324 	muli	r2,r2,12
 200ef38:	10c5883a 	add	r2,r2,r3
 200ef3c:	10800104 	addi	r2,r2,4
 200ef40:	10c00017 	ldw	r3,0(r2)
 200ef44:	e0bffc17 	ldw	r2,-16(fp)
 200ef48:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200ef4c:	e0bffb17 	ldw	r2,-20(fp)
 200ef50:	00c08074 	movhi	r3,513
 200ef54:	18c3dc04 	addi	r3,r3,3952
 200ef58:	10800324 	muli	r2,r2,12
 200ef5c:	10c5883a 	add	r2,r2,r3
 200ef60:	10800204 	addi	r2,r2,8
 200ef64:	10c00017 	ldw	r3,0(r2)
 200ef68:	e0bffc17 	ldw	r2,-16(fp)
 200ef6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 200ef70:	e13ffb17 	ldw	r4,-20(fp)
 200ef74:	2003f4c0 	call	2003f4c <alt_release_fd>
  }
} 
 200ef78:	e037883a 	mov	sp,fp
 200ef7c:	dfc00117 	ldw	ra,4(sp)
 200ef80:	df000017 	ldw	fp,0(sp)
 200ef84:	dec00204 	addi	sp,sp,8
 200ef88:	f800283a 	ret

0200ef8c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 200ef8c:	defffb04 	addi	sp,sp,-20
 200ef90:	dfc00415 	stw	ra,16(sp)
 200ef94:	df000315 	stw	fp,12(sp)
 200ef98:	df000304 	addi	fp,sp,12
 200ef9c:	e13ffd15 	stw	r4,-12(fp)
 200efa0:	e17ffe15 	stw	r5,-8(fp)
 200efa4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 200efa8:	01008074 	movhi	r4,513
 200efac:	2103df04 	addi	r4,r4,3964
 200efb0:	e17ffd17 	ldw	r5,-12(fp)
 200efb4:	01800044 	movi	r6,1
 200efb8:	01c07fc4 	movi	r7,511
 200efbc:	200eec80 	call	200eec8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 200efc0:	01008074 	movhi	r4,513
 200efc4:	2103dc04 	addi	r4,r4,3952
 200efc8:	e17ffe17 	ldw	r5,-8(fp)
 200efcc:	000d883a 	mov	r6,zero
 200efd0:	01c07fc4 	movi	r7,511
 200efd4:	200eec80 	call	200eec8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 200efd8:	01008074 	movhi	r4,513
 200efdc:	2103e204 	addi	r4,r4,3976
 200efe0:	e17fff17 	ldw	r5,-4(fp)
 200efe4:	01800044 	movi	r6,1
 200efe8:	01c07fc4 	movi	r7,511
 200efec:	200eec80 	call	200eec8 <alt_open_fd>
}  
 200eff0:	e037883a 	mov	sp,fp
 200eff4:	dfc00117 	ldw	ra,4(sp)
 200eff8:	df000017 	ldw	fp,0(sp)
 200effc:	dec00204 	addi	sp,sp,8
 200f000:	f800283a 	ret

0200f004 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 200f004:	defffc04 	addi	sp,sp,-16
 200f008:	df000315 	stw	fp,12(sp)
 200f00c:	df000304 	addi	fp,sp,12
 200f010:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 200f014:	e0bffe17 	ldw	r2,-8(fp)
 200f018:	10800217 	ldw	r2,8(r2)
 200f01c:	10d00034 	orhi	r3,r2,16384
 200f020:	e0bffe17 	ldw	r2,-8(fp)
 200f024:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200f028:	e03ffd15 	stw	zero,-12(fp)
 200f02c:	00002006 	br	200f0b0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200f030:	e0bffd17 	ldw	r2,-12(fp)
 200f034:	00c08074 	movhi	r3,513
 200f038:	18c3dc04 	addi	r3,r3,3952
 200f03c:	10800324 	muli	r2,r2,12
 200f040:	10c5883a 	add	r2,r2,r3
 200f044:	10c00017 	ldw	r3,0(r2)
 200f048:	e0bffe17 	ldw	r2,-8(fp)
 200f04c:	10800017 	ldw	r2,0(r2)
 200f050:	1880141e 	bne	r3,r2,200f0a4 <alt_file_locked+0xa0>
 200f054:	e0bffd17 	ldw	r2,-12(fp)
 200f058:	00c08074 	movhi	r3,513
 200f05c:	18c3dc04 	addi	r3,r3,3952
 200f060:	10800324 	muli	r2,r2,12
 200f064:	10c5883a 	add	r2,r2,r3
 200f068:	10800204 	addi	r2,r2,8
 200f06c:	10800017 	ldw	r2,0(r2)
 200f070:	1004403a 	cmpge	r2,r2,zero
 200f074:	10000b1e 	bne	r2,zero,200f0a4 <alt_file_locked+0xa0>
 200f078:	e0bffd17 	ldw	r2,-12(fp)
 200f07c:	10800324 	muli	r2,r2,12
 200f080:	1007883a 	mov	r3,r2
 200f084:	00808074 	movhi	r2,513
 200f088:	1083dc04 	addi	r2,r2,3952
 200f08c:	1887883a 	add	r3,r3,r2
 200f090:	e0bffe17 	ldw	r2,-8(fp)
 200f094:	18800326 	beq	r3,r2,200f0a4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 200f098:	00bffcc4 	movi	r2,-13
 200f09c:	e0bfff15 	stw	r2,-4(fp)
 200f0a0:	00000a06 	br	200f0cc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200f0a4:	e0bffd17 	ldw	r2,-12(fp)
 200f0a8:	10800044 	addi	r2,r2,1
 200f0ac:	e0bffd15 	stw	r2,-12(fp)
 200f0b0:	00808074 	movhi	r2,513
 200f0b4:	1088a004 	addi	r2,r2,8832
 200f0b8:	10800017 	ldw	r2,0(r2)
 200f0bc:	1007883a 	mov	r3,r2
 200f0c0:	e0bffd17 	ldw	r2,-12(fp)
 200f0c4:	18bfda2e 	bgeu	r3,r2,200f030 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 200f0c8:	e03fff15 	stw	zero,-4(fp)
 200f0cc:	e0bfff17 	ldw	r2,-4(fp)
}
 200f0d0:	e037883a 	mov	sp,fp
 200f0d4:	df000017 	ldw	fp,0(sp)
 200f0d8:	dec00104 	addi	sp,sp,4
 200f0dc:	f800283a 	ret

0200f0e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 200f0e0:	defff404 	addi	sp,sp,-48
 200f0e4:	dfc00b15 	stw	ra,44(sp)
 200f0e8:	df000a15 	stw	fp,40(sp)
 200f0ec:	df000a04 	addi	fp,sp,40
 200f0f0:	e13ffb15 	stw	r4,-20(fp)
 200f0f4:	e17ffc15 	stw	r5,-16(fp)
 200f0f8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 200f0fc:	00bfffc4 	movi	r2,-1
 200f100:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 200f104:	00bffb44 	movi	r2,-19
 200f108:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 200f10c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 200f110:	e13ffb17 	ldw	r4,-20(fp)
 200f114:	01408074 	movhi	r5,513
 200f118:	29489e04 	addi	r5,r5,8824
 200f11c:	200fbb00 	call	200fbb0 <alt_find_dev>
 200f120:	e0bffa15 	stw	r2,-24(fp)
 200f124:	e0bffa17 	ldw	r2,-24(fp)
 200f128:	1004c03a 	cmpne	r2,r2,zero
 200f12c:	1000051e 	bne	r2,zero,200f144 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 200f130:	e13ffb17 	ldw	r4,-20(fp)
 200f134:	200fc440 	call	200fc44 <alt_find_file>
 200f138:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 200f13c:	00800044 	movi	r2,1
 200f140:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 200f144:	e0bffa17 	ldw	r2,-24(fp)
 200f148:	1005003a 	cmpeq	r2,r2,zero
 200f14c:	1000301e 	bne	r2,zero,200f210 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 200f150:	e13ffa17 	ldw	r4,-24(fp)
 200f154:	200fd640 	call	200fd64 <alt_get_fd>
 200f158:	e0bff815 	stw	r2,-32(fp)
 200f15c:	e0bff817 	ldw	r2,-32(fp)
 200f160:	1004403a 	cmpge	r2,r2,zero
 200f164:	1000031e 	bne	r2,zero,200f174 <open+0x94>
    {
      status = index;
 200f168:	e0bff817 	ldw	r2,-32(fp)
 200f16c:	e0bff715 	stw	r2,-36(fp)
 200f170:	00002906 	br	200f218 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 200f174:	e0bff817 	ldw	r2,-32(fp)
 200f178:	10800324 	muli	r2,r2,12
 200f17c:	1007883a 	mov	r3,r2
 200f180:	00808074 	movhi	r2,513
 200f184:	1083dc04 	addi	r2,r2,3952
 200f188:	1885883a 	add	r2,r3,r2
 200f18c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 200f190:	e0fffc17 	ldw	r3,-16(fp)
 200f194:	00900034 	movhi	r2,16384
 200f198:	10bfffc4 	addi	r2,r2,-1
 200f19c:	1886703a 	and	r3,r3,r2
 200f1a0:	e0bff917 	ldw	r2,-28(fp)
 200f1a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 200f1a8:	e0bff617 	ldw	r2,-40(fp)
 200f1ac:	1004c03a 	cmpne	r2,r2,zero
 200f1b0:	1000061e 	bne	r2,zero,200f1cc <open+0xec>
 200f1b4:	e13ff917 	ldw	r4,-28(fp)
 200f1b8:	200f0040 	call	200f004 <alt_file_locked>
 200f1bc:	e0bff715 	stw	r2,-36(fp)
 200f1c0:	e0bff717 	ldw	r2,-36(fp)
 200f1c4:	1004803a 	cmplt	r2,r2,zero
 200f1c8:	1000131e 	bne	r2,zero,200f218 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200f1cc:	e0bffa17 	ldw	r2,-24(fp)
 200f1d0:	10800317 	ldw	r2,12(r2)
 200f1d4:	1005003a 	cmpeq	r2,r2,zero
 200f1d8:	1000091e 	bne	r2,zero,200f200 <open+0x120>
 200f1dc:	e0bffa17 	ldw	r2,-24(fp)
 200f1e0:	10800317 	ldw	r2,12(r2)
 200f1e4:	e13ff917 	ldw	r4,-28(fp)
 200f1e8:	e17ffb17 	ldw	r5,-20(fp)
 200f1ec:	e1bffc17 	ldw	r6,-16(fp)
 200f1f0:	e1fffd17 	ldw	r7,-12(fp)
 200f1f4:	103ee83a 	callr	r2
 200f1f8:	e0bfff15 	stw	r2,-4(fp)
 200f1fc:	00000106 	br	200f204 <open+0x124>
 200f200:	e03fff15 	stw	zero,-4(fp)
 200f204:	e0bfff17 	ldw	r2,-4(fp)
 200f208:	e0bff715 	stw	r2,-36(fp)
 200f20c:	00000206 	br	200f218 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 200f210:	00bffb44 	movi	r2,-19
 200f214:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 200f218:	e0bff717 	ldw	r2,-36(fp)
 200f21c:	1004403a 	cmpge	r2,r2,zero
 200f220:	1000091e 	bne	r2,zero,200f248 <open+0x168>
  {
    alt_release_fd (index);  
 200f224:	e13ff817 	ldw	r4,-32(fp)
 200f228:	2003f4c0 	call	2003f4c <alt_release_fd>
    ALT_ERRNO = -status;
 200f22c:	200f2680 	call	200f268 <alt_get_errno>
 200f230:	e0fff717 	ldw	r3,-36(fp)
 200f234:	00c7c83a 	sub	r3,zero,r3
 200f238:	10c00015 	stw	r3,0(r2)
    return -1;
 200f23c:	00bfffc4 	movi	r2,-1
 200f240:	e0bffe15 	stw	r2,-8(fp)
 200f244:	00000206 	br	200f250 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 200f248:	e0bff817 	ldw	r2,-32(fp)
 200f24c:	e0bffe15 	stw	r2,-8(fp)
 200f250:	e0bffe17 	ldw	r2,-8(fp)
}
 200f254:	e037883a 	mov	sp,fp
 200f258:	dfc00117 	ldw	ra,4(sp)
 200f25c:	df000017 	ldw	fp,0(sp)
 200f260:	dec00204 	addi	sp,sp,8
 200f264:	f800283a 	ret

0200f268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f268:	defffd04 	addi	sp,sp,-12
 200f26c:	dfc00215 	stw	ra,8(sp)
 200f270:	df000115 	stw	fp,4(sp)
 200f274:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200f278:	00808074 	movhi	r2,513
 200f27c:	1088a104 	addi	r2,r2,8836
 200f280:	10800017 	ldw	r2,0(r2)
 200f284:	1005003a 	cmpeq	r2,r2,zero
 200f288:	1000061e 	bne	r2,zero,200f2a4 <alt_get_errno+0x3c>
 200f28c:	00808074 	movhi	r2,513
 200f290:	1088a104 	addi	r2,r2,8836
 200f294:	10800017 	ldw	r2,0(r2)
 200f298:	103ee83a 	callr	r2
 200f29c:	e0bfff15 	stw	r2,-4(fp)
 200f2a0:	00000306 	br	200f2b0 <alt_get_errno+0x48>
 200f2a4:	00808074 	movhi	r2,513
 200f2a8:	108fc104 	addi	r2,r2,16132
 200f2ac:	e0bfff15 	stw	r2,-4(fp)
 200f2b0:	e0bfff17 	ldw	r2,-4(fp)
}
 200f2b4:	e037883a 	mov	sp,fp
 200f2b8:	dfc00117 	ldw	ra,4(sp)
 200f2bc:	df000017 	ldw	fp,0(sp)
 200f2c0:	dec00204 	addi	sp,sp,8
 200f2c4:	f800283a 	ret

0200f2c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200f2c8:	defffa04 	addi	sp,sp,-24
 200f2cc:	df000515 	stw	fp,20(sp)
 200f2d0:	df000504 	addi	fp,sp,20
 200f2d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f2d8:	0005303a 	rdctl	r2,status
 200f2dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f2e0:	e0fffd17 	ldw	r3,-12(fp)
 200f2e4:	00bfff84 	movi	r2,-2
 200f2e8:	1884703a 	and	r2,r3,r2
 200f2ec:	1001703a 	wrctl	status,r2
  
  return context;
 200f2f0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 200f2f4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 200f2f8:	e0bfff17 	ldw	r2,-4(fp)
 200f2fc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200f300:	e0bffc17 	ldw	r2,-16(fp)
 200f304:	10c00017 	ldw	r3,0(r2)
 200f308:	e0bffc17 	ldw	r2,-16(fp)
 200f30c:	10800117 	ldw	r2,4(r2)
 200f310:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 200f314:	e0bffc17 	ldw	r2,-16(fp)
 200f318:	10c00117 	ldw	r3,4(r2)
 200f31c:	e0bffc17 	ldw	r2,-16(fp)
 200f320:	10800017 	ldw	r2,0(r2)
 200f324:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 200f328:	e0fffc17 	ldw	r3,-16(fp)
 200f32c:	e0bffc17 	ldw	r2,-16(fp)
 200f330:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 200f334:	e0fffc17 	ldw	r3,-16(fp)
 200f338:	e0bffc17 	ldw	r2,-16(fp)
 200f33c:	18800015 	stw	r2,0(r3)
 200f340:	e0bffe17 	ldw	r2,-8(fp)
 200f344:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f348:	e0bffb17 	ldw	r2,-20(fp)
 200f34c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 200f350:	e037883a 	mov	sp,fp
 200f354:	df000017 	ldw	fp,0(sp)
 200f358:	dec00104 	addi	sp,sp,4
 200f35c:	f800283a 	ret

0200f360 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 200f360:	defffb04 	addi	sp,sp,-20
 200f364:	dfc00415 	stw	ra,16(sp)
 200f368:	df000315 	stw	fp,12(sp)
 200f36c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 200f370:	d0a03117 	ldw	r2,-32572(gp)
 200f374:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 200f378:	d0a74c17 	ldw	r2,-25296(gp)
 200f37c:	10800044 	addi	r2,r2,1
 200f380:	d0a74c15 	stw	r2,-25296(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200f384:	00003106 	br	200f44c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 200f388:	e0bffe17 	ldw	r2,-8(fp)
 200f38c:	10800017 	ldw	r2,0(r2)
 200f390:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 200f394:	e0bffe17 	ldw	r2,-8(fp)
 200f398:	10800403 	ldbu	r2,16(r2)
 200f39c:	10803fcc 	andi	r2,r2,255
 200f3a0:	1005003a 	cmpeq	r2,r2,zero
 200f3a4:	1000051e 	bne	r2,zero,200f3bc <alt_tick+0x5c>
 200f3a8:	d0a74c17 	ldw	r2,-25296(gp)
 200f3ac:	1004c03a 	cmpne	r2,r2,zero
 200f3b0:	1000021e 	bne	r2,zero,200f3bc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 200f3b4:	e0bffe17 	ldw	r2,-8(fp)
 200f3b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 200f3bc:	e0bffe17 	ldw	r2,-8(fp)
 200f3c0:	10c00217 	ldw	r3,8(r2)
 200f3c4:	d0a74c17 	ldw	r2,-25296(gp)
 200f3c8:	10c01e36 	bltu	r2,r3,200f444 <alt_tick+0xe4>
 200f3cc:	e0bffe17 	ldw	r2,-8(fp)
 200f3d0:	10800403 	ldbu	r2,16(r2)
 200f3d4:	10803fcc 	andi	r2,r2,255
 200f3d8:	1004c03a 	cmpne	r2,r2,zero
 200f3dc:	1000191e 	bne	r2,zero,200f444 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 200f3e0:	e0bffe17 	ldw	r2,-8(fp)
 200f3e4:	10c00317 	ldw	r3,12(r2)
 200f3e8:	e0bffe17 	ldw	r2,-8(fp)
 200f3ec:	11000517 	ldw	r4,20(r2)
 200f3f0:	183ee83a 	callr	r3
 200f3f4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 200f3f8:	e0bffd17 	ldw	r2,-12(fp)
 200f3fc:	1004c03a 	cmpne	r2,r2,zero
 200f400:	1000031e 	bne	r2,zero,200f410 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 200f404:	e13ffe17 	ldw	r4,-8(fp)
 200f408:	200f2c80 	call	200f2c8 <alt_alarm_stop>
 200f40c:	00000d06 	br	200f444 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 200f410:	e0bffe17 	ldw	r2,-8(fp)
 200f414:	10c00217 	ldw	r3,8(r2)
 200f418:	e0bffd17 	ldw	r2,-12(fp)
 200f41c:	1887883a 	add	r3,r3,r2
 200f420:	e0bffe17 	ldw	r2,-8(fp)
 200f424:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 200f428:	e0bffe17 	ldw	r2,-8(fp)
 200f42c:	10c00217 	ldw	r3,8(r2)
 200f430:	d0a74c17 	ldw	r2,-25296(gp)
 200f434:	1880032e 	bgeu	r3,r2,200f444 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 200f438:	e0fffe17 	ldw	r3,-8(fp)
 200f43c:	00800044 	movi	r2,1
 200f440:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 200f444:	e0bfff17 	ldw	r2,-4(fp)
 200f448:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200f44c:	d0e03104 	addi	r3,gp,-32572
 200f450:	e0bffe17 	ldw	r2,-8(fp)
 200f454:	10ffcc1e 	bne	r2,r3,200f388 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 200f458:	200524c0 	call	200524c <OSTimeTick>
}
 200f45c:	e037883a 	mov	sp,fp
 200f460:	dfc00117 	ldw	ra,4(sp)
 200f464:	df000017 	ldw	fp,0(sp)
 200f468:	dec00204 	addi	sp,sp,8
 200f46c:	f800283a 	ret

0200f470 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 200f470:	deffff04 	addi	sp,sp,-4
 200f474:	df000015 	stw	fp,0(sp)
 200f478:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 200f47c:	000170fa 	wrctl	ienable,zero
}
 200f480:	e037883a 	mov	sp,fp
 200f484:	df000017 	ldw	fp,0(sp)
 200f488:	dec00104 	addi	sp,sp,4
 200f48c:	f800283a 	ret

0200f490 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 200f490:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 200f494:	d0e00617 	ldw	r3,-32744(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 200f498:	d1274517 	ldw	r4,-25324(gp)

      stw ra,  0(sp)
 200f49c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 200f4a0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 200f4a4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 200f4a8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 200f4ac:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 200f4b0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 200f4b4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 200f4b8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 200f4bc:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 200f4c0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 200f4c4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 200f4c8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 200f4cc:	200f8b00 	call	200f8b0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 200f4d0:	d1274017 	ldw	r4,-25344(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 200f4d4:	d1673807 	ldb	r5,-25376(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 200f4d8:	d1274515 	stw	r4,-25324(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 200f4dc:	d1673845 	stb	r5,-25375(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 200f4e0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 200f4e4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 200f4e8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 200f4ec:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 200f4f0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 200f4f4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 200f4f8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 200f4fc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 200f500:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 200f504:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 200f508:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 200f50c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 200f510:	d0e00615 	stw	r3,-32744(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 200f514:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 200f518:	f800283a 	ret

0200f51c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 200f51c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 200f520:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 200f524:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 200f528:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 200f52c:	200f8b00 	call	200f8b0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 200f530:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 200f534:	d4a73645 	stb	r18,-25383(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 200f538:	003fe506 	br	200f4d0 <OSCtxSw+0x40>

0200f53c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 200f53c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 200f540:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 200f544:	10800054 	ori	r2,r2,1
      wrctl status, r2
 200f548:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 200f54c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 200f550:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 200f554:	dec00204 	addi	sp,sp,8

      callr r2
 200f558:	103ee83a 	callr	r2

      nop
 200f55c:	0001883a 	nop

0200f560 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 200f560:	defff704 	addi	sp,sp,-36
 200f564:	dfc00815 	stw	ra,32(sp)
 200f568:	df000715 	stw	fp,28(sp)
 200f56c:	df000704 	addi	fp,sp,28
 200f570:	e13ffc15 	stw	r4,-16(fp)
 200f574:	e17ffd15 	stw	r5,-12(fp)
 200f578:	e1bffe15 	stw	r6,-8(fp)
 200f57c:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 200f580:	e0bffe17 	ldw	r2,-8(fp)
 200f584:	1007883a 	mov	r3,r2
 200f588:	00bfff04 	movi	r2,-4
 200f58c:	1884703a 	and	r2,r3,r2
 200f590:	10bf0004 	addi	r2,r2,-1024
 200f594:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 200f598:	e0bff917 	ldw	r2,-28(fp)
 200f59c:	10000015 	stw	zero,0(r2)
 200f5a0:	e0bff917 	ldw	r2,-28(fp)
 200f5a4:	10c0bb04 	addi	r3,r2,748
 200f5a8:	e0bff917 	ldw	r2,-28(fp)
 200f5ac:	10c00115 	stw	r3,4(r2)
 200f5b0:	e0bff917 	ldw	r2,-28(fp)
 200f5b4:	1080bb04 	addi	r2,r2,748
 200f5b8:	10c01704 	addi	r3,r2,92
 200f5bc:	e0bff917 	ldw	r2,-28(fp)
 200f5c0:	10c00215 	stw	r3,8(r2)
 200f5c4:	e0bff917 	ldw	r2,-28(fp)
 200f5c8:	1080bb04 	addi	r2,r2,748
 200f5cc:	10c02e04 	addi	r3,r2,184
 200f5d0:	e0bff917 	ldw	r2,-28(fp)
 200f5d4:	10c00315 	stw	r3,12(r2)
 200f5d8:	e0bff917 	ldw	r2,-28(fp)
 200f5dc:	10000415 	stw	zero,16(r2)
 200f5e0:	e0bff917 	ldw	r2,-28(fp)
 200f5e4:	10800504 	addi	r2,r2,20
 200f5e8:	1009883a 	mov	r4,r2
 200f5ec:	01800644 	movi	r6,25
 200f5f0:	000b883a 	mov	r5,zero
 200f5f4:	20031280 	call	2003128 <memset>
 200f5f8:	e0bff917 	ldw	r2,-28(fp)
 200f5fc:	10000c15 	stw	zero,48(r2)
 200f600:	e0fff917 	ldw	r3,-28(fp)
 200f604:	00808074 	movhi	r2,513
 200f608:	1081cf04 	addi	r2,r2,1852
 200f60c:	18800d15 	stw	r2,52(r3)
 200f610:	e0bff917 	ldw	r2,-28(fp)
 200f614:	10000e15 	stw	zero,56(r2)
 200f618:	e0bff917 	ldw	r2,-28(fp)
 200f61c:	10000f15 	stw	zero,60(r2)
 200f620:	e0bff917 	ldw	r2,-28(fp)
 200f624:	10001015 	stw	zero,64(r2)
 200f628:	e0bff917 	ldw	r2,-28(fp)
 200f62c:	10001115 	stw	zero,68(r2)
 200f630:	e0bff917 	ldw	r2,-28(fp)
 200f634:	10001215 	stw	zero,72(r2)
 200f638:	e0bff917 	ldw	r2,-28(fp)
 200f63c:	10001315 	stw	zero,76(r2)
 200f640:	e0bff917 	ldw	r2,-28(fp)
 200f644:	10001415 	stw	zero,80(r2)
 200f648:	e0bff917 	ldw	r2,-28(fp)
 200f64c:	10001515 	stw	zero,84(r2)
 200f650:	e0bff917 	ldw	r2,-28(fp)
 200f654:	10001615 	stw	zero,88(r2)
 200f658:	e0bff917 	ldw	r2,-28(fp)
 200f65c:	10001715 	stw	zero,92(r2)
 200f660:	e0bff917 	ldw	r2,-28(fp)
 200f664:	10001805 	stb	zero,96(r2)
 200f668:	e0bff917 	ldw	r2,-28(fp)
 200f66c:	10801f04 	addi	r2,r2,124
 200f670:	10000015 	stw	zero,0(r2)
 200f674:	10000115 	stw	zero,4(r2)
 200f678:	10000215 	stw	zero,8(r2)
 200f67c:	10000315 	stw	zero,12(r2)
 200f680:	10000415 	stw	zero,16(r2)
 200f684:	10000515 	stw	zero,20(r2)
 200f688:	10000615 	stw	zero,24(r2)
 200f68c:	10000715 	stw	zero,28(r2)
 200f690:	10000815 	stw	zero,32(r2)
 200f694:	e0bff917 	ldw	r2,-28(fp)
 200f698:	10002815 	stw	zero,160(r2)
 200f69c:	e0fff917 	ldw	r3,-28(fp)
 200f6a0:	00800044 	movi	r2,1
 200f6a4:	18802915 	stw	r2,164(r3)
 200f6a8:	18002a15 	stw	zero,168(r3)
 200f6ac:	e0fff917 	ldw	r3,-28(fp)
 200f6b0:	008cc384 	movi	r2,13070
 200f6b4:	18802b0d 	sth	r2,172(r3)
 200f6b8:	e0fff917 	ldw	r3,-28(fp)
 200f6bc:	00aaf344 	movi	r2,-21555
 200f6c0:	18802b8d 	sth	r2,174(r3)
 200f6c4:	e0fff917 	ldw	r3,-28(fp)
 200f6c8:	00848d04 	movi	r2,4660
 200f6cc:	18802c0d 	sth	r2,176(r3)
 200f6d0:	e0fff917 	ldw	r3,-28(fp)
 200f6d4:	00b99b44 	movi	r2,-6547
 200f6d8:	18802c8d 	sth	r2,178(r3)
 200f6dc:	e0fff917 	ldw	r3,-28(fp)
 200f6e0:	00b7bb04 	movi	r2,-8468
 200f6e4:	18802d0d 	sth	r2,180(r3)
 200f6e8:	e0fff917 	ldw	r3,-28(fp)
 200f6ec:	00800144 	movi	r2,5
 200f6f0:	18802d8d 	sth	r2,182(r3)
 200f6f4:	e0fff917 	ldw	r3,-28(fp)
 200f6f8:	008002c4 	movi	r2,11
 200f6fc:	18802e0d 	sth	r2,184(r3)
 200f700:	e0bff917 	ldw	r2,-28(fp)
 200f704:	10002f15 	stw	zero,188(r2)
 200f708:	e0bff917 	ldw	r2,-28(fp)
 200f70c:	10003015 	stw	zero,192(r2)
 200f710:	e0bff917 	ldw	r2,-28(fp)
 200f714:	10003115 	stw	zero,196(r2)
 200f718:	e0bff917 	ldw	r2,-28(fp)
 200f71c:	10003215 	stw	zero,200(r2)
 200f720:	e0bff917 	ldw	r2,-28(fp)
 200f724:	10003315 	stw	zero,204(r2)
 200f728:	e0bff917 	ldw	r2,-28(fp)
 200f72c:	10003415 	stw	zero,208(r2)
 200f730:	e0bff917 	ldw	r2,-28(fp)
 200f734:	10003e15 	stw	zero,248(r2)
 200f738:	e0bff917 	ldw	r2,-28(fp)
 200f73c:	10003f15 	stw	zero,252(r2)
 200f740:	e0bff917 	ldw	r2,-28(fp)
 200f744:	10004015 	stw	zero,256(r2)
 200f748:	e0bff917 	ldw	r2,-28(fp)
 200f74c:	10004115 	stw	zero,260(r2)
 200f750:	e0bff917 	ldw	r2,-28(fp)
 200f754:	10004215 	stw	zero,264(r2)
 200f758:	e0bff917 	ldw	r2,-28(fp)
 200f75c:	10004315 	stw	zero,268(r2)
 200f760:	e0bff917 	ldw	r2,-28(fp)
 200f764:	10004415 	stw	zero,272(r2)
 200f768:	e0bff917 	ldw	r2,-28(fp)
 200f76c:	10004515 	stw	zero,276(r2)
 200f770:	e0bff917 	ldw	r2,-28(fp)
 200f774:	10004615 	stw	zero,280(r2)
 200f778:	e0bff917 	ldw	r2,-28(fp)
 200f77c:	10004715 	stw	zero,284(r2)
 200f780:	e0bff917 	ldw	r2,-28(fp)
 200f784:	10003505 	stb	zero,212(r2)
 200f788:	e0bff917 	ldw	r2,-28(fp)
 200f78c:	10003705 	stb	zero,220(r2)
 200f790:	e0bff917 	ldw	r2,-28(fp)
 200f794:	10003d15 	stw	zero,244(r2)
 200f798:	e0bff917 	ldw	r2,-28(fp)
 200f79c:	10005215 	stw	zero,328(r2)
 200f7a0:	e0bff917 	ldw	r2,-28(fp)
 200f7a4:	10005315 	stw	zero,332(r2)
 200f7a8:	e0bff917 	ldw	r2,-28(fp)
 200f7ac:	10005415 	stw	zero,336(r2)
 200f7b0:	e0bff917 	ldw	r2,-28(fp)
 200f7b4:	10005515 	stw	zero,340(r2)
 200f7b8:	e0bff917 	ldw	r2,-28(fp)
 200f7bc:	1000b515 	stw	zero,724(r2)
 200f7c0:	e0bff917 	ldw	r2,-28(fp)
 200f7c4:	10007515 	stw	zero,468(r2)
 200f7c8:	e0bff917 	ldw	r2,-28(fp)
 200f7cc:	1000b715 	stw	zero,732(r2)
 200f7d0:	e0bff917 	ldw	r2,-28(fp)
 200f7d4:	1000b815 	stw	zero,736(r2)
 200f7d8:	e0bff917 	ldw	r2,-28(fp)
 200f7dc:	1000b915 	stw	zero,740(r2)
 200f7e0:	e0bff917 	ldw	r2,-28(fp)
 200f7e4:	1000ba15 	stw	zero,744(r2)
 200f7e8:	e0bff917 	ldw	r2,-28(fp)
 200f7ec:	1080bb04 	addi	r2,r2,748
 200f7f0:	1009883a 	mov	r4,r2
 200f7f4:	01804504 	movi	r6,276
 200f7f8:	000b883a 	mov	r5,zero
 200f7fc:	20031280 	call	2003128 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 200f800:	e0bff917 	ldw	r2,-28(fp)
 200f804:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 200f808:	e0bffb17 	ldw	r2,-20(fp)
 200f80c:	10bff304 	addi	r2,r2,-52
 200f810:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 200f814:	e0bffa17 	ldw	r2,-24(fp)
 200f818:	10c00c04 	addi	r3,r2,48
 200f81c:	e0bffc17 	ldw	r2,-16(fp)
 200f820:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 200f824:	e0bffa17 	ldw	r2,-24(fp)
 200f828:	10c00b04 	addi	r3,r2,44
 200f82c:	e0bffd17 	ldw	r2,-12(fp)
 200f830:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 200f834:	e0bffa17 	ldw	r2,-24(fp)
 200f838:	10c00a04 	addi	r3,r2,40
 200f83c:	e0bff917 	ldw	r2,-28(fp)
 200f840:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 200f844:	00808074 	movhi	r2,513
 200f848:	10bd4f04 	addi	r2,r2,-2756
 200f84c:	10c00104 	addi	r3,r2,4
 200f850:	e0bffa17 	ldw	r2,-24(fp)
 200f854:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 200f858:	e0bffa17 	ldw	r2,-24(fp)
}
 200f85c:	e037883a 	mov	sp,fp
 200f860:	dfc00117 	ldw	ra,4(sp)
 200f864:	df000017 	ldw	fp,0(sp)
 200f868:	dec00204 	addi	sp,sp,8
 200f86c:	f800283a 	ret

0200f870 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 200f870:	defffe04 	addi	sp,sp,-8
 200f874:	df000115 	stw	fp,4(sp)
 200f878:	df000104 	addi	fp,sp,4
 200f87c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 200f880:	e037883a 	mov	sp,fp
 200f884:	df000017 	ldw	fp,0(sp)
 200f888:	dec00104 	addi	sp,sp,4
 200f88c:	f800283a 	ret

0200f890 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 200f890:	defffe04 	addi	sp,sp,-8
 200f894:	df000115 	stw	fp,4(sp)
 200f898:	df000104 	addi	fp,sp,4
 200f89c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 200f8a0:	e037883a 	mov	sp,fp
 200f8a4:	df000017 	ldw	fp,0(sp)
 200f8a8:	dec00104 	addi	sp,sp,4
 200f8ac:	f800283a 	ret

0200f8b0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 200f8b0:	deffff04 	addi	sp,sp,-4
 200f8b4:	df000015 	stw	fp,0(sp)
 200f8b8:	d839883a 	mov	fp,sp
}
 200f8bc:	e037883a 	mov	sp,fp
 200f8c0:	df000017 	ldw	fp,0(sp)
 200f8c4:	dec00104 	addi	sp,sp,4
 200f8c8:	f800283a 	ret

0200f8cc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 200f8cc:	deffff04 	addi	sp,sp,-4
 200f8d0:	df000015 	stw	fp,0(sp)
 200f8d4:	d839883a 	mov	fp,sp
}
 200f8d8:	e037883a 	mov	sp,fp
 200f8dc:	df000017 	ldw	fp,0(sp)
 200f8e0:	dec00104 	addi	sp,sp,4
 200f8e4:	f800283a 	ret

0200f8e8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 200f8e8:	deffff04 	addi	sp,sp,-4
 200f8ec:	df000015 	stw	fp,0(sp)
 200f8f0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 200f8f4:	e037883a 	mov	sp,fp
 200f8f8:	df000017 	ldw	fp,0(sp)
 200f8fc:	dec00104 	addi	sp,sp,4
 200f900:	f800283a 	ret

0200f904 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 200f904:	deffff04 	addi	sp,sp,-4
 200f908:	df000015 	stw	fp,0(sp)
 200f90c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 200f910:	e037883a 	mov	sp,fp
 200f914:	df000017 	ldw	fp,0(sp)
 200f918:	dec00104 	addi	sp,sp,4
 200f91c:	f800283a 	ret

0200f920 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 200f920:	deffff04 	addi	sp,sp,-4
 200f924:	df000015 	stw	fp,0(sp)
 200f928:	d839883a 	mov	fp,sp
}
 200f92c:	e037883a 	mov	sp,fp
 200f930:	df000017 	ldw	fp,0(sp)
 200f934:	dec00104 	addi	sp,sp,4
 200f938:	f800283a 	ret

0200f93c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 200f93c:	deffff04 	addi	sp,sp,-4
 200f940:	df000015 	stw	fp,0(sp)
 200f944:	d839883a 	mov	fp,sp
}
 200f948:	e037883a 	mov	sp,fp
 200f94c:	df000017 	ldw	fp,0(sp)
 200f950:	dec00104 	addi	sp,sp,4
 200f954:	f800283a 	ret

0200f958 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 200f958:	defffe04 	addi	sp,sp,-8
 200f95c:	df000115 	stw	fp,4(sp)
 200f960:	df000104 	addi	fp,sp,4
 200f964:	e13fff15 	stw	r4,-4(fp)
}
 200f968:	e037883a 	mov	sp,fp
 200f96c:	df000017 	ldw	fp,0(sp)
 200f970:	dec00104 	addi	sp,sp,4
 200f974:	f800283a 	ret

0200f978 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 200f978:	defff404 	addi	sp,sp,-48
 200f97c:	df000b15 	stw	fp,44(sp)
 200f980:	df000b04 	addi	fp,sp,44
 200f984:	e13ffc15 	stw	r4,-16(fp)
 200f988:	e17ffd15 	stw	r5,-12(fp)
 200f98c:	e1bffe15 	stw	r6,-8(fp)
 200f990:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 200f994:	e0fffe17 	ldw	r3,-8(fp)
 200f998:	e0bfff17 	ldw	r2,-4(fp)
 200f99c:	10c5883a 	add	r2,r2,r3
 200f9a0:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 200f9a4:	e0c00117 	ldw	r3,4(fp)
 200f9a8:	e0800217 	ldw	r2,8(fp)
 200f9ac:	10c5883a 	add	r2,r2,r3
 200f9b0:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 200f9b4:	e0800117 	ldw	r2,4(fp)
 200f9b8:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 200f9bc:	e0bffe17 	ldw	r2,-8(fp)
 200f9c0:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 200f9c4:	00800044 	movi	r2,1
 200f9c8:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 200f9cc:	e0bffc17 	ldw	r2,-16(fp)
 200f9d0:	11000504 	addi	r4,r2,20
 200f9d4:	e0fffd17 	ldw	r3,-12(fp)
 200f9d8:	00800044 	movi	r2,1
 200f9dc:	10c6983a 	sll	r3,r2,r3
 200f9e0:	2005883a 	mov	r2,r4
 200f9e4:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 200f9e8:	e0800317 	ldw	r2,12(fp)
 200f9ec:	1080008c 	andi	r2,r2,2
 200f9f0:	1004c03a 	cmpne	r2,r2,zero
 200f9f4:	1000051e 	bne	r2,zero,200fa0c <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 200f9f8:	e0bffc17 	ldw	r2,-16(fp)
 200f9fc:	10800304 	addi	r2,r2,12
 200fa00:	1007883a 	mov	r3,r2
 200fa04:	00810004 	movi	r2,1024
 200fa08:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 200fa0c:	e0bffc17 	ldw	r2,-16(fp)
 200fa10:	10800037 	ldwio	r2,0(r2)
 200fa14:	00000006 	br	200fa18 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 200fa18:	e0bffc17 	ldw	r2,-16(fp)
 200fa1c:	10800204 	addi	r2,r2,8
 200fa20:	10800037 	ldwio	r2,0(r2)
 200fa24:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 200fa28:	e0bff717 	ldw	r2,-36(fp)
 200fa2c:	1080100c 	andi	r2,r2,64
 200fa30:	1005003a 	cmpeq	r2,r2,zero
 200fa34:	1000031e 	bne	r2,zero,200fa44 <alt_avalon_spi_command+0xcc>
 200fa38:	e0bff617 	ldw	r2,-40(fp)
 200fa3c:	1004c03a 	cmpne	r2,r2,zero
 200fa40:	1000041e 	bne	r2,zero,200fa54 <alt_avalon_spi_command+0xdc>
 200fa44:	e0bff717 	ldw	r2,-36(fp)
 200fa48:	1080200c 	andi	r2,r2,128
 200fa4c:	1005003a 	cmpeq	r2,r2,zero
 200fa50:	103ff11e 	bne	r2,zero,200fa18 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 200fa54:	e0bff717 	ldw	r2,-36(fp)
 200fa58:	1080100c 	andi	r2,r2,64
 200fa5c:	1005003a 	cmpeq	r2,r2,zero
 200fa60:	1000201e 	bne	r2,zero,200fae4 <alt_avalon_spi_command+0x16c>
 200fa64:	e0bff617 	ldw	r2,-40(fp)
 200fa68:	10800050 	cmplti	r2,r2,1
 200fa6c:	10001d1e 	bne	r2,zero,200fae4 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 200fa70:	e0bff617 	ldw	r2,-40(fp)
 200fa74:	10bfffc4 	addi	r2,r2,-1
 200fa78:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 200fa7c:	e0ffff17 	ldw	r3,-4(fp)
 200fa80:	e0bffb17 	ldw	r2,-20(fp)
 200fa84:	18800b2e 	bgeu	r3,r2,200fab4 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 200fa88:	e0bffc17 	ldw	r2,-16(fp)
 200fa8c:	11000104 	addi	r4,r2,4
 200fa90:	e0bfff17 	ldw	r2,-4(fp)
 200fa94:	10800003 	ldbu	r2,0(r2)
 200fa98:	10c03fcc 	andi	r3,r2,255
 200fa9c:	e0bfff17 	ldw	r2,-4(fp)
 200faa0:	10800044 	addi	r2,r2,1
 200faa4:	e0bfff15 	stw	r2,-4(fp)
 200faa8:	2005883a 	mov	r2,r4
 200faac:	10c00035 	stwio	r3,0(r2)
 200fab0:	00000c06 	br	200fae4 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 200fab4:	e0bff917 	ldw	r2,-28(fp)
 200fab8:	1005003a 	cmpeq	r2,r2,zero
 200fabc:	1000071e 	bne	r2,zero,200fadc <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 200fac0:	e0bff917 	ldw	r2,-28(fp)
 200fac4:	10bfffc4 	addi	r2,r2,-1
 200fac8:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 200facc:	e0bffc17 	ldw	r2,-16(fp)
 200fad0:	10800104 	addi	r2,r2,4
 200fad4:	10000035 	stwio	zero,0(r2)
 200fad8:	00000206 	br	200fae4 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 200fadc:	00bf0004 	movi	r2,-1024
 200fae0:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 200fae4:	e0bff717 	ldw	r2,-36(fp)
 200fae8:	1080200c 	andi	r2,r2,128
 200faec:	1005003a 	cmpeq	r2,r2,zero
 200faf0:	103fc91e 	bne	r2,zero,200fa18 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 200faf4:	e0bffc17 	ldw	r2,-16(fp)
 200faf8:	10800037 	ldwio	r2,0(r2)
 200fafc:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 200fb00:	e0bff817 	ldw	r2,-32(fp)
 200fb04:	1005003a 	cmpeq	r2,r2,zero
 200fb08:	1000041e 	bne	r2,zero,200fb1c <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 200fb0c:	e0bff817 	ldw	r2,-32(fp)
 200fb10:	10bfffc4 	addi	r2,r2,-1
 200fb14:	e0bff815 	stw	r2,-32(fp)
 200fb18:	00000706 	br	200fb38 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 200fb1c:	e0bff517 	ldw	r2,-44(fp)
 200fb20:	1007883a 	mov	r3,r2
 200fb24:	e0800217 	ldw	r2,8(fp)
 200fb28:	10c00005 	stb	r3,0(r2)
 200fb2c:	e0800217 	ldw	r2,8(fp)
 200fb30:	10800044 	addi	r2,r2,1
 200fb34:	e0800215 	stw	r2,8(fp)
      credits++;
 200fb38:	e0bff617 	ldw	r2,-40(fp)
 200fb3c:	10800044 	addi	r2,r2,1
 200fb40:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 200fb44:	e0bff817 	ldw	r2,-32(fp)
 200fb48:	1004c03a 	cmpne	r2,r2,zero
 200fb4c:	103fb21e 	bne	r2,zero,200fa18 <alt_avalon_spi_command+0xa0>
 200fb50:	e0c00217 	ldw	r3,8(fp)
 200fb54:	e0bffa17 	ldw	r2,-24(fp)
 200fb58:	18800126 	beq	r3,r2,200fb60 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 200fb5c:	003fae06 	br	200fa18 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 200fb60:	e0bffc17 	ldw	r2,-16(fp)
 200fb64:	10800204 	addi	r2,r2,8
 200fb68:	10800037 	ldwio	r2,0(r2)
 200fb6c:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 200fb70:	e0bff717 	ldw	r2,-36(fp)
 200fb74:	1080080c 	andi	r2,r2,32
 200fb78:	1005003a 	cmpeq	r2,r2,zero
 200fb7c:	103ff81e 	bne	r2,zero,200fb60 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 200fb80:	e0800317 	ldw	r2,12(fp)
 200fb84:	1080004c 	andi	r2,r2,1
 200fb88:	1004c03a 	cmpne	r2,r2,zero
 200fb8c:	1000031e 	bne	r2,zero,200fb9c <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 200fb90:	e0bffc17 	ldw	r2,-16(fp)
 200fb94:	10800304 	addi	r2,r2,12
 200fb98:	10000035 	stwio	zero,0(r2)

  return read_length;
 200fb9c:	e0800117 	ldw	r2,4(fp)
}
 200fba0:	e037883a 	mov	sp,fp
 200fba4:	df000017 	ldw	fp,0(sp)
 200fba8:	dec00104 	addi	sp,sp,4
 200fbac:	f800283a 	ret

0200fbb0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 200fbb0:	defff904 	addi	sp,sp,-28
 200fbb4:	dfc00615 	stw	ra,24(sp)
 200fbb8:	df000515 	stw	fp,20(sp)
 200fbbc:	df000504 	addi	fp,sp,20
 200fbc0:	e13ffd15 	stw	r4,-12(fp)
 200fbc4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 200fbc8:	e0bffe17 	ldw	r2,-8(fp)
 200fbcc:	10800017 	ldw	r2,0(r2)
 200fbd0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 200fbd4:	e13ffd17 	ldw	r4,-12(fp)
 200fbd8:	20016400 	call	2001640 <strlen>
 200fbdc:	10800044 	addi	r2,r2,1
 200fbe0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200fbe4:	00000d06 	br	200fc1c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 200fbe8:	e0bffc17 	ldw	r2,-16(fp)
 200fbec:	11000217 	ldw	r4,8(r2)
 200fbf0:	e1bffb17 	ldw	r6,-20(fp)
 200fbf4:	e17ffd17 	ldw	r5,-12(fp)
 200fbf8:	200ff340 	call	200ff34 <memcmp>
 200fbfc:	1004c03a 	cmpne	r2,r2,zero
 200fc00:	1000031e 	bne	r2,zero,200fc10 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 200fc04:	e0bffc17 	ldw	r2,-16(fp)
 200fc08:	e0bfff15 	stw	r2,-4(fp)
 200fc0c:	00000706 	br	200fc2c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 200fc10:	e0bffc17 	ldw	r2,-16(fp)
 200fc14:	10800017 	ldw	r2,0(r2)
 200fc18:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200fc1c:	e0fffe17 	ldw	r3,-8(fp)
 200fc20:	e0bffc17 	ldw	r2,-16(fp)
 200fc24:	10fff01e 	bne	r2,r3,200fbe8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 200fc28:	e03fff15 	stw	zero,-4(fp)
 200fc2c:	e0bfff17 	ldw	r2,-4(fp)
}
 200fc30:	e037883a 	mov	sp,fp
 200fc34:	dfc00117 	ldw	ra,4(sp)
 200fc38:	df000017 	ldw	fp,0(sp)
 200fc3c:	dec00204 	addi	sp,sp,8
 200fc40:	f800283a 	ret

0200fc44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 200fc44:	defffa04 	addi	sp,sp,-24
 200fc48:	dfc00515 	stw	ra,20(sp)
 200fc4c:	df000415 	stw	fp,16(sp)
 200fc50:	df000404 	addi	fp,sp,16
 200fc54:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 200fc58:	00808074 	movhi	r2,513
 200fc5c:	10889c04 	addi	r2,r2,8816
 200fc60:	10800017 	ldw	r2,0(r2)
 200fc64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200fc68:	00003306 	br	200fd38 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 200fc6c:	e0bffd17 	ldw	r2,-12(fp)
 200fc70:	11000217 	ldw	r4,8(r2)
 200fc74:	20016400 	call	2001640 <strlen>
 200fc78:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 200fc7c:	e0bffd17 	ldw	r2,-12(fp)
 200fc80:	10c00217 	ldw	r3,8(r2)
 200fc84:	e0bffc17 	ldw	r2,-16(fp)
 200fc88:	1885883a 	add	r2,r3,r2
 200fc8c:	10bfffc4 	addi	r2,r2,-1
 200fc90:	10800003 	ldbu	r2,0(r2)
 200fc94:	10803fcc 	andi	r2,r2,255
 200fc98:	1080201c 	xori	r2,r2,128
 200fc9c:	10bfe004 	addi	r2,r2,-128
 200fca0:	10800bd8 	cmpnei	r2,r2,47
 200fca4:	1000031e 	bne	r2,zero,200fcb4 <alt_find_file+0x70>
    {
      len -= 1;
 200fca8:	e0bffc17 	ldw	r2,-16(fp)
 200fcac:	10bfffc4 	addi	r2,r2,-1
 200fcb0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200fcb4:	e0bffc17 	ldw	r2,-16(fp)
 200fcb8:	1007883a 	mov	r3,r2
 200fcbc:	e0bffe17 	ldw	r2,-8(fp)
 200fcc0:	1885883a 	add	r2,r3,r2
 200fcc4:	10800003 	ldbu	r2,0(r2)
 200fcc8:	10803fcc 	andi	r2,r2,255
 200fccc:	1080201c 	xori	r2,r2,128
 200fcd0:	10bfe004 	addi	r2,r2,-128
 200fcd4:	10800be0 	cmpeqi	r2,r2,47
 200fcd8:	10000a1e 	bne	r2,zero,200fd04 <alt_find_file+0xc0>
 200fcdc:	e0bffc17 	ldw	r2,-16(fp)
 200fce0:	1007883a 	mov	r3,r2
 200fce4:	e0bffe17 	ldw	r2,-8(fp)
 200fce8:	1885883a 	add	r2,r3,r2
 200fcec:	10800003 	ldbu	r2,0(r2)
 200fcf0:	10803fcc 	andi	r2,r2,255
 200fcf4:	1080201c 	xori	r2,r2,128
 200fcf8:	10bfe004 	addi	r2,r2,-128
 200fcfc:	1004c03a 	cmpne	r2,r2,zero
 200fd00:	10000a1e 	bne	r2,zero,200fd2c <alt_find_file+0xe8>
 200fd04:	e0bffd17 	ldw	r2,-12(fp)
 200fd08:	11000217 	ldw	r4,8(r2)
 200fd0c:	e1bffc17 	ldw	r6,-16(fp)
 200fd10:	e17ffe17 	ldw	r5,-8(fp)
 200fd14:	200ff340 	call	200ff34 <memcmp>
 200fd18:	1004c03a 	cmpne	r2,r2,zero
 200fd1c:	1000031e 	bne	r2,zero,200fd2c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 200fd20:	e0bffd17 	ldw	r2,-12(fp)
 200fd24:	e0bfff15 	stw	r2,-4(fp)
 200fd28:	00000806 	br	200fd4c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 200fd2c:	e0bffd17 	ldw	r2,-12(fp)
 200fd30:	10800017 	ldw	r2,0(r2)
 200fd34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200fd38:	00c08074 	movhi	r3,513
 200fd3c:	18c89c04 	addi	r3,r3,8816
 200fd40:	e0bffd17 	ldw	r2,-12(fp)
 200fd44:	10ffc91e 	bne	r2,r3,200fc6c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200fd48:	e03fff15 	stw	zero,-4(fp)
 200fd4c:	e0bfff17 	ldw	r2,-4(fp)
}
 200fd50:	e037883a 	mov	sp,fp
 200fd54:	dfc00117 	ldw	ra,4(sp)
 200fd58:	df000017 	ldw	fp,0(sp)
 200fd5c:	dec00204 	addi	sp,sp,8
 200fd60:	f800283a 	ret

0200fd64 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 200fd64:	defff804 	addi	sp,sp,-32
 200fd68:	dfc00715 	stw	ra,28(sp)
 200fd6c:	df000615 	stw	fp,24(sp)
 200fd70:	df000604 	addi	fp,sp,24
 200fd74:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 200fd78:	00bffa04 	movi	r2,-24
 200fd7c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 200fd80:	00808074 	movhi	r2,513
 200fd84:	108fc204 	addi	r2,r2,16136
 200fd88:	10800017 	ldw	r2,0(r2)
 200fd8c:	e0bffa15 	stw	r2,-24(fp)
 200fd90:	e03ffb0d 	sth	zero,-20(fp)
 200fd94:	e17ffb0b 	ldhu	r5,-20(fp)
 200fd98:	e1bffe04 	addi	r6,fp,-8
 200fd9c:	e13ffa17 	ldw	r4,-24(fp)
 200fda0:	200a0680 	call	200a068 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200fda4:	e03ffd15 	stw	zero,-12(fp)
 200fda8:	00001e06 	br	200fe24 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 200fdac:	e0bffd17 	ldw	r2,-12(fp)
 200fdb0:	00c08074 	movhi	r3,513
 200fdb4:	18c3dc04 	addi	r3,r3,3952
 200fdb8:	10800324 	muli	r2,r2,12
 200fdbc:	10c5883a 	add	r2,r2,r3
 200fdc0:	10800017 	ldw	r2,0(r2)
 200fdc4:	1004c03a 	cmpne	r2,r2,zero
 200fdc8:	1000131e 	bne	r2,zero,200fe18 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 200fdcc:	e0bffd17 	ldw	r2,-12(fp)
 200fdd0:	00c08074 	movhi	r3,513
 200fdd4:	18c3dc04 	addi	r3,r3,3952
 200fdd8:	10800324 	muli	r2,r2,12
 200fddc:	10c7883a 	add	r3,r2,r3
 200fde0:	e0bfff17 	ldw	r2,-4(fp)
 200fde4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 200fde8:	00808074 	movhi	r2,513
 200fdec:	1088a004 	addi	r2,r2,8832
 200fdf0:	10c00017 	ldw	r3,0(r2)
 200fdf4:	e0bffd17 	ldw	r2,-12(fp)
 200fdf8:	1880040e 	bge	r3,r2,200fe0c <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 200fdfc:	00c08074 	movhi	r3,513
 200fe00:	18c8a004 	addi	r3,r3,8832
 200fe04:	e0bffd17 	ldw	r2,-12(fp)
 200fe08:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 200fe0c:	e0bffd17 	ldw	r2,-12(fp)
 200fe10:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 200fe14:	00000606 	br	200fe30 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200fe18:	e0bffd17 	ldw	r2,-12(fp)
 200fe1c:	10800044 	addi	r2,r2,1
 200fe20:	e0bffd15 	stw	r2,-12(fp)
 200fe24:	e0bffd17 	ldw	r2,-12(fp)
 200fe28:	10800810 	cmplti	r2,r2,32
 200fe2c:	103fdf1e 	bne	r2,zero,200fdac <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 200fe30:	00808074 	movhi	r2,513
 200fe34:	108fc204 	addi	r2,r2,16136
 200fe38:	11000017 	ldw	r4,0(r2)
 200fe3c:	200a4600 	call	200a460 <OSSemPost>

  return rc;
 200fe40:	e0bffc17 	ldw	r2,-16(fp)
}
 200fe44:	e037883a 	mov	sp,fp
 200fe48:	dfc00117 	ldw	ra,4(sp)
 200fe4c:	df000017 	ldw	fp,0(sp)
 200fe50:	dec00204 	addi	sp,sp,8
 200fe54:	f800283a 	ret

0200fe58 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 200fe58:	defffb04 	addi	sp,sp,-20
 200fe5c:	df000415 	stw	fp,16(sp)
 200fe60:	df000404 	addi	fp,sp,16
 200fe64:	e13ffe15 	stw	r4,-8(fp)
 200fe68:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 200fe6c:	e0bfff17 	ldw	r2,-4(fp)
 200fe70:	10880070 	cmpltui	r2,r2,8193
 200fe74:	1000021e 	bne	r2,zero,200fe80 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 200fe78:	00880004 	movi	r2,8192
 200fe7c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 200fe80:	e0fffe17 	ldw	r3,-8(fp)
 200fe84:	e0bfff17 	ldw	r2,-4(fp)
 200fe88:	1885883a 	add	r2,r3,r2
 200fe8c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 200fe90:	e0bffe17 	ldw	r2,-8(fp)
 200fe94:	e0bffd15 	stw	r2,-12(fp)
 200fe98:	00000506 	br	200feb0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 200fe9c:	e0bffd17 	ldw	r2,-12(fp)
 200fea0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 200fea4:	e0bffd17 	ldw	r2,-12(fp)
 200fea8:	10800804 	addi	r2,r2,32
 200feac:	e0bffd15 	stw	r2,-12(fp)
 200feb0:	e0fffd17 	ldw	r3,-12(fp)
 200feb4:	e0bffc17 	ldw	r2,-16(fp)
 200feb8:	18bff836 	bltu	r3,r2,200fe9c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 200febc:	e0bffe17 	ldw	r2,-8(fp)
 200fec0:	108007cc 	andi	r2,r2,31
 200fec4:	1005003a 	cmpeq	r2,r2,zero
 200fec8:	1000021e 	bne	r2,zero,200fed4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 200fecc:	e0bffd17 	ldw	r2,-12(fp)
 200fed0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 200fed4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 200fed8:	e037883a 	mov	sp,fp
 200fedc:	df000017 	ldw	fp,0(sp)
 200fee0:	dec00104 	addi	sp,sp,4
 200fee4:	f800283a 	ret

0200fee8 <atexit>:
 200fee8:	200b883a 	mov	r5,r4
 200feec:	000d883a 	mov	r6,zero
 200fef0:	0009883a 	mov	r4,zero
 200fef4:	000f883a 	mov	r7,zero
 200fef8:	200ffa81 	jmpi	200ffa8 <__register_exitproc>

0200fefc <exit>:
 200fefc:	defffe04 	addi	sp,sp,-8
 200ff00:	000b883a 	mov	r5,zero
 200ff04:	dc000015 	stw	r16,0(sp)
 200ff08:	dfc00115 	stw	ra,4(sp)
 200ff0c:	2021883a 	mov	r16,r4
 200ff10:	20100e00 	call	20100e0 <__call_exitprocs>
 200ff14:	00808074 	movhi	r2,513
 200ff18:	10889b04 	addi	r2,r2,8812
 200ff1c:	11000017 	ldw	r4,0(r2)
 200ff20:	20800f17 	ldw	r2,60(r4)
 200ff24:	10000126 	beq	r2,zero,200ff2c <exit+0x30>
 200ff28:	103ee83a 	callr	r2
 200ff2c:	8009883a 	mov	r4,r16
 200ff30:	201041c0 	call	201041c <_exit>

0200ff34 <memcmp>:
 200ff34:	00c000c4 	movi	r3,3
 200ff38:	1980032e 	bgeu	r3,r6,200ff48 <memcmp+0x14>
 200ff3c:	2144b03a 	or	r2,r4,r5
 200ff40:	10c4703a 	and	r2,r2,r3
 200ff44:	10000f26 	beq	r2,zero,200ff84 <memcmp+0x50>
 200ff48:	31ffffc4 	addi	r7,r6,-1
 200ff4c:	3000061e 	bne	r6,zero,200ff68 <memcmp+0x34>
 200ff50:	00000a06 	br	200ff7c <memcmp+0x48>
 200ff54:	39ffffc4 	addi	r7,r7,-1
 200ff58:	00bfffc4 	movi	r2,-1
 200ff5c:	21000044 	addi	r4,r4,1
 200ff60:	29400044 	addi	r5,r5,1
 200ff64:	38800526 	beq	r7,r2,200ff7c <memcmp+0x48>
 200ff68:	20c00003 	ldbu	r3,0(r4)
 200ff6c:	28800003 	ldbu	r2,0(r5)
 200ff70:	18bff826 	beq	r3,r2,200ff54 <memcmp+0x20>
 200ff74:	1885c83a 	sub	r2,r3,r2
 200ff78:	f800283a 	ret
 200ff7c:	0005883a 	mov	r2,zero
 200ff80:	f800283a 	ret
 200ff84:	180f883a 	mov	r7,r3
 200ff88:	20c00017 	ldw	r3,0(r4)
 200ff8c:	28800017 	ldw	r2,0(r5)
 200ff90:	18bfed1e 	bne	r3,r2,200ff48 <memcmp+0x14>
 200ff94:	31bfff04 	addi	r6,r6,-4
 200ff98:	21000104 	addi	r4,r4,4
 200ff9c:	29400104 	addi	r5,r5,4
 200ffa0:	39bff936 	bltu	r7,r6,200ff88 <memcmp+0x54>
 200ffa4:	003fe806 	br	200ff48 <memcmp+0x14>

0200ffa8 <__register_exitproc>:
 200ffa8:	defffa04 	addi	sp,sp,-24
 200ffac:	00808074 	movhi	r2,513
 200ffb0:	10889b04 	addi	r2,r2,8812
 200ffb4:	dc000015 	stw	r16,0(sp)
 200ffb8:	14000017 	ldw	r16,0(r2)
 200ffbc:	dd000415 	stw	r20,16(sp)
 200ffc0:	2829883a 	mov	r20,r5
 200ffc4:	81405217 	ldw	r5,328(r16)
 200ffc8:	dcc00315 	stw	r19,12(sp)
 200ffcc:	dc800215 	stw	r18,8(sp)
 200ffd0:	dc400115 	stw	r17,4(sp)
 200ffd4:	dfc00515 	stw	ra,20(sp)
 200ffd8:	2023883a 	mov	r17,r4
 200ffdc:	3027883a 	mov	r19,r6
 200ffe0:	3825883a 	mov	r18,r7
 200ffe4:	28002526 	beq	r5,zero,201007c <__register_exitproc+0xd4>
 200ffe8:	29000117 	ldw	r4,4(r5)
 200ffec:	008007c4 	movi	r2,31
 200fff0:	11002716 	blt	r2,r4,2010090 <__register_exitproc+0xe8>
 200fff4:	8800101e 	bne	r17,zero,2010038 <__register_exitproc+0x90>
 200fff8:	2105883a 	add	r2,r4,r4
 200fffc:	1085883a 	add	r2,r2,r2
 2010000:	20c00044 	addi	r3,r4,1
 2010004:	1145883a 	add	r2,r2,r5
 2010008:	0009883a 	mov	r4,zero
 201000c:	15000215 	stw	r20,8(r2)
 2010010:	28c00115 	stw	r3,4(r5)
 2010014:	2005883a 	mov	r2,r4
 2010018:	dfc00517 	ldw	ra,20(sp)
 201001c:	dd000417 	ldw	r20,16(sp)
 2010020:	dcc00317 	ldw	r19,12(sp)
 2010024:	dc800217 	ldw	r18,8(sp)
 2010028:	dc400117 	ldw	r17,4(sp)
 201002c:	dc000017 	ldw	r16,0(sp)
 2010030:	dec00604 	addi	sp,sp,24
 2010034:	f800283a 	ret
 2010038:	29802204 	addi	r6,r5,136
 201003c:	00800044 	movi	r2,1
 2010040:	110e983a 	sll	r7,r2,r4
 2010044:	30c04017 	ldw	r3,256(r6)
 2010048:	2105883a 	add	r2,r4,r4
 201004c:	1085883a 	add	r2,r2,r2
 2010050:	1185883a 	add	r2,r2,r6
 2010054:	19c6b03a 	or	r3,r3,r7
 2010058:	14802015 	stw	r18,128(r2)
 201005c:	14c00015 	stw	r19,0(r2)
 2010060:	00800084 	movi	r2,2
 2010064:	30c04015 	stw	r3,256(r6)
 2010068:	88bfe31e 	bne	r17,r2,200fff8 <__register_exitproc+0x50>
 201006c:	30804117 	ldw	r2,260(r6)
 2010070:	11c4b03a 	or	r2,r2,r7
 2010074:	30804115 	stw	r2,260(r6)
 2010078:	003fdf06 	br	200fff8 <__register_exitproc+0x50>
 201007c:	008080b4 	movhi	r2,514
 2010080:	10a4b804 	addi	r2,r2,-27936
 2010084:	100b883a 	mov	r5,r2
 2010088:	80805215 	stw	r2,328(r16)
 201008c:	003fd606 	br	200ffe8 <__register_exitproc+0x40>
 2010090:	00808034 	movhi	r2,512
 2010094:	10837204 	addi	r2,r2,3528
 2010098:	1000021e 	bne	r2,zero,20100a4 <__register_exitproc+0xfc>
 201009c:	013fffc4 	movi	r4,-1
 20100a0:	003fdc06 	br	2010014 <__register_exitproc+0x6c>
 20100a4:	01006404 	movi	r4,400
 20100a8:	103ee83a 	callr	r2
 20100ac:	1007883a 	mov	r3,r2
 20100b0:	103ffa26 	beq	r2,zero,201009c <__register_exitproc+0xf4>
 20100b4:	80805217 	ldw	r2,328(r16)
 20100b8:	180b883a 	mov	r5,r3
 20100bc:	18000115 	stw	zero,4(r3)
 20100c0:	18800015 	stw	r2,0(r3)
 20100c4:	80c05215 	stw	r3,328(r16)
 20100c8:	18006215 	stw	zero,392(r3)
 20100cc:	18006315 	stw	zero,396(r3)
 20100d0:	0009883a 	mov	r4,zero
 20100d4:	883fc826 	beq	r17,zero,200fff8 <__register_exitproc+0x50>
 20100d8:	003fd706 	br	2010038 <__register_exitproc+0x90>

020100dc <register_fini>:
 20100dc:	f800283a 	ret

020100e0 <__call_exitprocs>:
 20100e0:	00808074 	movhi	r2,513
 20100e4:	10889b04 	addi	r2,r2,8812
 20100e8:	10800017 	ldw	r2,0(r2)
 20100ec:	defff304 	addi	sp,sp,-52
 20100f0:	df000b15 	stw	fp,44(sp)
 20100f4:	d8800115 	stw	r2,4(sp)
 20100f8:	00808034 	movhi	r2,512
 20100fc:	10836d04 	addi	r2,r2,3508
 2010100:	1005003a 	cmpeq	r2,r2,zero
 2010104:	d8800215 	stw	r2,8(sp)
 2010108:	d8800117 	ldw	r2,4(sp)
 201010c:	dd400815 	stw	r21,32(sp)
 2010110:	dd000715 	stw	r20,28(sp)
 2010114:	10805204 	addi	r2,r2,328
 2010118:	dfc00c15 	stw	ra,48(sp)
 201011c:	ddc00a15 	stw	r23,40(sp)
 2010120:	dd800915 	stw	r22,36(sp)
 2010124:	dcc00615 	stw	r19,24(sp)
 2010128:	dc800515 	stw	r18,20(sp)
 201012c:	dc400415 	stw	r17,16(sp)
 2010130:	dc000315 	stw	r16,12(sp)
 2010134:	282b883a 	mov	r21,r5
 2010138:	2039883a 	mov	fp,r4
 201013c:	d8800015 	stw	r2,0(sp)
 2010140:	2829003a 	cmpeq	r20,r5,zero
 2010144:	d8800117 	ldw	r2,4(sp)
 2010148:	14405217 	ldw	r17,328(r2)
 201014c:	88001026 	beq	r17,zero,2010190 <__call_exitprocs+0xb0>
 2010150:	ddc00017 	ldw	r23,0(sp)
 2010154:	88800117 	ldw	r2,4(r17)
 2010158:	8c802204 	addi	r18,r17,136
 201015c:	143fffc4 	addi	r16,r2,-1
 2010160:	80000916 	blt	r16,zero,2010188 <__call_exitprocs+0xa8>
 2010164:	05bfffc4 	movi	r22,-1
 2010168:	a000151e 	bne	r20,zero,20101c0 <__call_exitprocs+0xe0>
 201016c:	8409883a 	add	r4,r16,r16
 2010170:	2105883a 	add	r2,r4,r4
 2010174:	1485883a 	add	r2,r2,r18
 2010178:	10c02017 	ldw	r3,128(r2)
 201017c:	a8c01126 	beq	r21,r3,20101c4 <__call_exitprocs+0xe4>
 2010180:	843fffc4 	addi	r16,r16,-1
 2010184:	85bff81e 	bne	r16,r22,2010168 <__call_exitprocs+0x88>
 2010188:	d8800217 	ldw	r2,8(sp)
 201018c:	10003126 	beq	r2,zero,2010254 <__call_exitprocs+0x174>
 2010190:	dfc00c17 	ldw	ra,48(sp)
 2010194:	df000b17 	ldw	fp,44(sp)
 2010198:	ddc00a17 	ldw	r23,40(sp)
 201019c:	dd800917 	ldw	r22,36(sp)
 20101a0:	dd400817 	ldw	r21,32(sp)
 20101a4:	dd000717 	ldw	r20,28(sp)
 20101a8:	dcc00617 	ldw	r19,24(sp)
 20101ac:	dc800517 	ldw	r18,20(sp)
 20101b0:	dc400417 	ldw	r17,16(sp)
 20101b4:	dc000317 	ldw	r16,12(sp)
 20101b8:	dec00d04 	addi	sp,sp,52
 20101bc:	f800283a 	ret
 20101c0:	8409883a 	add	r4,r16,r16
 20101c4:	88c00117 	ldw	r3,4(r17)
 20101c8:	2105883a 	add	r2,r4,r4
 20101cc:	1445883a 	add	r2,r2,r17
 20101d0:	18ffffc4 	addi	r3,r3,-1
 20101d4:	11800217 	ldw	r6,8(r2)
 20101d8:	1c001526 	beq	r3,r16,2010230 <__call_exitprocs+0x150>
 20101dc:	10000215 	stw	zero,8(r2)
 20101e0:	303fe726 	beq	r6,zero,2010180 <__call_exitprocs+0xa0>
 20101e4:	00c00044 	movi	r3,1
 20101e8:	1c06983a 	sll	r3,r3,r16
 20101ec:	90804017 	ldw	r2,256(r18)
 20101f0:	8cc00117 	ldw	r19,4(r17)
 20101f4:	1884703a 	and	r2,r3,r2
 20101f8:	10001426 	beq	r2,zero,201024c <__call_exitprocs+0x16c>
 20101fc:	90804117 	ldw	r2,260(r18)
 2010200:	1884703a 	and	r2,r3,r2
 2010204:	10000c1e 	bne	r2,zero,2010238 <__call_exitprocs+0x158>
 2010208:	2105883a 	add	r2,r4,r4
 201020c:	1485883a 	add	r2,r2,r18
 2010210:	11400017 	ldw	r5,0(r2)
 2010214:	e009883a 	mov	r4,fp
 2010218:	303ee83a 	callr	r6
 201021c:	88800117 	ldw	r2,4(r17)
 2010220:	98bfc81e 	bne	r19,r2,2010144 <__call_exitprocs+0x64>
 2010224:	b8800017 	ldw	r2,0(r23)
 2010228:	147fd526 	beq	r2,r17,2010180 <__call_exitprocs+0xa0>
 201022c:	003fc506 	br	2010144 <__call_exitprocs+0x64>
 2010230:	8c000115 	stw	r16,4(r17)
 2010234:	003fea06 	br	20101e0 <__call_exitprocs+0x100>
 2010238:	2105883a 	add	r2,r4,r4
 201023c:	1485883a 	add	r2,r2,r18
 2010240:	11000017 	ldw	r4,0(r2)
 2010244:	303ee83a 	callr	r6
 2010248:	003ff406 	br	201021c <__call_exitprocs+0x13c>
 201024c:	303ee83a 	callr	r6
 2010250:	003ff206 	br	201021c <__call_exitprocs+0x13c>
 2010254:	88800117 	ldw	r2,4(r17)
 2010258:	1000081e 	bne	r2,zero,201027c <__call_exitprocs+0x19c>
 201025c:	89000017 	ldw	r4,0(r17)
 2010260:	20000726 	beq	r4,zero,2010280 <__call_exitprocs+0x1a0>
 2010264:	b9000015 	stw	r4,0(r23)
 2010268:	8809883a 	mov	r4,r17
 201026c:	2000db40 	call	2000db4 <free>
 2010270:	bc400017 	ldw	r17,0(r23)
 2010274:	883fb71e 	bne	r17,zero,2010154 <__call_exitprocs+0x74>
 2010278:	003fc506 	br	2010190 <__call_exitprocs+0xb0>
 201027c:	89000017 	ldw	r4,0(r17)
 2010280:	882f883a 	mov	r23,r17
 2010284:	2023883a 	mov	r17,r4
 2010288:	883fb21e 	bne	r17,zero,2010154 <__call_exitprocs+0x74>
 201028c:	003fc006 	br	2010190 <__call_exitprocs+0xb0>

02010290 <udivmodsi4>:
 2010290:	29001b2e 	bgeu	r5,r4,2010300 <udivmodsi4+0x70>
 2010294:	28001a16 	blt	r5,zero,2010300 <udivmodsi4+0x70>
 2010298:	00800044 	movi	r2,1
 201029c:	0007883a 	mov	r3,zero
 20102a0:	01c007c4 	movi	r7,31
 20102a4:	00000306 	br	20102b4 <udivmodsi4+0x24>
 20102a8:	19c01326 	beq	r3,r7,20102f8 <udivmodsi4+0x68>
 20102ac:	18c00044 	addi	r3,r3,1
 20102b0:	28000416 	blt	r5,zero,20102c4 <udivmodsi4+0x34>
 20102b4:	294b883a 	add	r5,r5,r5
 20102b8:	1085883a 	add	r2,r2,r2
 20102bc:	293ffa36 	bltu	r5,r4,20102a8 <udivmodsi4+0x18>
 20102c0:	10000d26 	beq	r2,zero,20102f8 <udivmodsi4+0x68>
 20102c4:	0007883a 	mov	r3,zero
 20102c8:	21400236 	bltu	r4,r5,20102d4 <udivmodsi4+0x44>
 20102cc:	2149c83a 	sub	r4,r4,r5
 20102d0:	1886b03a 	or	r3,r3,r2
 20102d4:	1004d07a 	srli	r2,r2,1
 20102d8:	280ad07a 	srli	r5,r5,1
 20102dc:	103ffa1e 	bne	r2,zero,20102c8 <udivmodsi4+0x38>
 20102e0:	30000226 	beq	r6,zero,20102ec <udivmodsi4+0x5c>
 20102e4:	2005883a 	mov	r2,r4
 20102e8:	f800283a 	ret
 20102ec:	1809883a 	mov	r4,r3
 20102f0:	2005883a 	mov	r2,r4
 20102f4:	f800283a 	ret
 20102f8:	0007883a 	mov	r3,zero
 20102fc:	003ff806 	br	20102e0 <udivmodsi4+0x50>
 2010300:	00800044 	movi	r2,1
 2010304:	0007883a 	mov	r3,zero
 2010308:	003fef06 	br	20102c8 <udivmodsi4+0x38>

0201030c <__divsi3>:
 201030c:	defffe04 	addi	sp,sp,-8
 2010310:	dc000015 	stw	r16,0(sp)
 2010314:	dfc00115 	stw	ra,4(sp)
 2010318:	0021883a 	mov	r16,zero
 201031c:	20000c16 	blt	r4,zero,2010350 <__divsi3+0x44>
 2010320:	000d883a 	mov	r6,zero
 2010324:	28000e16 	blt	r5,zero,2010360 <__divsi3+0x54>
 2010328:	20102900 	call	2010290 <udivmodsi4>
 201032c:	1007883a 	mov	r3,r2
 2010330:	8005003a 	cmpeq	r2,r16,zero
 2010334:	1000011e 	bne	r2,zero,201033c <__divsi3+0x30>
 2010338:	00c7c83a 	sub	r3,zero,r3
 201033c:	1805883a 	mov	r2,r3
 2010340:	dfc00117 	ldw	ra,4(sp)
 2010344:	dc000017 	ldw	r16,0(sp)
 2010348:	dec00204 	addi	sp,sp,8
 201034c:	f800283a 	ret
 2010350:	0109c83a 	sub	r4,zero,r4
 2010354:	04000044 	movi	r16,1
 2010358:	000d883a 	mov	r6,zero
 201035c:	283ff20e 	bge	r5,zero,2010328 <__divsi3+0x1c>
 2010360:	014bc83a 	sub	r5,zero,r5
 2010364:	8021003a 	cmpeq	r16,r16,zero
 2010368:	003fef06 	br	2010328 <__divsi3+0x1c>

0201036c <__modsi3>:
 201036c:	deffff04 	addi	sp,sp,-4
 2010370:	dfc00015 	stw	ra,0(sp)
 2010374:	01800044 	movi	r6,1
 2010378:	2807883a 	mov	r3,r5
 201037c:	20000416 	blt	r4,zero,2010390 <__modsi3+0x24>
 2010380:	28000c16 	blt	r5,zero,20103b4 <__modsi3+0x48>
 2010384:	dfc00017 	ldw	ra,0(sp)
 2010388:	dec00104 	addi	sp,sp,4
 201038c:	20102901 	jmpi	2010290 <udivmodsi4>
 2010390:	0109c83a 	sub	r4,zero,r4
 2010394:	28000b16 	blt	r5,zero,20103c4 <__modsi3+0x58>
 2010398:	180b883a 	mov	r5,r3
 201039c:	01800044 	movi	r6,1
 20103a0:	20102900 	call	2010290 <udivmodsi4>
 20103a4:	0085c83a 	sub	r2,zero,r2
 20103a8:	dfc00017 	ldw	ra,0(sp)
 20103ac:	dec00104 	addi	sp,sp,4
 20103b0:	f800283a 	ret
 20103b4:	014bc83a 	sub	r5,zero,r5
 20103b8:	dfc00017 	ldw	ra,0(sp)
 20103bc:	dec00104 	addi	sp,sp,4
 20103c0:	20102901 	jmpi	2010290 <udivmodsi4>
 20103c4:	0147c83a 	sub	r3,zero,r5
 20103c8:	003ff306 	br	2010398 <__modsi3+0x2c>

020103cc <__udivsi3>:
 20103cc:	000d883a 	mov	r6,zero
 20103d0:	20102901 	jmpi	2010290 <udivmodsi4>

020103d4 <__umodsi3>:
 20103d4:	01800044 	movi	r6,1
 20103d8:	20102901 	jmpi	2010290 <udivmodsi4>

020103dc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 20103dc:	defffd04 	addi	sp,sp,-12
 20103e0:	df000215 	stw	fp,8(sp)
 20103e4:	df000204 	addi	fp,sp,8
 20103e8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 20103ec:	e0bfff17 	ldw	r2,-4(fp)
 20103f0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20103f4:	e0bffe17 	ldw	r2,-8(fp)
 20103f8:	1005003a 	cmpeq	r2,r2,zero
 20103fc:	1000021e 	bne	r2,zero,2010408 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 2010400:	002af070 	cmpltui	zero,zero,43969
 2010404:	00000106 	br	201040c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 2010408:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 201040c:	e037883a 	mov	sp,fp
 2010410:	df000017 	ldw	fp,0(sp)
 2010414:	dec00104 	addi	sp,sp,4
 2010418:	f800283a 	ret

0201041c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 201041c:	defffd04 	addi	sp,sp,-12
 2010420:	dfc00215 	stw	ra,8(sp)
 2010424:	df000115 	stw	fp,4(sp)
 2010428:	df000104 	addi	fp,sp,4
 201042c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2010430:	00808074 	movhi	r2,513
 2010434:	108fca44 	addi	r2,r2,16169
 2010438:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 201043c:	e13fff17 	ldw	r4,-4(fp)
 2010440:	20103dc0 	call	20103dc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2010444:	003fff06 	br	2010444 <_exit+0x28>
 2010448:	02000810 	cmplti	r8,zero,32
 201044c:	020100dc 	xori	r8,zero,1027
 2010450:	020007e0 	cmpeqi	r8,zero,31
